Generation:
100

Phenotype:
'LINKS' if direction and robot_pos_y < robot_pos_x or intersect_centers_y > velocity_x and intersect_centers_x >= hypot( intersect_radius , velocity_x ) else 'LINKS' if direction and ( obstacle_x * velocity_y ) >= intersect_centers_y or velocity_y > obstacle_y and robot_pos_y >= ( intersect_radius * velocity_y ) or hypot( hypot( robot_pos_y , intersect_radius ) , intersect_centers_x ) <= hypot( obstacle_y , velocity_x ) or not hypot( ( velocity_x + robot_pos_y ) , hypot( robot_pos_x , robot_pos_x ) ) >= ( obstacle_x * velocity_y ) else 'RECHTS' if ( intersect_radius + intersect_radius ) <= ( robot_pos_y / velocity_x ) and direction else 'RECHTS' if robot_pos_x <= velocity_y and direction else 'LINKS' if ( ( robot_pos_x * intersect_centers_y ) >= velocity_y ) and ( obstacle_y > intersect_radius or robot_pos_x >= hypot( robot_pos_y , robot_pos_y ) and intersect_centers_x > hypot( intersect_radius , velocity_y ) or velocity_x >= obstacle_y and ( obstacle_x / robot_pos_y ) > ( velocity_y / robot_pos_x ) and ( ( intersect_radius - intersect_centers_x ) / robot_pos_y ) >= ( hypot( obstacle_y , velocity_y ) / robot_pos_x ) ) or direction else 'LINKS' if obstacle_x < velocity_x or intersect_centers_y >= intersect_centers_y and not robot_pos_y != obstacle_y or direction else 'RECHTS' if not direction and ( velocity_y * velocity_y ) < velocity_x or not robot_pos_y < obstacle_y or hypot( robot_pos_y , intersect_centers_y ) < hypot( velocity_y , velocity_y ) and ( -6.28 / ( velocity_y / velocity_x ) ) < ( hypot( obstacle_x , velocity_x ) / velocity_y ) and ( -0.70 - hypot( intersect_radius , obstacle_x ) ) < ( hypot( intersect_centers_y , velocity_x ) / ( obstacle_x - intersect_radius ) ) or hypot( robot_pos_y , intersect_centers_y ) <= ( robot_pos_x * ( intersect_radius - intersect_centers_y ) ) and obstacle_x < ( hypot( velocity_y , intersect_radius ) / velocity_y ) and 9.38 >= hypot( 3.49 , ( -4.04 + intersect_centers_y ) ) else 'RECHTS' if direction and robot_pos_x >= intersect_centers_x or velocity_x >= velocity_y and robot_pos_x > hypot( robot_pos_y , robot_pos_y ) else 'LINKS'

Genotype:
[44305, 2212, 9078, 50842, 47358, 99184, 56763, 61811, 57749, 73770, 97291, 77094, 43348, 24858, 92221, 18225, 30698, 45097, 39620, 94957, 31705, 69176, 73074, 93032, 14790, 28054, 17610, 15210, 54707, 56661, 76521, 34170, 81045, 98600, 70623, 75945, 37703, 74045, 87512, 83969, 52519, 95149, 12544, 60969, 60969, 97291, 95428, 20998, 6894, 19002, 4154, 21110, 52230, 58930, 56275, 57228, 88784, 38935, 16642, 31705, 69176, 90057, 25683, 56275, 71169, 25986, 56315, 31594, 7920, 12935, 56115, 68003, 25226, 4154, 63375, 77654, 53330, 9730, 73545, 95590, 6765, 37944, 70623, 87658, 77890, 66869, 96470, 68033, 88380, 17289, 69513, 91653, 70245, 95242, 26425, 95927, 62958, 39940, 78420, 18328, 47423, 68314, 65950, 88142, 78000, 6320, 37754, 24868, 90515, 76309, 38925, 27178, 28394, 4154, 63375, 39792, 54046, 56275, 59901, 93458, 16620, 10883, 42380, 72548, 69972, 17788, 7920, 53432, 68799, 79145, 61625, 39308, 55435, 57017, 65757, 16564, 45155, 36539, 65971, 76015, 78971, 87190, 93458, 16620, 40797, 65218, 72548, 69972, 17788, 7920, 12943, 71275, 53440, 15, 61170, 591, 87190, 76313, 61811, 39782, 45400, 20637, 19556, 65459, 59464, 37022, 37566, 98422, 4154, 21110, 27133, 58930, 56275, 91621, 21314, 76125, 47949, 90680, 44151, 44151, 70940, 23556, 20451, 23446, 15750, 28642, 76026, 9145, 95042, 31705, 69176, 61509, 69777, 55370, 99322, 86354, 52188, 39045, 48464, 63210, 57356, 56661, 76521, 71730, 50670, 84630, 70623, 52430, 155, 88380, 46734, 94355, 94355, 87130, 35295, 62438, 40610, 62771, 87470, 60935, 25879, 93333, 16763, 31079, 22470, 55992, 77871, 46300, 57635, 89190, 65019, 7920, 53016, 89923, 43440, 81079, 93333, 16763, 31079, 63679, 1475, 31601, 5977, 39865, 70308, 8035, 46300, 57635, 25226, 65019, 71588, 60935, 25879, 86850, 61953, 4259, 4865, 19105, 87190, 74292, 98924, 93538, 8178, 86765, 4687, 13782, 97291, 95428, 20998, 8769, 27072, 19460, 52428, 21715, 37880, 72203, 31705, 22996, 25461, 43893, 20515, 31906, 73040, 26850, 30700, 88591, 8916, 92462, 24105, 38366, 31799, 40795, 95251, 87190, 40797, 65218, 95149, 6073, 60969, 60969, 60969, 36758, 42920, 32541, 20996, 54199, 88625, 47589, 43114, 53130, 58857, 21715, 35905, 64292, 62958, 82633, 32997, 34093, 22895, 11357, 163, 75700, 56191, 38823, 38823, 62958, 28125, 60443, 3348, 29445, 54521, 46300, 28054, 46243, 49523, 14200, 1077, 62100, 50064, 39966, 77991, 58289, 38321, 55910, 84209, 696, 78272, 63228, 77591, 70099, 5200, 50064, 77871, 26705, 69251, 85987, 33869, 74888, 81880, 72840, 18315, 54365, 77871, 615, 5937, 39966, 77991, 58289, 38321, 10387, 82999, 38230, 86837, 38230, 54389, 17263, 32080, 938, 2610, 57963, 85987, 33869, 74888, 97800, 73261, 70745, 48704, 78523, 36144, 51495, 69420, 47277, 90320, 77663, 38823, 38823, 62958, 28125, 60443, 3348, 29445, 45179, 53515, 86599, 69513, 30284, 70700, 13156, 67894, 4154, 21110, 45353, 17041, 31325, 97552, 39966, 77991, 93700, 74415, 81115, 33869, 74888, 86080, 6990, 69035, 61625, 77871, 74275, 11265, 39966, 79821, 28096, 33029, 81656, 9369, 32523, 54278, 35030, 83728, 67391, 81829, 31052, 46113, 66304, 9369, 77234, 27981, 87666, 79735, 66964, 97140, 66304, 65932, 43945, 80452, 57438, 99184, 77071, 18366, 57749, 87190, 97291, 66794, 61906, 3534, 36088, 50290, 94291, 88190, 28265, 2367, 31705, 69176, 59694, 94994, 27145, 89384, 88784, 81185, 84966, 7920, 69777, 55370, 99322, 98946, 52188, 39045, 48464, 63210, 54431, 38811, 64761, 3548, 99539, 92902, 5227, 27970, 67312, 91010, 41855, 52958, 52671, 88309, 62758, 49312, 54762, 71029, 4240, 5528, 97025, 93168, 8579, 61177, 23018, 82100, 21990, 15284, 89508, 62747, 91089, 72964, 95187, 47841, 42053, 11644, 54667, 37885, 95546, 15107, 96105, 49240, 11162, 39623, 98038, 4817, 21701, 13128, 45420, 37993, 58972, 19940, 6482, 18484, 81872, 23155, 96573, 46786, 49676, 14598, 45669, 29309, 45342, 96943, 76355, 64438, 88484, 56737, 52910, 87489, 97075, 1312, 9745, 59738, 18714, 83152, 23054, 52496, 84533, 79064, 24858, 7793, 29882, 76899, 81703, 3564, 76849, 41483, 76303, 16080, 39427, 14938, 43884, 7448, 77614, 80975, 37024, 75541, 19599, 13371, 25603, 95026, 11467, 84671, 62999, 92923]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> robot_pos_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  )))))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))))))))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'LINKS'))))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_x))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_x))  ))))))  ))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  or  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 2) (<digit> 8)))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 7) (<digit> 0)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 3) (<digit> 8)))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 4) (<digit> 9)))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 0) (<digit> 4)))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  )))))))  else  (<expr> (<action> 'LINKS'))))))))

Fitness:
2.718249995198416