Generation:
300

Phenotype:
'LINKS' if direction and hypot( 4.44 , ( hypot( ( intersect_radius * velocity_y ) , hypot( velocity_y , intersect_radius ) ) + -3.00 ) ) >= ( ( ( ( intersect_centers_x / robot_pos_y ) + robot_pos_x ) + robot_pos_y ) * ( hypot( hypot( velocity_y , intersect_centers_x ) , hypot( intersect_centers_x , velocity_x ) ) - hypot( hypot( robot_pos_y , velocity_x ) , obstacle_y ) ) ) or ( robot_pos_x - robot_pos_x ) > velocity_x and intersect_centers_x >= hypot( intersect_radius , hypot( velocity_y , intersect_radius ) ) else 'LINKS' if direction and ( ( 6.47 * ( obstacle_x - hypot( obstacle_y , robot_pos_x ) ) ) / velocity_y ) >= -2.77 or velocity_y >= obstacle_y and robot_pos_y >= ( intersect_radius * velocity_y ) or hypot( hypot( robot_pos_x , intersect_radius ) , intersect_centers_x ) < hypot( obstacle_y , velocity_x ) or not hypot( ( velocity_x + robot_pos_y ) , hypot( intersect_centers_y , ( robot_pos_x / intersect_centers_x ) ) ) >= ( obstacle_x * velocity_y ) else 'RECHTS' if ( intersect_centers_x + velocity_y ) <= ( robot_pos_y / obstacle_y ) and direction else 'RECHTS' if ( intersect_radius + hypot( obstacle_y , intersect_radius ) ) <= ( robot_pos_y / velocity_x ) and direction else 'LINKS' if velocity_x >= obstacle_x and not direction else 'RECHTS' if ( ( ( intersect_centers_x * -0.93 ) / -2.20 ) + hypot( intersect_centers_y , intersect_radius ) ) <= ( intersect_radius + velocity_x ) and direction else 'RECHTS' if ( intersect_centers_x + obstacle_y ) < ( robot_pos_y / ( obstacle_x - ( intersect_centers_x + intersect_centers_x ) ) ) and direction else 'RECHTS' if hypot( velocity_x , intersect_centers_y ) < hypot( intersect_centers_y , robot_pos_x ) and direction else 'RECHTS' if robot_pos_x <= velocity_y and direction else 'LINKS' if ( ( ( velocity_y * ( robot_pos_x + intersect_centers_x ) ) >= velocity_y ) and ( obstacle_x < obstacle_y or robot_pos_x >= hypot( robot_pos_y , robot_pos_y ) and intersect_centers_x > hypot( hypot( obstacle_y , intersect_radius ) , velocity_y ) or velocity_x >= obstacle_y and ( intersect_radius / robot_pos_y ) >= ( velocity_y / robot_pos_x ) and ( -7.77 * robot_pos_y ) >= -3.88 ) ) and ( hypot( velocity_x , velocity_y ) >= intersect_radius or robot_pos_x > hypot( robot_pos_y , intersect_centers_y ) and ( -7.12 / velocity_y ) > ( ( ( hypot( 6.84 , ( intersect_centers_x + velocity_y ) ) / hypot( ( robot_pos_x / obstacle_x ) , -3.88 ) ) + hypot( intersect_radius , robot_pos_y ) ) / ( robot_pos_y / obstacle_y ) ) or velocity_x > hypot( obstacle_y , robot_pos_y ) and not ( velocity_x > intersect_radius or not velocity_y != obstacle_x ) and ( ( intersect_radius - intersect_centers_x ) / robot_pos_y ) > ( hypot( velocity_y , velocity_y ) / robot_pos_x ) ) or direction else 'RECHTS' if not direction and intersect_centers_x >= hypot( intersect_radius , hypot( intersect_centers_y , intersect_radius ) ) else 'RECHTS' if not direction and velocity_y >= hypot( intersect_centers_y , obstacle_y ) and not robot_pos_y < intersect_centers_y or velocity_x >= velocity_y and robot_pos_x > hypot( robot_pos_y , robot_pos_y ) else 'LINKS' if direction and ( p_div( ( hypot( robot_pos_x , robot_pos_x ) / p_div( robot_pos_x , intersect_centers_x ) ) , ( ( obstacle_y - velocity_x ) * p_div( obstacle_x , robot_pos_x ) ) ) + 0.98 ) < hypot( p_div( ( p_div( intersect_centers_x , obstacle_x ) / p_div( intersect_radius , obstacle_y ) ) , ( hypot( robot_pos_x , obstacle_y ) + hypot( robot_pos_x , obstacle_x ) ) ) , hypot( hypot( ( intersect_centers_x * robot_pos_x ) , p_div( velocity_x , obstacle_x ) ) , intersect_centers_x ) ) or ( velocity_x * intersect_centers_x ) >= ( velocity_x - velocity_y ) and intersect_centers_x > hypot( intersect_radius , ( velocity_x + obstacle_y ) ) else 'RECHTS' if not direction and ( velocity_y * velocity_y ) < velocity_x or not ( not robot_pos_y > obstacle_y ) or hypot( robot_pos_y , intersect_centers_y ) <= hypot( velocity_y , velocity_y ) and ( -5.39 / ( velocity_y / velocity_x ) ) < ( hypot( obstacle_x , velocity_x ) / velocity_y ) and ( -0.83 - hypot( intersect_radius , obstacle_x ) ) < ( hypot( velocity_y , velocity_x ) / ( obstacle_x - intersect_radius ) ) or hypot( robot_pos_y , intersect_centers_y ) < ( robot_pos_x * ( intersect_radius + robot_pos_y ) ) and obstacle_x <= ( hypot( obstacle_y , velocity_x ) / velocity_y ) and intersect_centers_x >= -5.43 else 'LINKS' if direction and p_div( intersect_centers_y , -2.36 ) >= obstacle_y or 9.19 <= -8.05 and hypot( robot_pos_x , ( ( ( ( intersect_centers_y * velocity_x ) / p_div( robot_pos_x , robot_pos_x ) ) / ( 5.46 + -6.01 ) ) * ( hypot( robot_pos_y , hypot( intersect_radius , intersect_radius ) ) * hypot( p_div( intersect_radius , obstacle_x ) , intersect_radius ) ) ) ) < ( hypot( hypot( intersect_radius , p_div( ( intersect_radius / intersect_radius ) , intersect_radius ) ) , hypot( 4.44 , robot_pos_x ) ) + 3.04 ) else 'LINKS'

Genotype:
[44305, 2212, 9078, 50842, 47358, 99184, 38811, 64761, 57749, 85870, 97291, 77094, 43348, 99363, 4255, 78858, 12396, 15389, 62888, 97154, 51504, 66304, 98484, 85048, 99584, 76305, 48665, 71946, 6885, 59901, 74988, 68555, 69486, 35325, 1775, 64832, 3966, 10387, 72069, 48383, 38230, 6190, 97532, 53214, 2489, 3749, 76944, 2240, 81360, 76135, 61445, 242, 81500, 70700, 13156, 16740, 20045, 77309, 75862, 12534, 97783, 22963, 31015, 19743, 4585, 91494, 79403, 95500, 8739, 35160, 49055, 47041, 12533, 52188, 39045, 48464, 63210, 6692, 24075, 43906, 31705, 69176, 73074, 93032, 13474, 7205, 17341, 25989, 2965, 6046, 17610, 15210, 62771, 56661, 76521, 34170, 81045, 21314, 70623, 60825, 89174, 20473, 69025, 31263, 69625, 45353, 8723, 66519, 95149, 87190, 60969, 60969, 97291, 95428, 20998, 6894, 19002, 4154, 89354, 35111, 61588, 83532, 50156, 70264, 78807, 53330, 19484, 24725, 21324, 3713, 51238, 90515, 78601, 94465, 48418, 65411, 56275, 57228, 88784, 77831, 35935, 67107, 81022, 86837, 39757, 31705, 69176, 90057, 25683, 56275, 33828, 86354, 56315, 11182, 7920, 12935, 20995, 75059, 38396, 4154, 63375, 77654, 53330, 9730, 73545, 95590, 6765, 37944, 70623, 87658, 20425, 84823, 96470, 47846, 88380, 32265, 85987, 91653, 70245, 15835, 26425, 95927, 62958, 39940, 78420, 18328, 47423, 68314, 65950, 88142, 5472, 6320, 37754, 24868, 90515, 37099, 7069, 14540, 60082, 69119, 16355, 89649, 28394, 4154, 63375, 39792, 54046, 56275, 59901, 93458, 16620, 93458, 16620, 10883, 42380, 72548, 69972, 17788, 7920, 53432, 68799, 79145, 88056, 55864, 80515, 84948, 9177, 16564, 45155, 36539, 65971, 40170, 60790, 87190, 93458, 16620, 77071, 80720, 72548, 69972, 17788, 7920, 53432, 68799, 79145, 61625, 17928, 4628, 75620, 27364, 11260, 54551, 65757, 16564, 45155, 36539, 15111, 76015, 64481, 87190, 93458, 16620, 1421, 66519, 86532, 75034, 83386, 88347, 31935, 89135, 39938, 75470, 66140, 59304, 87357, 31315, 42380, 72548, 69972, 17788, 7920, 53432, 68799, 37169, 37479, 38065, 41184, 48346, 116, 62204, 21213, 15340, 87369, 76823, 11839, 72676, 56953, 70141, 99662, 12382, 36640, 90444, 4628, 63970, 98668, 11260, 54551, 65757, 16564, 45155, 53390, 46324, 76015, 64481, 87190, 93458, 16620, 10883, 42380, 72548, 69972, 17788, 7920, 53432, 68799, 79145, 88056, 55864, 80515, 44347, 17155, 16564, 45155, 36539, 46855, 36144, 51495, 69420, 47277, 21499, 43515, 85113, 72016, 12430, 43911, 87190, 93458, 16620, 10883, 42380, 72548, 61004, 59164, 32739, 22049, 4108, 91085, 4478, 1785, 33931, 38437, 35743, 15150, 78958, 33785, 90853, 87190, 93458, 16620, 77845, 88950, 72548, 69972, 17788, 7920, 12943, 71275, 53440, 28893, 61170, 591, 87190, 31315, 67973, 39782, 45400, 20637, 19556, 65459, 45400, 20637, 19556, 65459, 59464, 37022, 37566, 98422, 4154, 21110, 14163, 58930, 25684, 43285, 94588, 72016, 83680, 26487, 21314, 76125, 99870, 90680, 44151, 44151, 70940, 90412, 74337, 9944, 40230, 36525, 36505, 90225, 51853, 31705, 69176, 61509, 69777, 55370, 99322, 86354, 52188, 39045, 48464, 63210, 2555, 56661, 76521, 71730, 50670, 84630, 70623, 39863, 95975, 86620, 90480, 52886, 88380, 46734, 94355, 94355, 87130, 35295, 62438, 40610, 12749, 87470, 68905, 82390, 93333, 16763, 31079, 22470, 45353, 77871, 46300, 25946, 25496, 65019, 40025, 87081, 89923, 43440, 81079, 99879, 99405, 59929, 85076, 21214, 67107, 46067, 58277, 9387, 22910, 40710, 19664, 97034, 9631, 4505, 69471, 66583, 50238, 6808, 90680, 44151, 44151, 70940, 23556, 20451, 23446, 2563, 94185, 65453, 980, 23451, 21314, 9145, 95042, 31705, 69176, 61509, 69777, 55370, 13156, 34944, 52188, 39045, 48464, 63210, 41419, 56661, 30346, 17124, 52601, 35935, 96933, 57187, 33081, 66072, 15111, 44700, 93255, 91512, 47429, 90684, 99749, 26678, 88196, 1250, 38164, 73976, 57798, 73154, 52899, 38605, 68139, 45916, 65420, 17457, 71747, 82948, 94809, 22750, 16387, 76167, 7300, 54966, 86551, 4505, 69471, 66583, 50238, 6808, 51096, 38058, 47730, 55424, 4345, 71036, 50931, 97749, 48950, 65519, 33743, 22205, 39289, 94355, 94355, 87130, 35295, 62438, 40610, 46967, 94242, 70543, 5145, 65101, 94390, 59660, 59383, 31304, 14605, 38866, 80520, 50376, 29965, 48375, 76793, 2028, 67525, 36983, 7024, 47128, 74811, 75695, 75440, 4578, 46499, 91775, 36039, 93333, 16763, 31079, 63679, 1475, 31601, 96457, 39865, 70308, 34951, 46300, 57635, 2028, 65019, 71588, 47835, 86748, 86850, 82158, 4259, 4865, 19105, 99682, 74292, 98924, 93538, 8178, 57438, 99184, 17674, 61651, 40797, 76744, 5977, 56345, 49052, 51924, 56661, 76521, 34170, 81045, 21314, 70623, 60825, 89174, 20473, 69025, 66511, 69625, 45353, 39753, 75812, 57749, 70251, 97291, 66794, 8091, 69176, 20451, 62438, 40610, 75624, 21314, 70543, 49275, 7192, 78165, 98005, 54256, 28458, 62621, 1335, 8270, 11659, 20425, 43390, 31705, 69176, 59694, 94994, 27145, 56588, 88784, 81185, 84966, 7920, 69777, 55370, 45934, 98946, 52188, 39045, 78578, 63210, 54431, 8723, 55743, 57749, 87190, 97291, 5450, 80104, 64593, 61564, 27679, 80162, 12294, 12448, 86935, 79891, 26540, 46339, 48199, 29992, 18845, 97612, 25615, 45513, 6039, 7439, 75545, 66946, 47437, 70370, 97547, 41530, 2177, 43795, 3657, 65025, 87928, 90444, 23566, 43277, 82404, 6190, 69549, 9998, 85987, 16648, 38072, 28254, 63987, 12205, 62001, 80675, 5421, 65951, 35952, 12560, 36524, 59595, 33646, 41699, 32443, 78605, 17836, 86310, 91246, 66732, 35183, 95220, 36484, 43295, 62157, 87998, 60738, 43344, 60825, 69660, 17742, 8750, 934, 85547, 16580, 73967, 82880, 99345, 16835, 68787, 31705, 69176, 50406, 46069, 43359, 61200, 41585, 7162, 89815, 23616, 50900, 50494, 96700, 94514, 5837, 51860, 53664, 56661, 76521, 34170, 81045, 2028, 70623, 75945, 37703, 69899, 64150, 86801, 82016, 90135, 67396, 40797, 76744, 95149, 6073, 60969, 60969, 60969, 36758, 42920, 32541, 20996, 54199, 88625, 47589, 17526, 53130, 58857, 21715, 35905, 64292, 62958, 82633, 2624, 38218, 78116, 35389, 75129, 41489, 19455, 75428, 85272, 98410, 54454, 38823, 38823, 62958, 28125, 60443, 3348, 29445, 54521, 46300, 28054, 78615, 49523, 14200, 1077, 62100, 50064, 39966, 77991, 58289, 89281, 63240, 97829, 18345, 55523, 27779, 77591, 70099, 5200, 50064, 11687, 26705, 69251, 28537, 33869, 74888, 81880, 57108, 18315, 54365, 77871, 615, 5937, 39966, 77991, 58289, 38321, 10387, 70141, 38230, 10808, 97233, 54389, 17263, 32080, 938, 2610, 29937, 85987, 33869, 74888, 17355, 19005, 70745, 48704, 68883, 36144, 51495, 69420, 47277, 90320, 77663, 38823, 38823, 62958, 28125, 60443, 3348, 29445, 45179, 53515, 86599, 38437, 30284, 70700, 13156, 22226, 4154, 21110, 45353, 1516, 48185, 30149, 39966, 77991, 93700, 74415, 9177, 33869, 74888, 80515, 44347, 69035, 96890, 77871, 74275, 11265, 39966, 79821, 70030, 99495, 89504, 91946, 63240, 20421, 18345, 66304, 47773, 57438, 99184, 77071, 66519, 57749, 87190, 97291, 66794, 20998, 6894, 67638, 24552, 14325, 82621, 75846, 50358, 72473, 54192, 43883, 66966, 60236, 66440, 19300, 31705, 69176, 89019, 55327, 91201, 26291, 79012, 37379, 98841, 19449, 35871, 22186, 21243, 56847, 88598, 77720, 53505, 7920, 59604, 25943, 44410, 92887, 73164, 1694, 24539, 23679, 98100, 41419, 59898, 9275, 53771, 65411, 29712, 65385, 31021, 3200, 51721, 37019, 49759, 74691, 38687, 49918, 25235, 65434, 85966, 64832, 34211, 63958, 21213, 83456, 9150, 40381, 70494, 80484, 41588, 23045, 37358, 9143, 58835, 94421, 58775, 34877, 35934, 49693, 61167, 31825, 73253, 52230, 35175, 21645, 85637, 78745, 97644, 80778, 70623, 60825, 89174, 70117, 48154, 74090, 72641, 65499, 6995, 9317, 24110, 5312, 32723, 4696, 15389, 44780, 97154, 51504, 66304, 83515, 81727, 52600, 90516, 70009, 43770, 66583, 21390, 71674, 8723, 67637, 3548, 99539, 92902, 5227, 27970, 67312, 91010, 41855, 52958, 52671, 88309, 62758, 49312, 54762, 71029, 4240, 5528, 97025, 93168, 8579, 61177, 23018, 82100, 21990, 15284, 89508, 62747, 91089, 72964, 95187, 47841, 42053, 11644, 54667, 37885, 95546, 15107, 96105, 49240, 11162, 39623, 98038, 4817, 21701, 13128, 45420, 37993, 58972, 19940, 6482, 18484, 81872, 23155, 96573, 46786, 49676, 14598, 45669, 29309, 45342, 96943, 76355, 64438, 88484, 56737, 52910, 87489, 97075, 1312, 9745, 59738, 18714, 83152, 23054, 52496, 84533, 79064, 24858, 7793, 29882, 76899, 81703, 3564, 76849, 41483, 76303, 16080, 39427, 14938, 43884, 7448, 77614, 80975, 37024, 75541, 19599, 13371, 25603, 95026, 11467, 84671, 62999, 92923]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 4) (<digit> 4)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 0) (<digit> 0)))  ))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> robot_pos_x))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> robot_pos_x))  ))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  )))))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 4) (<digit> 7)))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 7) (<digit> 7)))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> /)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> obstacle_y))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  and  (<boolean_feature> not direction))  else  (<expr> (<action> 'RECHTS'))))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 9) (<digit> 3)))  ))   (<math_op> /)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 2) (<digit> 0)))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_y))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'LINKS'))))))))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_x))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 7) (<digit> 7)))   (<math_op> *)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 8) (<digit> 8)))))))  ))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 1) (<digit> 2)))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 8) (<digit> 4)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<math_op> /)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> /)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 8) (<digit> 8)))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  ))  ))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  )))))  and  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> obstacle_x)))))))  ))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> robot_pos_x))  ))))))  ))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  )))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> robot_pos_y))  )))))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))   (<math_op> /)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 8)))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> /)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> robot_pos_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  )))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 9)))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 8) (<digit> 3)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> robot_pos_x))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> robot_pos_y))  ))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 4) (<digit> 3))))))))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 3) (<digit> 6)))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 1) (<digit> 9)))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 0) (<digit> 5))))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> /)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> robot_pos_x))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ))   (<math_op> /)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 4) (<digit> 6)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 0) (<digit> 1)))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> robot_pos_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> /)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 4) (<digit> 4)))  ,  (<arith_expr> (<numeric_feature> robot_pos_x))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 4)))  )))))))  else  (<expr> (<action> 'LINKS'))))))))

Fitness:
-1.115335130454296