Generation:
50

Phenotype:
'LINKS' if direction and ( not ( velocity_y != velocity_y and not obstacle_y < obstacle_y and not p_div( velocity_y , intersect_radius ) < ( obstacle_x * intersect_centers_x ) and not not obstacle_y <= ( obstacle_x - intersect_radius ) and ( intersect_centers_y != velocity_x or obstacle_y <= velocity_y and p_div( velocity_y , intersect_centers_x ) <= hypot( intersect_radius , obstacle_y ) ) ) and ( ( velocity_y <= intersect_centers_y and p_div( intersect_centers_y , obstacle_x ) >= hypot( velocity_x , intersect_radius ) or intersect_radius == obstacle_y and hypot( intersect_centers_x , intersect_centers_y ) < ( obstacle_x * intersect_centers_x ) and p_div( p_div( velocity_y , velocity_y ) , p_div( velocity_x , velocity_x ) ) <= -6.70 ) or ( not not intersect_radius > obstacle_y or p_div( obstacle_y , obstacle_y ) != 4.45 ) ) ) or not ( ( ( obstacle_x + intersect_radius ) < ( ( ( intersect_radius * hypot( hypot( intersect_centers_x , velocity_x ) , hypot( intersect_radius , obstacle_y ) ) ) - ( p_div( -9.23 , -3.20 ) * velocity_x ) ) - ( obstacle_y * hypot( p_div( hypot( obstacle_x , obstacle_y ) , p_div( intersect_radius , velocity_x ) ) , 9.64 ) ) ) or not ( 4.97 * ( p_div( 5.43 , p_div( obstacle_x , hypot( obstacle_y , obstacle_y ) ) ) * ( -4.30 - hypot( intersect_centers_x , ( intersect_centers_y - intersect_centers_y ) ) ) ) ) != hypot( hypot( velocity_x , p_div( -0.76 , velocity_y ) ) , ( ( ( hypot( obstacle_y , velocity_y ) * hypot( intersect_centers_y , obstacle_x ) ) - 2.75 ) * p_div( hypot( p_div( velocity_x , intersect_centers_y ) , intersect_centers_x ) , velocity_y ) ) ) ) ) or hypot( ( velocity_x - p_div( ( p_div( hypot( -9.22 , ( p_div( p_div( p_div( velocity_x , ( obstacle_y * 8.72 ) ) , 4.71 ) , p_div( velocity_x , p_div( hypot( velocity_x , ( velocity_y + intersect_centers_y ) ) , velocity_x ) ) ) - -4.07 ) ) , 0.54 ) - velocity_y ) , hypot( intersect_radius , ( hypot( p_div( ( hypot( ( -3.45 * 7.89 ) , hypot( 7.21 , 9.34 ) ) + velocity_y ) , hypot( obstacle_x , 5.87 ) ) , p_div( intersect_radius , -8.39 ) ) + ( ( ( p_div( hypot( hypot( intersect_radius , velocity_y ) , 0.98 ) , ( intersect_centers_y * obstacle_y ) ) + intersect_centers_x ) + ( intersect_centers_y + hypot( hypot( ( p_div( velocity_y , obstacle_y ) * p_div( intersect_centers_x , intersect_radius ) ) , hypot( intersect_radius , -4.15 ) ) , hypot( ( p_div( p_div( intersect_radius , velocity_x ) , hypot( velocity_y , intersect_radius ) ) * intersect_centers_x ) , p_div( p_div( p_div( velocity_y , velocity_y ) , intersect_centers_x ) , ( ( obstacle_x - velocity_y ) * p_div( obstacle_y , velocity_x ) ) ) ) ) ) ) * intersect_radius ) ) ) ) ) , p_div( ( -7.04 - hypot( 4.23 , -6.69 ) ) , 7.65 ) ) <= hypot( velocity_x , hypot( intersect_centers_x , hypot( 0.98 , hypot( 3.20 , velocity_x ) ) ) ) and not p_div( obstacle_y , p_div( obstacle_x , intersect_centers_y ) ) <= velocity_y and ( ( hypot( intersect_centers_x , obstacle_y ) >= ( intersect_centers_x * velocity_x ) and not not obstacle_x > velocity_y and ( velocity_y < intersect_radius ) and not ( intersect_centers_y >= intersect_centers_y ) or ( p_div( ( intersect_radius * obstacle_y ) , ( velocity_x * velocity_y ) ) <= obstacle_x ) or p_div( ( velocity_x + intersect_centers_x ) , ( intersect_centers_x + obstacle_x ) ) < 9.20 and p_div( ( ( velocity_x + intersect_centers_x ) - hypot( velocity_y , intersect_centers_y ) ) , hypot( -5.83 , ( intersect_centers_x + intersect_radius ) ) ) <= -8.08 and ( hypot( p_div( hypot( velocity_y , intersect_centers_x ) , ( obstacle_y * intersect_centers_x ) ) , ( ( intersect_radius + intersect_centers_x ) * hypot( obstacle_y , velocity_y ) ) ) + hypot( hypot( p_div( obstacle_y , intersect_centers_y ) , p_div( obstacle_y , velocity_x ) ) , p_div( obstacle_y , p_div( obstacle_y , intersect_centers_y ) ) ) ) > hypot( ( ( p_div( intersect_radius , intersect_centers_y ) - ( obstacle_y + intersect_radius ) ) * intersect_centers_x ) , p_div( ( ( obstacle_x - intersect_centers_x ) - hypot( obstacle_y , obstacle_y ) ) , hypot( 6.91 , ( obstacle_y + velocity_y ) ) ) ) and ( not not intersect_centers_y == intersect_radius ) and ( ( intersect_centers_y != velocity_x ) ) ) and obstacle_x > velocity_x and ( velocity_y <= hypot( -7.90 , p_div( hypot( p_div( 8.11 , intersect_radius ) , hypot( p_div( 8.11 , intersect_radius ) , obstacle_x ) ) , p_div( -2.11 , ( p_div( hypot( hypot( obstacle_x , intersect_radius ) , ( velocity_y - intersect_radius ) ) , hypot( hypot( obstacle_y , obstacle_y ) , p_div( intersect_radius , obstacle_y ) ) ) - p_div( p_div( ( intersect_centers_x * obstacle_x ) , 8.18 ) , intersect_radius ) ) ) ) ) and not not ( hypot( ( hypot( 6.83 , 9.55 ) + hypot( ( intersect_centers_y * intersect_centers_y ) , velocity_y ) ) , p_div( intersect_centers_x , p_div( obstacle_y , 3.50 ) ) ) * ( intersect_centers_y + ( p_div( ( obstacle_y - intersect_radius ) , -2.37 ) - p_div( obstacle_x , p_div( velocity_y , intersect_centers_x ) ) ) ) ) <= ( p_div( p_div( p_div( hypot( p_div( intersect_centers_y , intersect_radius ) , hypot( intersect_radius , velocity_x ) ) , p_div( -8.59 , velocity_y ) ) , p_div( obstacle_y , hypot( p_div( velocity_x , intersect_radius ) , p_div( obstacle_y , obstacle_x ) ) ) ) , ( ( p_div( hypot( intersect_centers_y , intersect_radius ) , -4.45 ) + ( ( intersect_centers_x - velocity_x ) + obstacle_y ) ) + hypot( 9.98 , ( hypot( velocity_x , intersect_radius ) + intersect_centers_y ) ) ) ) * hypot( ( hypot( p_div( p_div( obstacle_y , velocity_y ) , velocity_y ) , intersect_centers_y ) * intersect_centers_x ) , p_div( intersect_centers_x , 7.72 ) ) ) or not not not not not ( velocity_y <= obstacle_y ) and p_div( obstacle_y , obstacle_y ) != 4.45 ) ) else 'RECHTS'

Genotype:
[64962, 89248, 49881, 5431, 1208, 34886, 31877, 53651, 27014, 99936, 79715, 93206, 34195, 62632, 30088, 41651, 61182, 83223, 83067, 83761, 919, 23140, 29919, 97858, 80215, 73954, 81665, 90245, 6474, 11818, 92901, 42646, 8220, 66462, 24817, 74605, 5247, 30904, 82785, 22099, 54822, 54685, 88052, 66570, 74748, 68911, 93534, 79460, 30159, 80465, 9305, 86079, 54832, 13456, 50421, 58089, 71490, 84340, 46425, 18679, 34445, 70584, 74560, 88380, 67965, 85070, 17837, 62932, 36352, 36216, 61671, 63605, 17179, 98027, 86360, 28516, 86347, 44494, 20664, 88226, 480, 9881, 31959, 36050, 20047, 68943, 4430, 70952, 23645, 50280, 62520, 59780, 46425, 19418, 23505, 69085, 42510, 36229, 60800, 62783, 46472, 79424, 54620, 47449, 87446, 71165, 65522, 72456, 67035, 69760, 50581, 19053, 34480, 8296, 32577, 83488, 28917, 84380, 75692, 91495, 4840, 89078, 78793, 23445, 69473, 79375, 62799, 1849, 67721, 34526, 50670, 2329, 63255, 41981, 95110, 18445, 28046, 82785, 22099, 53853, 88430, 91952, 7435, 68251, 68911, 93534, 79460, 30159, 80465, 9305, 86079, 3960, 77246, 50307, 69027, 26625, 72764, 52890, 20866, 54117, 29790, 13746, 68550, 42964, 7107, 17566, 26200, 83573, 76996, 54317, 34520, 15540, 16124, 88813, 91608, 58282, 72187, 24310, 30981, 25759, 45120, 74251, 18924, 64005, 32568, 42634, 30459, 55293, 1002, 8190, 30069, 63950, 72664, 27203, 98566, 24537, 47954, 54654, 47914, 52555, 76742, 55855, 57311, 41596, 10036, 94796, 74961, 87744, 30188, 9351, 15919, 92184, 87960, 35689, 21114, 36345, 84352, 8047, 99159, 53754, 3369, 74020, 47700, 91067, 78343, 67508, 20895, 97776, 63150, 22398, 45218, 96745, 21541, 77085, 17693, 50464, 81474, 53997, 67666, 87031, 74511, 1089, 98132, 46563, 9901, 74152, 41211, 33213, 18352, 19790, 62183, 10740, 2294, 61546, 34514, 79670, 11071, 28415, 59978, 27397, 80443, 56715, 29389, 865, 34262, 73912, 64720, 6085, 21755, 22538, 23246, 79469, 84306, 65949, 78806, 5774, 78122, 64099, 9039, 75906, 73514, 39166, 37639, 25568, 14334, 56319, 86857, 16946, 71879, 65347, 15621, 9606, 21744, 34585, 74014, 59253, 21432, 52375, 34898, 78093, 82455, 31105, 36045, 40359, 73256, 14784, 6286, 18126, 17845, 23894, 43503, 24490, 73927, 32603, 85505, 73731, 78699, 81480, 30339, 27877, 29685, 62252, 19565, 5123, 94363, 22760, 15685, 46497, 2326, 69608, 54925, 38050, 74377, 34896, 22670, 87863, 86764, 84034, 9374, 47543, 52795, 17224, 57595, 86449, 34889, 71573, 27225, 44500, 86355, 20198, 8752, 82386, 8612, 78856, 77062, 90997, 66995, 97550, 19757, 49853, 31907, 58605, 46478, 56960, 52095, 60810, 12334, 3670, 50098, 49859, 93281, 42030, 83568, 35222, 6303, 18014, 46445, 76347, 79954, 42332, 42589, 24622, 78193, 17141, 63032, 47689, 18899, 64332, 83942, 4954, 72162, 84442, 59497, 49520, 64265, 46244, 2140, 6066, 84173, 5986, 46515, 69398, 68598, 69177, 49942, 43296, 25912, 97274, 98914, 43507, 43601, 35347, 655, 52568, 81597, 60988, 79160, 73547, 22194, 32805, 18605, 24417, 27085, 8219, 31955, 76270, 38770, 46531, 92406, 40169, 35944, 72710, 19887, 93681, 29651, 65574, 50630, 2755, 20654, 7855, 31005, 61599, 69198, 85440, 33000, 79659, 48568, 76012, 4854, 15293, 27094, 10166, 35462, 11517, 82273, 50554, 38085, 2603, 15141, 38321, 46370, 15297, 89938, 56259, 69788, 1006, 87680, 55338, 65637, 77662, 80101, 39066, 47444, 47534, 92509, 59603, 57524, 28185, 91755, 4080, 41593, 41045, 32413, 44621, 25784, 3994, 68785, 678, 19287, 56062, 68640, 47784, 64966, 74292, 58845, 84178, 18933, 20709, 56025, 71939, 77299, 45049, 41207, 70838, 14533, 70650, 91121, 78575, 92385, 67736, 73262, 92658, 40150, 11939, 60938, 37149, 15885, 23640, 38840, 38265, 21823, 64884, 75025, 82068, 96519, 13684, 36250, 9535, 74124, 38883, 53283, 86029, 57667, 77385, 76544, 51215, 14074, 18659, 32032, 37765, 57631, 34670, 53979, 7858, 67305, 30375, 67151, 23632, 27959, 57764, 26081, 5725, 63343, 84724, 17, 11962, 48160, 21569, 11405, 60730, 21488, 86710, 36875, 58375, 67664, 8612, 76465, 54796, 28402, 86707, 15227, 47200, 41894, 30660, 40704, 70330, 1750, 2054, 80769, 61910, 91360, 92974, 90505, 26382, 69098, 19057, 94940, 7543, 84415, 13641, 3902, 9455, 55743, 56077, 55964, 84516, 7516, 20367, 99867, 64280, 84834, 6862, 74113, 50856, 10090, 49748, 24034, 14672, 7213, 92941, 27583, 73529, 63316, 31566, 95389, 3901, 18864, 80810, 25707, 46686, 55265, 42483, 5778, 40990, 63201, 58433, 66830, 64295, 29288, 68011, 79204, 24376, 35810, 59509, 49838, 27173, 65086, 56041, 94436, 59253, 54392, 76280, 78375, 39667, 13123, 90027, 85243, 27537, 19305, 38378, 31292, 64165, 92655, 48715, 88439, 70305, 64490, 67997, 71564, 36298, 25229, 603, 96964, 46955, 82601, 96651, 86022, 70989, 69203, 16801, 48276, 98520, 34969, 57748, 60405, 37128, 66950, 44209, 35120, 28649, 94785, 98917, 8675, 67725, 25317, 46258, 89629, 38475, 85202, 13990, 81539, 48084, 96170, 19977, 78281, 87644, 68410, 12531, 94966, 96785, 38450, 61495, 36025, 81349, 45967, 64133, 13320, 46398, 27690, 85452, 72080, 99975, 34172, 81350, 68720, 87102, 74453, 36914, 9000, 29436, 34313, 45022, 85909, 25620, 7037, 90866, 54400, 54548, 21794, 27830, 66813, 59819, 85875, 39164, 48129, 5005, 77402, 65795, 47769, 18479, 42175, 31136, 97668, 61340, 86202, 20414, 52560, 89906, 96258, 51475, 4025, 17524, 68705, 89537, 59334, 67180, 72894, 79123, 25726, 8579, 32658, 32919, 17702, 88090, 50823, 53541, 44172, 95809, 53079, 13140, 86679, 9555, 90890, 89516, 14599, 54843, 96395, 91461, 4295, 84988, 46603, 86456, 89470, 73795, 73195, 62088, 9153, 36264, 35890, 51051, 71106, 12125, 74461, 66663, 64946, 49993, 87935, 53348, 8480, 40498, 96567, 67978, 22124, 31178, 22977, 14923, 28070, 22336, 18275, 24220, 88064, 71235, 13409, 47084, 80185, 50127, 76674, 61434, 2960, 84009, 34803, 76965, 11669, 63953, 36823, 72270, 8250, 2110, 71511, 9045, 47893, 92968, 32017, 45390, 84550, 99660, 95523, 1162, 53530, 13493, 69915, 13270, 42007, 1105, 67729, 11917, 31790, 65797, 73615, 17088, 3972, 81243, 29784, 67269, 14152, 72515, 44711, 19355, 39733, 68545, 17124, 7385, 32638, 95835, 18725, 19182, 14822, 41605, 33110, 95097, 45489, 52699, 99630, 40484, 15028, 82035, 54138, 84988, 91928, 20635, 70032, 47770, 85005, 10718, 54751, 34850, 29466, 73116, 28709, 65731, 19834, 52875, 10392, 25356, 24195, 18661, 36602, 96332, 98912, 12088, 43075, 98112, 26894, 69810, 18110, 62518, 33940, 6722, 14360, 80388, 52172, 66599, 82592, 63210, 29934, 51836, 77465, 49351, 55577, 90035, 56558, 40197, 35766, 98420, 45671, 40674, 96410, 58161, 91367, 92073, 43930, 5787, 9758, 49146, 26405, 17415, 15826, 99561, 28453, 62686, 1793, 61349, 79647, 61179, 29670, 99892, 76978, 89862, 65391, 55065, 69396, 12988, 161, 82601, 4775, 4412, 76978, 89862, 65391, 55065, 69396, 12988, 161, 82601, 4775, 4412, 50500, 82043, 21567, 81071, 49512, 23853, 33722, 97401, 551, 78524, 30727, 74923, 33253, 80280, 43914, 31205, 49919, 10209, 54230, 61641, 51475, 31590, 83162, 83383, 26898, 86605, 221, 41215, 54646, 292, 75970, 2039, 91680, 4071, 7900, 33952, 2437, 96964, 44760, 69307, 63644, 82460, 24832, 92086, 11520, 75200, 62108, 20091, 77198, 58505, 87579, 96865, 88486, 49893, 38765, 34949, 79318, 90134, 21913, 75806, 69717, 678, 70036, 64478, 7013, 82611, 49940, 86264, 83609, 44575, 64355, 67119, 6228, 89879, 85900, 81061, 69098, 82330, 41875, 6095, 38324, 20572, 30840, 36365, 80852, 5200, 69416, 93531, 45993, 60146, 98583, 73075, 37010, 67520, 90214, 61610, 67824, 34464, 16814, 11807, 65174, 75325, 18715, 99985, 47045, 70219, 79611, 59758, 57133, 74132, 61853, 14327, 7204, 5832, 65935, 23348, 81827, 44940, 69418, 25500, 20125, 62463, 91549, 51762, 75857, 30967, 2168, 60282, 83880, 24431, 66390, 51060, 16433, 33090, 47980, 31300, 8335, 59997, 75606, 80137, 52335, 68508, 45005, 37559, 81455, 20677, 7897, 54530, 75863, 80218, 40232, 27670, 29825, 46085, 86907, 60812, 98040, 55479, 12285, 6331, 24129, 82114, 58377, 90983, 90505, 28169, 78305, 96637, 12106, 16840, 11517, 28894, 3834, 62975, 46719, 27029, 58454, 28140, 30926, 82690, 76935, 29146, 31779, 47995, 29936, 12699, 55628, 42971, 849, 3110, 21059, 74059, 99158, 97179, 58343, 1210, 39114, 36780, 43661, 13374, 70060, 63169, 71504, 75573, 29794, 19913, 88692, 38722, 63740, 49158, 53695, 32997, 97895, 30351, 63075, 36821, 3902, 12015, 25949, 61642, 14760, 83692, 92041, 41037, 77846, 15907, 85637, 28052, 94231, 7482, 79927, 79651, 33178, 44194, 54997, 95282, 12262, 31758, 45081, 51775, 60965, 86771, 70305, 53135, 60883, 71511, 55293, 1002, 8190, 30069, 63950, 72664, 27203, 98566, 24537, 47954, 54654, 47914, 52555, 22961, 17914, 29843, 87534, 81762, 22669, 94962, 69460, 11941, 89657, 7739, 19799, 41109, 41403, 53630, 23783, 33383, 81605, 65454, 5448, 41201, 99300, 16115, 59935, 60539, 65507, 32389, 90287, 51734, 85947, 19562, 99993, 12593, 33247, 43024, 68654, 38213, 4527, 90237, 41720, 72458, 51547, 91654, 73591, 55176, 73242, 15526, 6414, 71997, 6900, 87034, 37041, 11706, 24209, 96268, 32119, 77093, 84526, 8915, 96040, 97888, 23310, 5598, 62684, 79084, 8390, 57383, 52455, 80094, 29183, 54227, 10489, 17230, 62234, 82702, 5744, 40845, 54572, 49775, 59202, 19367, 21357, 51576, 92356, 97144, 4800, 53482, 90975, 94439, 99126, 5694, 49302, 42037, 82249, 56180, 18539, 20567, 21192, 2313, 33280, 93016, 45593, 99909, 86253, 84142, 51894, 55059, 23032, 21980, 84225, 86380, 9503, 36231, 39745, 93908, 11077, 82118, 34219, 96877, 53859, 96430, 92070, 46530, 27857, 49568, 41886, 58344, 14331, 6053, 30478, 98503, 28500, 40528, 49089, 5761, 83136, 8458, 92715, 55685, 81591, 79931, 83262, 3170, 53280, 24766, 40506, 127, 30886, 92873, 89710, 47151, 56344, 37839, 88555, 61733, 15312, 74511, 3317, 67869, 20113, 62739, 94677, 55445, 57529, 66728, 55889, 84584, 10332, 87364, 4649, 45124, 41711, 81172, 62617, 35365, 94507, 73682, 17119, 40075, 41065, 51778, 13426, 47112, 98272, 70806, 88170, 85525, 43001, 89154, 2469, 56727, 35898, 87156, 60392, 18935, 11306, 5874, 76096, 31970, 29694, 40606, 45087, 3448, 18183, 54631, 52936, 71811, 21186, 74507, 27879, 76612, 62823, 74394, 13970, 66566, 45158, 72580, 73208, 75047, 82259, 42594, 35462, 14105, 38914, 37144, 24250, 18477, 89929, 88073, 6962, 48888, 61014, 96673, 62869, 88568, 14154, 9980, 36509, 31663, 69779, 53200, 13902, 89530, 39768, 92077, 4951, 36672, 4345, 80991, 60426, 13115, 48123, 86154, 4163, 57108, 91878, 22972, 7700, 13513, 38804, 31108, 18573, 37416, 96715, 15835, 2601, 91050, 52292, 82408, 51407, 78206, 28114, 77154, 89645, 27974, 54829, 61003, 15423, 62871, 63102, 11197, 82000, 25614, 23629, 9768, 64505, 89008, 44476, 4111, 40906, 94568, 91175, 4705, 38681, 53316, 99394, 17240, 17685, 60067, 99571, 34703, 49916, 55594, 90281, 57049, 35092, 72594, 78089, 92238, 49064, 52110, 58008, 86118, 26487, 9441, 15893, 455, 44993, 84979, 3606, 11724, 95308, 73134, 70531, 96523, 83872, 48622, 34660, 24581, 39190, 51724, 49768, 26708, 96049, 38198, 37493, 37639, 69487, 97345, 97218, 4113, 7215, 79599, 59687, 83085, 43860, 22082, 48719, 31200, 23739, 33195, 54544, 14741, 40508, 7385, 6430, 65371, 71565, 17964, 96580, 49732, 79278, 99864, 90830, 31473, 66549, 47516, 20082, 9065, 23668, 75206, 17882, 8117, 80616, 7879, 95432, 40739, 6755, 84785, 9023, 24453, 44061, 97727, 76103, 45671, 28075, 93355, 9987, 57270, 74218, 52054, 50200, 18256, 56002, 21693, 92288, 14816, 19488, 61381, 71118, 596, 26589, 6202, 75368, 54552, 17766, 15538, 7272, 63520, 53220, 79882, 54011, 69259, 7847, 34242, 71151, 57649, 79877, 65056, 23849, 4634, 23214, 99188, 95425, 17146, 48082, 75184, 48157, 80850, 27541, 81710, 96665, 48574, 77999, 27310, 17336, 93395, 27000, 51014, 36686, 98309, 57789, 70719, 9771, 96345, 42187, 8772, 64837, 79183, 70215, 32356, 76091, 10540, 66422, 85141, 14017, 85611, 63265, 94794, 98760, 62063, 50658, 63853, 21654, 80476, 46634, 69769, 93851, 3621, 61287, 76186, 21264, 21633, 61927, 1936, 44224, 27670, 99013, 34785, 45695, 66396, 45457, 73398, 36475, 17902, 32961, 88875, 34083, 68528, 78373, 3246, 93249, 77877, 86964, 66391, 42543, 10461, 66353, 38926, 36778, 66410, 92708, 12471, 82524, 27893, 89260, 22417, 35765, 16632, 81610, 5863, 80177, 6566, 1517, 5064, 83052, 5311, 99695, 66945, 8169, 11588, 35296, 52006, 30432, 26207, 48737, 65755, 96368, 8068, 86413, 97669, 43456, 50390, 57525, 28274, 85163, 23933, 48271, 2481, 31185, 69027, 98110, 27945, 79151, 72616, 99272, 42951, 12648, 1024, 73594, 4274, 56634, 28915, 76114, 9138, 43419, 33486, 59811, 55432, 32992, 3220, 48365, 90958, 42663, 47316, 30201, 9843, 20974, 75293, 46359, 76544, 96792, 61479, 62662, 56880, 60861, 89602, 28680, 71415, 83301, 16618, 25503, 72485, 49462, 93225, 25330, 26807, 79599, 92214, 19496, 61647, 85377, 91439, 68588, 64580, 68006, 48218, 83270, 99461, 20170, 48216, 59034, 34211, 80953, 98546, 18588, 49534, 28519, 57613, 96117, 4141, 96731, 70058, 300, 61746, 43799, 28833, 74915, 27943, 37032, 58915, 54789, 33198, 55749, 32790, 92447, 37898, 61769, 46019, 49028, 10816, 42420, 16997, 39875, 2413, 38102, 68282, 19582, 37480, 5327, 10072, 76053, 15056, 660, 83231, 20282, 17044, 31813, 88498, 92224, 42674, 26137, 68909, 67419, 85212, 49821, 21074, 26085, 57486, 38987, 44526, 97206, 68286, 20816, 44986, 72014, 43419, 58385, 79255, 23975, 17261, 34786, 38786, 34559, 56764, 2918, 79409, 27667, 64879, 7146, 11562, 57481, 92944, 42098, 94864, 78714, 66449, 71818, 1600, 78613, 12332, 65608, 68358, 34482, 66359, 38693, 59064, 38560, 27939, 54210, 78609, 10562, 7249, 21245, 16969, 21759, 89182, 53459, 75775, 24660, 45787, 22059, 56332, 12396, 23586, 8933, 65906, 7741, 76134, 74387, 44492, 67198, 16446, 17591, 60049, 98152, 3354, 9750, 22598, 47039, 97396, 68101, 83493, 25182, 10308, 48833, 54268, 76834, 39532, 9448, 14083, 59715, 45784, 61642, 19033, 70310, 31244, 92151, 55662, 52717, 14066, 33982, 7906, 40648, 81434, 11389, 58514, 13271, 19788, 41804, 49994, 76636, 17947, 16054, 50307, 79278, 6119, 7756, 28256, 90399, 85112, 37110, 23749, 29311, 41855, 40468, 58999, 60809, 37887, 54327, 54460, 76385, 48100, 68845, 77717, 52563, 10774, 48850, 24304, 23437, 20179, 83501, 65771, 99150, 47116, 42668, 39052, 77319, 91035, 14528, 65685, 73051, 56214, 91390, 62402, 44085, 51198, 57620, 82073, 62098, 26637, 54233, 97042, 27702, 447, 85884, 71680, 46105, 40831, 4491, 98878, 67584, 11089, 67815, 7174, 6742, 75067, 27043, 6639, 38255, 8208, 38073, 25034, 2297, 27456, 41031, 43041, 4013, 34416, 16644, 27987, 84559, 92831, 88822, 38393, 15969, 4210, 33612, 31577, 81880, 8840, 52110, 64789, 56190, 3438, 69671, 88697, 54014, 34513, 17933, 66713, 8739, 81978, 53272, 36757, 98617, 65910, 24735, 95807, 54543, 70942, 57690, 73014, 40014, 49828, 71256, 7414, 45711, 52590, 28762, 7175, 6580, 54676, 63401, 4633, 90933, 7725, 71706, 54968, 77121, 32596, 72919, 50958, 73731, 77898, 51080, 49888, 94408, 32884, 13956, 16748, 18249, 3067, 47236, 88524, 86581, 49872, 10424, 86084, 96496, 21356, 16156, 2535, 49228, 37432, 99236, 84124, 69722, 32245, 31823, 57431, 31169, 89422, 94328, 14354, 41747, 94571, 89471, 85794, 5521, 63586, 72214, 12869, 79750, 61743, 69416, 38462, 15533, 57590, 66916, 38250, 27232, 9545, 81764, 44696, 26523, 87111, 61306, 98221, 69637, 92923, 2040, 8428, 88515, 70099, 74405, 50828, 80939, 60015, 2121, 39154, 38850, 32648, 43081, 78252, 48614, 52506, 6988, 30826, 46511, 82305, 21184, 82871, 63753, 70814, 38417, 78275, 42400, 31197, 99018, 805, 10725, 41566, 45767, 61133, 46709, 98684, 82211, 21568, 94024, 6654, 96585, 77279, 34922, 91523, 36897, 67507, 46540, 28332, 29901, 17580, 57417, 95845, 79191, 5943, 39061, 77290, 74169, 97851, 42186, 79209, 24795, 28888, 541, 56319, 70114, 90336, 99358, 83759, 56759, 55599, 64918, 29422, 76626, 8588, 864, 52105, 51841, 73998, 92714, 3967, 41216, 74628, 65032, 28763, 64727, 85141, 28800, 89356, 1228, 90562, 67783, 19231, 50173, 92239, 69805, 53032, 65385, 99554, 11010, 56502, 91765, 89575, 80834, 39990, 91499, 95685, 74987, 12214, 2362, 668, 70866, 52732, 87119, 12055, 50627, 10330, 31744, 44664, 99751, 37309, 84675, 61117, 32169, 59040, 24545, 35589, 45522, 35619, 21616, 79426, 56714, 99354, 10899, 53607, 23968, 63619, 35055, 84068, 29235, 36329, 50111, 83567, 48951, 70997, 81854, 83992, 44482, 64102, 10980, 80700, 69303, 26516, 61361, 20772, 1120, 17947, 70095, 17983, 54156, 70591, 12836, 3668, 69867, 98312, 38051, 50402, 19012, 52589, 6305, 35055, 29023, 40362, 21696, 11699, 17486, 67597, 41249, 64212, 7605, 36614, 29735, 20783, 35945, 68833, 60829, 95135, 74211, 10341, 9156, 83000, 71508, 75792, 65452, 54002, 32002, 81567, 67597, 47486, 28521, 16860, 54385, 89334, 65830, 54788, 69207, 29758, 9485, 205, 9447, 73652, 57536, 61586, 32122, 80810, 73166, 97264, 40769, 51719, 86987, 87135, 2856, 40112, 8936, 52373, 3619, 432, 53848, 95290, 97070, 51531, 61007, 6562, 21283, 83256, 75937, 8433, 36113, 89960, 2415, 97495, 25744, 91912, 79586, 93353, 47814, 31261, 37342, 13570, 63853, 18257, 15529, 44375, 29131, 69934, 61742, 87353, 20300, 77409, 49357, 64619, 27138, 58507, 16105, 34276, 25122, 4168, 17353, 60371]
Tree:
(<start> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_y))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  )))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))))))  ))))  ))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  )))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 7) (<digit> 0)))))))  ))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_y))))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 4) (<digit> 5)))))))  ))))  ))))  ))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 2) (<digit> 0)))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 6) (<digit> 4)))  ))  ))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 9) (<digit> 7)))   (<math_op> *)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 4) (<digit> 3)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 0)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))  ))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 7) (<digit> 6)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 7) (<digit> 5)))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  )))))))  ))))  )))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 2)))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 7) (<digit> 2)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 7) (<digit> 1)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 0) (<digit> 7)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 5) (<digit> 4)))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 4) (<digit> 5)))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 8) (<digit> 9)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 2) (<digit> 1)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 3) (<digit> 4)))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 8) (<digit> 7)))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 3) (<digit> 9)))  ))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 8)))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 1) (<digit> 5)))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ))  ))  ))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 0) (<digit> 4)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 2) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 6) (<digit> 9)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 6) (<digit> 5)))  ))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 2) (<digit> 0)))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_y)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius))))))  )))  and  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  )))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> <)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 2) (<digit> 0))))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 8) (<digit> 3)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 0) (<digit> 8))))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 9) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_radius))))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x))))))  ))))  ))))  )))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 9) (<digit> 0)))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 1) (<digit> 1)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 1) (<digit> 1)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 1) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 1) (<digit> 8)))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 8) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 5)))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 5) (<digit> 0)))  ))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 3) (<digit> 7)))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 5) (<digit> 9)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 4) (<digit> 5)))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 2)))  ))  ))  ))))))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_y))))))  ))))))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 4) (<digit> 5)))))))  ))))  )))))  else  (<expr> (<action> 'RECHTS'))))

Fitness:
9.85753092955594