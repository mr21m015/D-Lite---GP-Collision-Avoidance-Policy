Generation:
50

Phenotype:
'LINKS' if not ( intersect_radius > intersect_centers_y and not intersect_centers_x < velocity_x ) or ( intersect_radius <= intersect_centers_x or obstacle_y > intersect_centers_x and ( intersect_radius - obstacle_y ) == ( obstacle_y - obstacle_y ) or ( obstacle_x * 6.59 ) <= p_div( hypot( intersect_radius , obstacle_y ) , p_div( obstacle_x , intersect_radius ) ) ) or direction else 'LINKS' if obstacle_y > intersect_centers_y or direction else 'RECHTS' if not direction and intersect_centers_x < obstacle_x and p_div( obstacle_x , intersect_centers_y ) < p_div( velocity_y , intersect_centers_x ) and not p_div( obstacle_x , velocity_x ) > hypot( intersect_centers_y , intersect_radius ) else 'LINKS' if obstacle_y <= velocity_y and not direction else 'RECHTS' if intersect_centers_y < velocity_x and not intersect_centers_x < intersect_radius and hypot( hypot( intersect_radius , velocity_y ) , obstacle_y ) != hypot( obstacle_y , ( obstacle_x - intersect_centers_y ) ) and ( velocity_x == obstacle_y ) or velocity_y != velocity_y and not velocity_x >= intersect_centers_x and not ( obstacle_y * intersect_centers_y ) == intersect_centers_x and -6.25 != -2.47 and not hypot( velocity_x , p_div( obstacle_y , velocity_x ) ) != p_div( ( intersect_centers_y + obstacle_y ) , ( intersect_centers_y + velocity_y ) ) and not direction else 'RECHTS' if direction or obstacle_y < intersect_centers_y else 'RECHTS' if not direction and not not intersect_radius != velocity_y else 'LINKS' if not direction or intersect_radius > velocity_y else 'RECHTS' if direction or ( obstacle_y != velocity_y or obstacle_x >= intersect_centers_y and ( obstacle_y * intersect_centers_y ) == intersect_centers_x ) or ( intersect_radius == velocity_x ) and ( obstacle_x <= velocity_x and p_div( velocity_x , obstacle_y ) == p_div( intersect_radius , intersect_radius ) ) and ( ( p_div( intersect_centers_y , intersect_centers_y ) + 2.48 ) > ( obstacle_x * p_div( velocity_x , obstacle_y ) ) ) or not ( velocity_x <= velocity_x and not obstacle_x > obstacle_x or hypot( p_div( intersect_centers_y , obstacle_x ) , intersect_radius ) >= velocity_y ) or ( intersect_centers_x <= intersect_centers_x and not intersect_centers_x < intersect_radius or intersect_centers_y <= velocity_x and not velocity_y <= intersect_radius and not obstacle_y <= velocity_y ) and -1.37 < hypot( hypot( ( 0.96 + hypot( 9.47 , ( ( obstacle_y * obstacle_y ) * -0.87 ) ) ) , 5.07 ) , velocity_y ) and ( obstacle_y != p_div( hypot( p_div( obstacle_x , obstacle_x ) , velocity_x ) , velocity_x ) ) or not not not p_div( velocity_y , hypot( intersect_centers_x , obstacle_x ) ) != velocity_y and not p_div( p_div( p_div( ( ( obstacle_y + intersect_centers_x ) + p_div( obstacle_y , obstacle_x ) ) , p_div( hypot( intersect_centers_y , velocity_y ) , -3.10 ) ) , -3.08 ) , obstacle_y ) <= p_div( ( hypot( ( velocity_y * velocity_y ) , p_div( obstacle_y , obstacle_x ) ) - hypot( hypot( -3.92 , 7.74 ) , p_div( ( velocity_y * intersect_centers_x ) , obstacle_x ) ) ) , intersect_centers_x ) and ( not obstacle_y >= intersect_radius and not not velocity_x != velocity_x and ( obstacle_y <= intersect_centers_y ) or not p_div( hypot( obstacle_x , velocity_y ) , ( obstacle_y * obstacle_x ) ) == hypot( ( intersect_radius + intersect_centers_y ) , ( velocity_x - intersect_centers_y ) ) and hypot( p_div( velocity_y , hypot( velocity_y , intersect_centers_y ) ) , hypot( p_div( hypot( velocity_y , velocity_x ) , p_div( intersect_centers_x , velocity_y ) ) , ( p_div( obstacle_y , intersect_centers_x ) + velocity_x ) ) ) <= p_div( p_div( hypot( ( obstacle_x * intersect_centers_y ) , -0.37 ) , hypot( obstacle_x , hypot( obstacle_y , obstacle_x ) ) ) , ( hypot( -6.16 , obstacle_y ) - hypot( obstacle_y , ( velocity_y - intersect_radius ) ) ) ) ) and hypot( ( velocity_y * 5.15 ) , -5.40 ) < obstacle_x else 'LINKS' if intersect_centers_y <= obstacle_x and hypot( obstacle_x , velocity_y ) <= 0.04 or intersect_radius == obstacle_y and not velocity_y != intersect_radius and hypot( p_div( velocity_y , velocity_y ) , hypot( intersect_centers_y , obstacle_y ) ) > ( 9.55 + obstacle_x ) or p_div( intersect_radius , intersect_centers_x ) < ( -0.29 + p_div( 7.43 , 1.40 ) ) or not not intersect_centers_y >= p_div( 2.65 , hypot( velocity_y , obstacle_y ) ) and direction else 'LINKS' if not direction or not hypot( intersect_centers_y , velocity_y ) > p_div( obstacle_y , intersect_centers_x ) else 'RECHTS' if not direction or intersect_centers_x == p_div( p_div( 0.62 , p_div( velocity_x , velocity_x ) ) , ( p_div( intersect_radius , obstacle_y ) + ( -5.34 - p_div( ( p_div( velocity_y , intersect_centers_x ) - velocity_x ) , p_div( ( obstacle_y * obstacle_x ) , ( obstacle_x - obstacle_x ) ) ) ) ) ) else 'RECHTS' if velocity_y > intersect_centers_y and not direction else 'RECHTS' if not direction or intersect_radius != intersect_centers_x and intersect_centers_y >= p_div( obstacle_x , intersect_centers_x ) or not obstacle_y == hypot( obstacle_y , velocity_x ) else 'RECHTS' if not direction and not ( intersect_radius - hypot( intersect_radius , intersect_centers_y ) ) >= hypot( velocity_x , intersect_centers_x ) or intersect_centers_y > -2.29 and ( obstacle_x != intersect_radius or -5.19 >= hypot( velocity_y , velocity_x ) ) else 'LINKS' if direction and hypot( p_div( ( -5.65 + hypot( p_div( intersect_centers_x , hypot( hypot( hypot( p_div( intersect_centers_y , velocity_y ) , 7.72 ) , p_div( 5.27 , p_div( velocity_x , velocity_x ) ) ) , ( hypot( obstacle_y , hypot( obstacle_x , velocity_x ) ) - obstacle_x ) ) ) , hypot( hypot( hypot( velocity_x , p_div( ( obstacle_x * obstacle_y ) , hypot( velocity_x , intersect_centers_y ) ) ) , p_div( 4.26 , 1.06 ) ) , ( ( p_div( ( intersect_radius + obstacle_x ) , intersect_centers_y ) * hypot( intersect_centers_x , hypot( intersect_radius , obstacle_y ) ) ) - hypot( ( ( intersect_centers_x - obstacle_y ) + ( intersect_centers_y - intersect_centers_x ) ) , ( p_div( intersect_radius , velocity_y ) + p_div( intersect_centers_x , velocity_y ) ) ) ) ) ) ) , p_div( obstacle_y , ( hypot( intersect_centers_y , hypot( intersect_centers_x , obstacle_x ) ) * hypot( intersect_centers_x , -3.08 ) ) ) ) , p_div( 1.07 , hypot( obstacle_x , ( obstacle_x * obstacle_y ) ) ) ) == hypot( velocity_x , velocity_y ) or ( hypot( p_div( hypot( ( -8.87 * p_div( intersect_centers_y , intersect_centers_x ) ) , velocity_y ) , ( p_div( obstacle_x , hypot( velocity_y , 1.39 ) ) + intersect_centers_y ) ) , ( velocity_x + 6.41 ) ) - velocity_y ) < intersect_centers_y else 'LINKS' if not direction or not p_div( ( ( velocity_y - ( velocity_x + velocity_x ) ) + ( ( velocity_x + velocity_y ) + obstacle_x ) ) , 6.48 ) < ( -4.25 + -6.46 ) or obstacle_y == p_div( p_div( intersect_centers_x , p_div( hypot( p_div( obstacle_y , hypot( obstacle_y , velocity_y ) ) , ( intersect_radius + hypot( obstacle_y , velocity_y ) ) ) , p_div( p_div( intersect_radius , velocity_x ) , velocity_y ) ) ) , p_div( p_div( velocity_y , obstacle_y ) , -4.19 ) ) or ( velocity_y == intersect_centers_y or ( obstacle_y + intersect_centers_y ) < intersect_centers_y or not 8.56 > intersect_centers_x ) and not not not p_div( hypot( p_div( hypot( velocity_y , velocity_x ) , intersect_radius ) , hypot( p_div( velocity_x , obstacle_y ) , 0.29 ) ) , hypot( ( 0.41 * intersect_centers_y ) , hypot( velocity_y , p_div( obstacle_x , obstacle_x ) ) ) ) < p_div( intersect_radius , ( -8.43 * p_div( -0.51 , p_div( intersect_centers_y , intersect_centers_x ) ) ) ) or not ( obstacle_y != velocity_y and p_div( obstacle_x , obstacle_y ) > hypot( intersect_centers_y , intersect_radius ) and ( 7.39 + ( velocity_y + velocity_x ) ) <= hypot( hypot( obstacle_y , velocity_y ) , -0.73 ) or intersect_radius == velocity_x and hypot( velocity_y , velocity_x ) < ( obstacle_y * intersect_centers_y ) and not not obstacle_y > intersect_centers_y and ( intersect_centers_x < intersect_radius ) ) and not ( not obstacle_y >= intersect_radius and not not velocity_x != velocity_x and ( obstacle_y <= intersect_centers_y ) or ( intersect_centers_y > intersect_radius ) ) else 'RECHTS'

Genotype:
[91512, 43645, 34320, 9631, 10032, 57550, 86551, 54393, 99430, 71201, 48300, 98344, 14221, 43121, 15314, 70037, 91410, 35559, 51049, 44190, 41876, 7200, 89455, 77883, 95104, 65631, 86269, 34615, 57547, 43621, 60575, 97396, 6286, 14198, 19015, 61297, 40836, 3840, 12990, 50936, 88565, 53475, 11301, 26660, 65471, 79257, 95792, 33906, 94700, 82780, 15271, 49572, 77855, 47243, 56388, 47616, 28774, 10945, 56324, 19507, 79155, 57138, 61876, 73569, 91120, 19317, 97792, 13175, 27521, 30418, 27660, 48781, 95724, 62430, 19974, 61079, 68781, 9257, 57118, 59656, 19175, 7369, 44085, 84127, 95908, 57930, 64549, 22820, 15299, 92067, 32515, 54288, 11120, 55477, 20202, 13386, 48889, 39794, 50880, 97778, 64646, 23867, 18983, 44458, 25206, 45882, 54162, 82776, 9825, 71411, 18558, 49385, 36492, 33510, 21711, 79354, 23477, 60057, 10360, 3501, 54645, 93788, 19764, 74937, 76670, 14245, 2917, 55510, 87720, 38070, 90087, 72112, 44580, 60840, 61920, 2374, 11845, 1132, 87945, 59086, 20740, 40733, 83779, 41217, 14651, 71447, 74105, 68533, 11180, 99139, 32046, 42058, 53855, 28008, 20950, 14219, 83648, 54412, 69697, 83621, 91504, 44786, 58156, 37554, 55607, 99310, 47121, 59181, 10350, 43994, 23075, 47497, 50824, 9384, 77965, 35322, 97699, 52929, 84891, 75590, 43515, 49571, 6550, 7197, 14227, 48340, 91474, 64405, 8706, 25233, 7440, 11837, 26263, 71715, 48806, 82782, 42954, 53543, 70053, 55375, 37046, 13130, 67605, 27450, 34906, 8243, 31018, 5635, 44118, 88829, 42795, 64837, 49834, 80635, 14071, 86732, 59930, 99346, 26751, 80538, 42265, 72385, 4612, 28575, 24742, 62589, 68143, 54511, 38507, 94194, 91062, 28984, 76160, 13369, 27071, 23625, 45044, 78106, 42042, 49771, 72865, 63761, 71450, 64610, 1029, 67186, 29067, 98907, 80799, 58420, 71348, 73226, 11755, 30346, 3358, 95340, 10255, 52608, 17663, 60746, 8561, 84957, 97806, 53402, 87325, 56525, 1671, 5688, 48785, 76812, 54284, 17417, 62713, 47667, 82222, 23068, 98550, 46835, 73927, 37045, 81015, 24160, 53366, 34361, 21557, 63029, 19440, 84316, 97296, 49565, 32246, 52849, 61140, 53992, 69885, 7250, 56300, 80131, 26294, 92071, 10240, 22792, 37615, 32070, 67075, 97688, 79518, 29964, 72690, 3815, 33810, 58888, 46339, 12010, 19594, 46475, 32070, 98245, 94137, 33504, 87918, 97891, 10396, 54264, 39569, 30930, 57388, 83849, 8155, 13306, 56996, 76598, 3201, 32631, 42579, 69269, 71802, 81610, 40143, 78635, 17525, 81790, 98010, 9185, 29658, 85793, 66814, 99687, 72920, 94189, 76491, 42283, 33985, 91246, 72686, 34394, 70441, 24260, 15628, 35037, 41530, 34320, 86916, 8393, 47705, 40851, 34017, 91558, 29484, 41460, 98220, 21682, 63536, 35955, 14246, 59139, 98907, 80799, 58420, 71348, 73226, 11755, 30346, 3358, 95340, 10255, 77199, 9027, 63782, 97124, 61754, 65226, 50670, 89071, 56160, 50115, 18736, 93600, 66673, 7703, 89062, 60125, 7338, 2061, 48518, 1670, 34604, 93399, 66575, 24246, 23826, 17073, 27362, 34505, 66470, 17980, 74372, 58594, 27522, 55355, 61210, 82250, 34218, 78782, 24146, 46694, 70608, 43975, 75919, 13142, 8505, 52522, 29505, 33734, 77727, 19866, 18342, 75588, 14812, 49324, 13598, 16542, 11144, 69455, 10545, 10739, 17362, 82200, 57195, 4090, 95778, 56034, 32743, 30827, 82775, 66314, 55239, 16182, 11181, 39769, 26190, 42313, 76563, 95900, 83529, 97348, 77727, 71821, 57960, 71872, 17838, 30025, 1998, 15554, 9726, 90956, 65583, 95897, 23385, 95432, 62225, 63717, 62555, 48281, 69956, 94130, 75858, 25899, 71803, 69408, 60818, 31103, 29046, 84891, 75590, 43515, 26160, 90585, 53102, 99537, 2305, 5173, 64405, 8706, 25233, 7440, 11837, 26263, 71715, 48806, 52275, 94447, 60592, 48423, 97558, 92130, 79780, 64761, 51765, 31946, 40462, 28707, 91280, 56030, 61263, 9861, 75910, 38964, 397, 22761, 92189, 32405, 19877, 5715, 70365, 59548, 5052, 6453, 62016, 54066, 72629, 73111, 4543, 69717, 74095, 42423, 78733, 8079, 19991, 40950, 68130, 27700, 15229, 32816, 91584, 57578, 98736, 36855, 8972, 49269, 36524, 71867, 53234, 63279, 41105, 51839, 41714, 45950, 34934, 63542, 58316, 61270, 74853, 21870, 46148, 59107, 23076, 82253, 4488, 96685, 95890, 48547, 39855, 64119, 39524, 97014, 95908, 12609, 47268, 29930, 51048, 32015, 5877, 95568, 36972, 39320, 28990, 67660, 10566, 19580, 56992, 80375, 24456, 9085, 16559, 3497, 55572, 53815, 64243, 41029, 4689, 13654, 81602, 48995, 12473, 368, 15090, 27244, 95310, 71613, 80069, 55265, 32717, 43102, 2154, 91948, 15577, 87747, 95727, 90774, 58094, 31060, 62766, 54498, 61940, 93464, 15027, 39662, 4645, 67841, 24370, 95140, 75137, 65078, 30700, 50828, 20245, 62670, 23856, 34835, 44197, 37733, 70641, 62970, 20636, 21709, 39527, 12113, 84760, 798, 3530, 13521, 99537, 35722, 72064, 63203, 19824, 51300, 51652, 38255, 14235, 20068, 6697, 79895, 99817, 85640, 54288, 22873, 15298, 81398, 22771, 49770, 77177, 94753, 3039, 47662, 92676, 64968, 72626, 3537, 8137, 87354, 44462, 9594, 15495, 20859, 25385, 86170, 39942, 15240, 47659, 84250, 34594, 57209, 13483, 71090, 34459, 11641, 53308, 14872, 74937, 96016, 95365, 42837, 42986, 22840, 18930, 91648, 66757, 13293, 46520, 81845, 28915, 41633, 30405, 39877, 56390, 68854, 75834, 52122, 90881, 9340, 92292, 41709, 80565, 35029, 13373, 85236, 496, 76218, 80772, 68992, 57018, 90560, 15011, 3495, 78441, 30614, 90365, 15439, 16748, 48580, 6247, 36682, 79743, 22154, 20390, 70443, 81183, 47825, 47783, 52154, 8325, 91544, 61141, 69450, 79829, 4257, 13863, 12223, 96187, 81800, 27397, 58938, 79260, 20712, 46745, 97070, 55018, 15342, 15018, 19200, 29070, 34270, 59526, 60302, 94005, 36785, 14185, 11577, 77594, 66722, 95900, 10469, 33130, 56784, 50811, 76405, 16448, 87135, 78957, 85847, 45413, 49499, 31390, 85410, 36218, 28110, 18761, 50806, 30600, 66239, 91290, 29883, 43327, 11383, 81670, 76513, 90178, 47180, 25099, 68110, 12883, 76854, 63328, 96571, 79123, 95461, 16076, 59021, 31976, 47640, 73245, 99373, 12338, 57350, 56851, 8569, 78280, 615, 59323, 9630, 72228, 55668, 22665, 30443, 57779, 33580, 52513, 93497, 36871, 22176, 88810, 96475, 98081, 4695, 36386, 44516, 33095, 27165, 22304, 63340, 55969, 32700, 90660, 75204, 34583, 11832, 3594, 57043, 42447, 33708, 83341, 25741, 23355, 15968, 68561, 85688, 1845, 4835, 6330, 91792, 98139, 49025, 2488, 60657, 27220, 15423, 57300, 66398, 36960, 27341, 58083, 86806, 27557, 47102, 28000, 16340, 6294, 7145, 72081, 78450, 57069, 17186, 8395, 61378, 58648, 95700, 11967, 74563, 86196, 96574, 35830, 67976, 84641, 73635, 37592, 81438, 26739, 78018, 68847, 3430, 10513, 7780, 54193, 84088, 38480, 12559, 88790, 82772, 17682, 32284, 13606, 68332, 90490, 91099, 38805, 4955, 46596, 2855, 73356, 44714, 82623, 36108, 96817, 28625, 5644, 68055, 96670, 11851, 67574, 91686, 57408, 1853, 71790, 54022, 60989, 46872, 96657, 57641, 76042, 84108, 26447, 14004, 15853, 9441, 7355, 84588, 37981, 36614, 24780, 41162, 41812, 23656, 53985, 80008, 27725, 82629, 91028, 41102, 73871, 95535, 42190, 4662, 44596, 7235, 87103, 55750, 22595, 44010, 14123, 52102, 504, 93033, 85377, 55069, 49767, 48495, 81988, 93150, 46288, 17706, 94917, 1653, 91100, 47895, 54910, 18255, 57882, 80387, 85760, 96961, 90355, 15736, 5779, 79354, 37783, 44913, 28952, 92794, 65577, 30258, 17170, 94913, 35668, 61682, 88627, 86496, 55415, 11254, 17680, 33856, 22922, 33262, 2630, 63005, 83425, 68388, 55894, 19732, 7480, 42534, 99350, 91326, 80142, 16954, 68046, 60067, 54039, 13835, 26543, 83214, 38014, 40727, 3739, 44017, 75185, 14916, 8735, 91294, 50893, 91015, 71153, 8857, 4384, 36155, 58615, 62222, 61100, 40995, 41954, 62920, 2411, 20746, 97510, 74490, 45180, 95154, 50, 8405, 19376, 72068, 68401, 32070, 22660, 68684, 62558, 66873, 17995, 73715, 36525, 48786, 38550, 89363, 60057, 94299, 1592, 88699, 60057, 11067, 96232, 73685, 14654, 73446, 76105, 99675, 58340, 60779, 44995, 94794, 41106, 47323, 66480, 6798, 73694, 88942, 19470, 26316, 61340, 2667, 58280, 52282, 62550, 5397, 82655, 91326, 95362, 81153, 21245, 38189, 27075, 69249, 43077, 50824, 57717, 7947, 5523, 56464, 15020, 68827, 98292, 457, 81124, 63270, 46167, 58540, 59208, 5495, 79865, 94150, 97875, 92060, 53888, 37755, 78377, 88675, 41804, 79927, 20244, 24144, 55132, 55825, 80326, 25860, 85226, 93500, 66239, 81162, 47872, 94459, 74363, 87695, 68760, 8488, 34137, 58503, 25990, 46616, 58001, 44950, 81090, 73454, 94887, 4168, 23691, 70918, 31195, 97245, 31081, 23259, 73694, 3613, 31045, 86813, 64125, 97403, 62335, 33633, 85817, 95858, 92855, 73532, 89554, 85353, 98737, 15873, 11737, 9604, 25241, 58650, 20465, 49585, 8886, 7175, 48912, 37168, 87597, 21145, 40943, 40963, 74978, 44248, 3337, 38590, 27322, 75510, 91993, 53221, 66804, 89984, 42277, 95827, 75642, 24012, 79576, 35861, 28576, 41635, 79422, 33317, 43072, 16275, 53450, 90475, 99552, 109, 7703, 90965, 79153, 49513, 56365, 7360, 71350, 8622, 79936, 92010, 23943, 29873, 47473, 44928, 51690, 28768, 50142, 18109, 31480, 55016, 93719, 8945, 58440, 18203, 73480, 14159, 67920, 86171, 20527, 25111, 13022, 53968, 16334, 9882, 16346, 13751, 41354, 29498, 39011, 68700, 18486, 46774, 20464, 72182, 11659, 24225, 89462, 84990, 40585, 24265, 91030, 62574, 7238, 95238, 23595, 27181, 30113, 37430, 82154, 4055, 38735, 7561, 76688, 9264, 72104, 21780, 23121, 74065, 99550, 57152, 73083, 35254, 6215, 3039, 46408, 94265, 85057, 99579, 63252, 89730, 3873, 7100, 79176, 37077, 44757, 54060, 57295, 57035, 52079, 69417, 26230, 65433, 23749, 52658, 98085, 17921, 6263, 77895, 77105, 15400, 48114, 71636, 36398, 15370, 26047, 82641, 21709, 39527, 12113, 84760, 798, 15547, 26846, 44307, 31344, 60271, 61380, 31847, 87408, 35465, 16243, 32069, 67835, 29494, 86765, 13435, 10602, 81100, 42563, 78275, 21411, 35150, 8980, 42428, 80946, 57699, 12734, 77063, 30122, 70808, 3994, 81156, 88041, 92511, 29578, 97028, 95827, 30071, 32332, 6705, 88691, 97990, 27013, 27480, 59744, 43844, 77362, 85855, 78459, 55933, 69205, 19375, 44266, 40906, 68298, 45941, 69683, 18229, 69885, 66710, 4796, 88929, 32125, 75745, 43791, 30266, 19480, 47532, 63576, 10784, 82681, 5386, 28780, 17317, 64063, 86640, 9367, 33066, 85871, 72889, 28117, 57723, 44913, 61847, 53475, 78695, 76938, 63084, 41467, 45861, 45429, 12622, 87159, 41909, 14960, 2211, 25567, 5589, 33475, 6844, 12468, 20595, 17820, 19689, 93119, 16439, 16445, 93791, 22524, 79235, 2652, 86439, 85120, 1403, 411, 99718, 89214, 20936, 88394, 64438, 51961, 48489, 38816, 57631, 54039, 73564, 88942, 23405, 50811, 7941, 97327, 92883, 2066, 8594, 65436, 40902, 87789, 13451, 77985, 1859, 46528, 20557, 37907, 87995, 68558, 20947, 79403, 83747, 39540, 95428, 618, 75995, 50264, 58010, 37344, 58364, 63270, 46167, 57330, 93413, 10565, 12121, 5430, 10373, 55747, 75682, 8750, 7478, 73690, 42915, 73990, 32486, 3782, 29277, 86190, 22833, 2580, 31833, 58991, 33612, 62569, 94974, 23231, 96659, 32503, 72852, 9197, 88411, 23719, 22932, 1520, 44421, 2959, 13485, 29063, 29464, 73165, 3543, 48398, 55062, 24883, 3654, 79370, 97094, 19968, 45980, 60327, 63973, 94255, 76595, 5838, 76495, 48666, 22611, 62801, 68239, 2952, 25458, 16195, 37526, 49572, 10005, 51345, 75700, 8599, 7267, 15507, 63628, 58772, 33593, 80892, 17428, 77960, 10373, 21990, 97396, 27980, 62428, 3018, 17532, 92330, 52239, 66285, 93398, 52226, 20803, 68134, 97330, 68032, 36039, 78678, 7269, 85216, 45678, 88290, 98440, 61334, 37771, 78086, 46510, 17585, 97208, 66720, 9792, 90222, 2890, 14465, 86755, 22396, 66301, 802, 56355, 32804, 94284, 64066, 48482, 42069, 69108, 4944, 36773, 85079, 48302, 41006, 77240, 70659, 31180, 48745, 59051, 48557, 44410, 10774, 26530, 4144, 25159, 15514, 19207, 98132, 78835, 14786, 55981, 96193, 76052, 14103, 78598, 60395, 19317, 72065, 77635, 7993, 62973, 14651, 71447, 74105, 68533, 47640, 73245, 32046, 42058, 53855, 28008, 20950, 14219, 35661, 79568, 98244, 14176, 25123, 39690, 48307, 54363, 31179, 25857, 63129, 40160, 11710, 45369, 67595, 24120, 73017, 94598, 99193, 99440, 21382, 47875, 94555, 91966, 69272, 63671, 98360, 357, 69263, 30063, 4505, 26551, 23282, 63096, 83549, 4110, 7730, 46108, 11810, 66498, 15096, 55188, 30068, 72020, 82270, 67470, 10309, 73957, 7019, 24375, 83493, 44501, 50215, 65220, 25906, 40537, 99417, 82776, 9825, 71411, 18558, 49385, 36492, 25223, 24358, 59976, 34869, 25233, 7440, 11837, 26263, 71715, 48806, 21937, 57209, 13483, 71090, 34459, 11641, 53308, 14872, 74937, 96016, 95365, 42837, 42986, 22840, 18930, 91648, 66757, 13293, 46520, 81845, 28915, 41633, 30405, 39877, 56390, 68854, 75834, 52122, 90881, 9340, 92292, 41709, 80565, 35029, 78472, 98555, 85200, 80798, 60141, 38598, 82925, 94305, 84948, 73680, 95524, 2237, 12754, 49385, 20174, 31596, 4827, 94605, 91924, 17006, 76264, 17171, 54822, 34394, 34142, 38086, 75927, 24743, 56920, 85161, 58787, 53417, 3879, 76755, 49640, 65239, 15436, 23386, 2764, 38938, 87434, 51266, 88504, 35461, 78040, 83959, 22814, 77245, 20769, 35364, 80920, 67065, 65916, 89842, 11068, 49899, 70811, 16959, 50264, 47692, 43175, 57168, 58222, 29555, 38179, 26236, 25223, 17108, 58642, 33159, 91227, 61790, 66276, 10868, 91779, 31826, 68260, 13724, 344, 40412, 16870, 90916, 87262, 95055, 88625, 3097, 81438, 6538, 40726, 14724, 51120, 69845, 3994, 98516, 37782, 17470, 94446, 78709, 80549, 36454, 94873, 40315, 89795, 26530, 36329, 48682, 62067, 4915, 39366, 206, 81553, 22296, 69001, 22881, 77534, 77773, 28722, 9352, 23638, 35832, 23967, 48522, 64853, 46484, 5458, 90692, 38626, 56205, 25352, 86522, 58015, 63446, 49077, 71560, 78455, 98437, 36438, 77628, 52323, 68986, 79521, 79748, 33275, 23437, 99245, 20135, 27606, 63114, 34934, 30000, 41663, 80989, 15696, 71684, 91705, 2488, 52737, 64134, 56257, 35802, 52874, 40763, 63640, 61873, 45483, 97779, 81467, 43689, 97866, 75537, 13664, 3108, 81346, 7695, 77365, 48282, 21071, 73368, 72670, 37285, 54323, 71841, 9102, 40798, 44663, 37634, 16913, 8956, 91394, 75195, 58666, 52078, 69035, 94860, 28493, 44699, 59196, 14891, 11670, 58634, 48574, 76591, 80655, 39787, 23246, 44998, 17069, 10824, 46835, 79555, 87596, 3764, 96256, 99641, 17446, 63663, 65284, 39513, 19114, 86393, 40806, 92315, 32528, 2977, 89037, 83576, 40400, 34342, 52917, 84956, 39824, 15400, 25987, 70572, 22188, 98407, 98393, 55200, 16018, 70943, 74656, 96582, 94555, 19, 21240, 17234, 93424, 84386, 10635, 69710, 98713, 76127, 3344, 13549, 64891, 25938, 61303, 30306, 41300, 87386, 95257, 81286, 89175, 18807, 54001, 52733, 89642, 59223, 14671, 62019, 56561, 26580, 72625, 84001, 57145, 87650, 64626, 20351, 15399, 45366, 86943, 47241, 95685, 33271, 28414, 27414, 89176, 59685, 2730, 56618, 48962, 82469, 12725, 75555, 42283, 16396, 94633, 90865, 22672, 74766, 58997, 70773, 83505, 62775, 43933, 26525, 35481, 97065, 65560, 74101, 88236, 5210, 77814, 14729, 53242, 89326, 42581, 23064, 49053, 44911, 72952, 85217, 45725, 41369, 5959, 4178, 87280, 38924, 46360, 80326, 3406, 46670, 39918, 20746, 50169, 79946, 88484, 64896, 26689, 26922, 2826, 37364, 63748, 95264, 21427, 95437, 30311, 15992, 11001, 90320, 33912, 72621, 85866, 45789, 1495, 53629, 53221, 17907, 53182, 8851, 61903, 54540, 47729, 63366, 70326, 72672, 87651, 75668, 30176, 80291, 60303, 76482, 4767, 4319, 68722, 31068, 24548, 27995, 82207, 8802, 74934, 1076, 53983, 24680, 8180, 33020, 46718, 12189, 68866, 42210, 6005, 15379, 72997, 5693, 59759, 96904, 31463, 5605, 39968, 88792, 35969, 99731, 38763, 94481, 45323, 43553, 11888, 79341, 49735, 20029, 78640, 61470, 67622, 98479, 80357, 4012, 61976, 89949, 14228, 23997, 31809, 10941, 83604, 50185, 86446, 62483, 83201, 83979, 44747, 52530, 64802, 54753, 21503, 26803, 27369, 14694, 19327, 97574, 56379, 28045, 21342, 39003, 2452, 46055, 76729, 27439, 7893, 40291, 30226, 25988, 23405, 27988, 95433, 12352, 31122, 80581, 58159, 87667, 21182, 38301, 70607, 75139, 48458, 26976, 2300, 96518, 41353, 30851, 57543, 31711, 83497, 15445, 87689, 92075, 73400, 6048, 75440, 63096, 66553, 83004, 40408, 60463, 16234, 66547, 72029, 33265, 87469, 36682, 46857, 43372, 18343, 9733, 10617, 75473, 35060, 30252, 30119, 57711, 71575, 88453, 37482, 85988, 49292, 81812, 73871, 75943, 57648, 37309, 85003, 92616, 93299, 90208, 62343, 6549, 77337, 21317, 75167, 66750, 80388, 39085, 1212, 7149, 85654, 52835, 19508, 49613, 45789, 6871, 17616, 94112, 79567, 33819, 59591, 34808, 51996, 56559, 27843, 20168, 50336, 91463, 97818, 44883, 25928, 30824, 27530, 76568, 20781, 4456, 23036, 67847, 49617, 15657, 8608, 39518, 11781, 58711, 83302, 62291, 61169, 31211, 3204, 68757, 85563, 3456, 27917, 65764, 90255, 68868, 35982, 59936, 55489, 22375, 15749, 45097, 45403, 50417, 9484, 73374, 1986, 88965, 89965, 5679, 54663, 29791, 7674, 18527, 76449, 87622, 99185, 63694, 38502, 60984, 68679, 92457, 41852, 15403, 45938, 3425, 41886, 5323, 12233, 74864, 76383, 78090, 79894, 32343, 98518, 25272, 79876, 961, 1536, 94029, 33426, 57913, 37965, 7949, 56934, 84416, 75897, 40663, 55139, 53610, 22374, 21845, 72723, 2143, 63177, 77670, 45606, 87269, 68969, 15094, 1952, 66645, 79080, 1786, 73037, 38590, 87120, 55275, 70486, 95500, 8759, 49933, 94257, 19637, 93692, 75130, 57482, 57586, 46710, 46843, 6006, 37573, 51381, 45204, 85365, 50751, 40455, 49069, 34216, 97977, 70982, 73433, 20285, 77749, 13398, 85858, 64189, 40833, 52118, 86706, 50768, 55949, 97416, 24817, 18238, 58867, 96975, 15429, 51126, 11158, 44534, 99383, 51551, 2260, 89288, 75331, 74634, 11908, 15906, 54989, 8256, 9439, 99184, 76940, 2262, 92304, 15751, 82766, 73609, 83587, 27773, 14205, 78387, 23818, 39717, 93924, 67572, 62051, 82218, 1278, 47309, 78617, 19773, 2798, 39392, 9640, 9282, 64738, 30737, 41376, 16623, 84220, 51988, 50467, 3988, 76530, 2214, 99457, 75799, 77431, 27753, 54859, 63329, 43991, 24694, 37772, 6975, 5031, 30485, 38, 48186, 51229, 74285, 61792, 2953, 19874, 14072, 22716, 26655, 37757, 99328, 13309, 24861, 60383, 39327, 62931, 91754, 85086, 6051, 3825, 59356, 88816, 43832, 86976, 89483, 17951, 50782, 9453, 54768, 61149, 52274, 80222, 43845, 51848, 94214, 28056, 65858, 19239, 335, 15338, 71244, 98217, 67167, 30153, 19283, 72570, 69416, 46216, 60209, 51069, 35423, 84683, 84872, 68712, 3115, 20558, 82253, 95678, 13781, 33131, 99392, 52504, 47171, 58617, 67253, 20307, 73311, 7031, 10727, 5518, 97055, 85245, 11570, 36247, 69861, 33395, 39181, 34271, 43955, 19272, 44145, 30433, 67346, 53620, 64194, 88313, 32884, 7576, 234, 98889, 56737, 8434, 57951, 96706, 85691, 99233, 23590, 43838, 7828, 17836, 63922, 35227, 92079, 80590, 51680, 86404, 75421, 34352, 63704, 48307, 65752, 57265, 41898, 52864, 37733, 48042, 21455, 20069, 84436, 57230, 73930, 38116, 77698, 9605, 58679, 88274, 35075, 15270, 94963, 58053, 71052, 91835, 85326, 42727, 74929, 28617, 75274, 50754, 5995, 43556, 26601, 16390, 13444, 51277, 30836, 48421, 2116, 59317, 36314, 86092, 88513, 69496, 43806, 73710, 98921, 22485, 1473, 72846, 3052, 88748, 84448, 61208, 28595, 94556, 55573, 98692]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))))  )))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> ==)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 5) (<digit> 9)))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))))))  ))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_x)))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<boolean_feature> not direction))  else  (<expr> (<action> 'RECHTS'))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> obstacle_y))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 2) (<digit> 5)))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 4) (<digit> 7))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<comp_op> !=)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  )))))))  and  (<boolean_feature> not direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y)))))))))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_y)))))))  else  (<expr> (<action> 'RECHTS'))))))))))  if  (<direction_compound_expr> (<boolean_feature> direction)  or  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 4) (<digit> 8)))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))))))  ))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_x)))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y))))))  )))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y)))))))  )))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 3) (<digit> 7)))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 6)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 4) (<digit> 7)))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 8) (<digit> 7)))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 0) (<digit> 7)))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y))))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 1) (<digit> 0)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 0) (<digit> 8)))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 9) (<digit> 2)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 4)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  ))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> ==)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 3) (<digit> 7)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 1) (<digit> 6)))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))))))  )))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 1) (<digit> 5)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 4) (<digit> 0)))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_x)))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 0) (<digit> 4)))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 5)))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 2) (<digit> 9)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 4) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 4) (<digit> 0)))  ))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 5)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))))))))  and  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))))))))  else  (<expr> (<action> 'RECHTS'))))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 6) (<digit> 2)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 4)))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  and  (<boolean_feature> not direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> ==)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  )))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 2) (<digit> 9))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 1) (<digit> 9)))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))  )))))  else  (<expr> (<action> 'LINKS'))))))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 6) (<digit> 5)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 2)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 2) (<digit> 7)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 2) (<digit> 6)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 0) (<digit> 6)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 0) (<digit> 8)))  ))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 0) (<digit> 7)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))  ))   (<comp_op> ==)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 8) (<digit> 7)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 3) (<digit> 9)))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 4) (<digit> 1)))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 4) (<digit> 8)))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 2) (<digit> 5)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 4) (<digit> 6)))  )))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 1) (<digit> 9)))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 5) (<digit> 6)))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))))  )))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 2) (<digit> 9)))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 4) (<digit> 1)))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 4) (<digit> 3)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 5) (<digit> 1)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  )))))))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 3) (<digit> 9)))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 7) (<digit> 3)))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius))))))  ))))  ))))  and  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  ))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius))))))  ))))  ))))))  else  (<expr> (<action> 'RECHTS'))))))

Fitness:
9.621409185134356