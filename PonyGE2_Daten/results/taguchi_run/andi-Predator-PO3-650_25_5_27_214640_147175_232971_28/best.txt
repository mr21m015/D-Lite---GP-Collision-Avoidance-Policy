Generation:
50

Phenotype:
'LINKS' if direction and velocity_x > hypot( p_div( intersect_centers_x , ( hypot( hypot( intersect_centers_x , obstacle_y ) , p_div( intersect_centers_x , velocity_y ) ) - -3.29 ) ) , hypot( intersect_centers_y , velocity_y ) ) or not ( ( ( ( 3.68 * 1.22 ) + p_div( p_div( velocity_x , intersect_centers_x ) , 8.58 ) ) + -4.72 ) + intersect_centers_x ) < p_div( ( velocity_y * p_div( ( hypot( 9.53 , velocity_y ) - p_div( velocity_y , intersect_radius ) ) , 3.72 ) ) , 6.35 ) or ( p_div( ( ( obstacle_x * ( 9.50 - velocity_y ) ) + p_div( p_div( p_div( ( obstacle_y * obstacle_x ) , velocity_y ) , p_div( velocity_x , -3.17 ) ) , ( ( hypot( obstacle_x , obstacle_y ) + hypot( obstacle_y , velocity_y ) ) - ( hypot( intersect_centers_y , intersect_centers_x ) - -4.36 ) ) ) ) , obstacle_y ) * -3.95 ) <= velocity_y else 'LINKS' if obstacle_y <= obstacle_x and direction else 'RECHTS' if intersect_centers_x <= p_div( intersect_centers_x , velocity_x ) and direction else 'RECHTS' if direction and hypot( -3.77 , intersect_radius ) < hypot( hypot( intersect_centers_x , obstacle_y ) , intersect_centers_y ) or ( intersect_radius <= obstacle_x ) or velocity_y != hypot( intersect_radius , obstacle_y ) and p_div( velocity_y , obstacle_y ) < ( obstacle_x * obstacle_y ) and ( velocity_x != intersect_centers_x ) and ( obstacle_y >= intersect_radius or obstacle_x > intersect_centers_y and intersect_centers_x > p_div( velocity_x , intersect_radius ) ) else 'LINKS' if 7.78 <= -9.26 and velocity_x != -2.91 and 9.93 == p_div( ( hypot( p_div( intersect_centers_x , obstacle_y ) , 4.87 ) * p_div( ( intersect_centers_y + obstacle_y ) , p_div( intersect_radius , intersect_radius ) ) ) , hypot( p_div( -6.55 , ( hypot( intersect_centers_y , intersect_centers_x ) - 4.36 ) ) , velocity_x ) ) and 3.01 >= ( hypot( velocity_y , hypot( -8.84 , p_div( -1.00 , 3.99 ) ) ) + velocity_x ) or direction else 'LINKS' if not direction or ( p_div( velocity_x , velocity_y ) * obstacle_y ) <= hypot( 4.94 , p_div( intersect_radius , obstacle_y ) ) else 'RECHTS' if direction or velocity_x < velocity_x else 'LINKS' if intersect_centers_y != obstacle_y and not obstacle_y > velocity_y and -5.59 > p_div( obstacle_y , velocity_y ) and -5.91 > hypot( intersect_centers_x , 3.29 ) or ( obstacle_y <= obstacle_x ) and ( intersect_radius == obstacle_y or velocity_y != velocity_x and ( intersect_centers_x + velocity_x ) >= obstacle_x ) or direction else 'LINKS' if not direction or obstacle_x > intersect_radius else 'RECHTS' if not direction or p_div( obstacle_y , intersect_radius ) > -3.17 and -0.72 >= hypot( 2.64 , p_div( velocity_y , obstacle_y ) ) else 'RECHTS' if not direction and hypot( 5.52 , -0.48 ) < hypot( hypot( ( obstacle_x + obstacle_y ) , hypot( hypot( 9.72 , p_div( 3.11 , ( 1.58 * ( hypot( ( velocity_x - obstacle_y ) , ( obstacle_y + obstacle_x ) ) + p_div( -8.45 , intersect_radius ) ) ) ) ) , hypot( 4.87 , hypot( p_div( obstacle_y , hypot( hypot( intersect_centers_y , intersect_centers_x ) , p_div( obstacle_y , intersect_centers_x ) ) ) , ( -2.47 * hypot( p_div( p_div( velocity_y , intersect_centers_x ) , hypot( obstacle_x , intersect_radius ) ) , ( p_div( obstacle_y , intersect_centers_y ) - ( velocity_x - intersect_centers_x ) ) ) ) ) ) ) ) , hypot( velocity_x , p_div( hypot( hypot( ( intersect_centers_x - p_div( hypot( -8.93 , hypot( obstacle_y , obstacle_x ) ) , obstacle_x ) ) , velocity_y ) , velocity_x ) , p_div( p_div( p_div( p_div( -4.39 , hypot( -7.05 , 5.80 ) ) , p_div( ( hypot( intersect_centers_y , obstacle_x ) - 2.38 ) , ( hypot( obstacle_y , obstacle_x ) + intersect_centers_x ) ) ) , -2.57 ) , p_div( p_div( hypot( hypot( 6.37 , hypot( obstacle_y , velocity_y ) ) , obstacle_x ) , -2.05 ) , ( obstacle_x - 9.98 ) ) ) ) ) ) and not 9.51 <= p_div( hypot( -5.21 , intersect_centers_x ) , intersect_radius ) else 'LINKS'

Genotype:
[94234, 98052, 78858, 1795, 45871, 51297, 26489, 67690, 10227, 76361, 24564, 67110, 79881, 42218, 55955, 93770, 85758, 3378, 87257, 81575, 84959, 54229, 73883, 8613, 95275, 3129, 47380, 5933, 837, 91500, 79485, 45555, 64028, 1867, 44341, 73090, 70273, 14173, 98482, 3659, 28983, 72805, 76042, 6775, 64000, 64894, 65749, 31962, 90214, 73774, 47189, 85669, 26864, 70141, 81625, 34240, 45783, 3066, 82458, 18956, 92326, 18570, 35262, 331, 5842, 25422, 63234, 35117, 34277, 10055, 55361, 6625, 9926, 8591, 45770, 17822, 59558, 20655, 56458, 57636, 71371, 68481, 26515, 164, 67507, 92042, 70122, 80230, 17465, 60715, 72002, 83289, 54035, 84181, 1169, 92632, 97884, 1758, 86141, 76118, 8050, 86179, 48905, 49283, 49945, 42762, 96052, 40687, 11840, 61480, 55020, 60762, 26926, 87440, 43642, 15003, 66187, 61272, 26756, 1232, 16992, 28246, 72263, 51125, 51552, 19668, 87619, 65234, 36717, 5289, 24319, 11365, 39077, 80255, 75339, 40446, 60242, 24844, 3169, 66855, 21730, 96052, 86220, 36917, 36411, 76142, 47497, 24462, 30379, 91600, 86062, 46286, 39125, 1795, 5415, 92287, 50277, 8800, 70656, 18556, 74539, 78015, 65543, 21301, 77, 74429, 64189, 60743, 89565, 40897, 44300, 70809, 9144, 54573, 910, 27892, 69180, 70076, 37969, 86459, 26868, 49605, 68216, 60785, 16989, 46621, 38816, 49374, 43833, 64654, 70153, 43506, 80000, 36768, 80522, 41831, 37481, 15485, 72233, 8469, 38065, 97395, 55970, 14055, 94372, 55913, 72358, 68797, 40960, 47226, 62730, 71918, 56861, 62665, 21492, 66838, 91514, 41610, 86514, 66215, 47177, 2715, 50890, 26001, 2068, 49783, 14930, 60240, 83138, 50936, 51354, 70155, 61325, 26075, 59829, 65332, 2195, 13916, 89085, 97753, 80642, 49783, 14930, 57537, 18018, 79191, 2105, 2456, 86594, 97122, 40673, 54253, 80206, 5320, 96207, 72893, 2237, 39577, 96760, 40427, 3853, 84768, 9088, 34520, 26747, 52105, 55612, 70830, 8037, 47596, 47960, 46922, 10034, 50271, 64719, 13585, 16816, 73629, 89790, 16320, 57637, 83451, 29557, 36110, 92994, 18851, 5415, 92287, 88217, 75458, 16100, 52656, 40340, 27584, 30243, 13259, 1552, 33190, 97243, 35040, 44650, 82519, 37554, 78625, 22137, 83819, 98565, 44020, 87278, 75188, 50752, 690, 85342, 44310, 32429, 40565, 47270, 74319, 40055, 65661, 5464, 12976, 34152, 29016, 8450, 10749, 99194, 9535, 54448, 2509, 43356, 45474, 91145, 34640, 26778, 57402, 93525, 94725, 44052, 58593, 98170, 63434, 48894, 11972, 78640, 20613, 60980, 79830, 31945, 62665, 1062, 94580, 16059, 39293, 57791, 11452, 24144, 29128, 10681, 92018, 16274, 36057, 56317, 73408, 31749, 17846, 26317, 22733, 56689, 31572, 98826, 19920, 92958, 39850, 41683, 52451, 35136, 90837, 76831, 38322, 98609, 28091, 53286, 16252, 62211, 21983, 9566, 60689, 38379, 71683, 97834, 38117, 1014, 26288, 53452, 98435, 53375, 44045, 97843, 79596, 68887, 50932, 41814, 11238, 47097, 77024, 52027, 60769, 59630, 28946, 86310, 19885, 78985, 55317, 98485, 65067, 21625, 3586, 76048, 57717, 946, 74670, 14107, 45466, 20295, 78705, 86459, 26868, 49605, 79549, 60785, 16989, 46621, 38816, 49374, 91612, 64654, 70153, 43506, 97455, 83949, 85689, 14253, 77181, 24982, 66904, 64643, 61710, 63581, 52916, 53089, 78968, 7930, 61179, 95218, 81426, 32620, 29155, 35158, 238, 86374, 63312, 24941, 70004, 34251, 17011, 39230, 91630, 43276, 80284, 39144, 7133, 53089, 65799, 6075, 39325, 65917, 80642, 17614, 4367, 57836, 6182, 23251, 57227, 74867, 69715, 15580, 95646, 66468, 82258, 79709, 12507, 21710, 37189, 59565, 58302, 35150, 20850, 2706, 70863, 37198, 32026, 75517, 57298, 78294, 999, 70574, 33977, 40950, 42289, 60205, 26667, 81788, 12873, 49783, 14930, 68503, 19208, 27040, 46778, 51501, 17703, 84755, 97949, 3853, 95745, 44308, 73493, 4085, 97058, 91613, 78682, 62067, 20953, 20997, 50330, 4863, 14905, 91805, 14211, 82919, 45740, 74820, 54112, 21600, 28329, 31545, 56844, 85758, 57210, 43399, 92196, 20594, 58911, 58219, 61917, 23975, 64405, 73339, 40386, 46067, 42725, 47177, 53880, 87926, 32034, 79382, 86216, 59918, 87895, 92805, 59829, 1921, 51024, 24918, 82580, 609, 66606, 5755, 62070, 33603, 34732, 8129, 67707, 98438, 77015, 93024, 5716, 75222, 42227, 88190, 19506, 34125, 37290, 32224, 76148, 59267, 25900, 33442, 94323, 56125, 72720, 64094, 5452, 87930, 18197, 40199, 180, 82128, 54495, 40310, 46283, 4781, 9780, 44819, 41124, 63977, 4764, 40960, 4333, 88977, 62665, 52001, 56612, 63130, 2341, 80642, 90586, 74747, 92888, 52582, 79473, 13641, 86219, 10175, 91850, 12130, 80106, 9006, 46055, 50956, 25782, 48720, 63968, 40037, 92860, 57447, 64915, 2044, 44953, 55058, 32790, 30204, 39187, 18735, 43565, 81435, 43514, 36, 61856, 74539, 78015, 65543, 21301, 77, 79050, 8209, 78221, 59281, 50517, 61570, 72567, 42092, 76586, 83008, 50206, 3653, 34246, 9092, 49266, 14144, 72567, 34275, 78112, 14905, 53204, 65119, 25450, 37469, 66901, 71516, 7479, 96590, 52668, 52808, 11913, 67891, 77016, 4218, 74355, 70295, 79512, 42951, 9877, 6031, 93610, 31204, 68008, 28645, 35633, 23753, 67814, 40815, 59153, 62703, 97970, 3553, 65943, 68598, 95101, 1368, 50396, 98199, 6697, 84932, 47402, 88166, 71439, 50570, 16223, 65501, 37501, 92259, 34321, 13388, 69374, 42121, 78665, 45278, 38513, 15944, 29273, 11049, 92465, 29475, 78991, 40960, 837, 52019, 70595, 43145, 78234, 23290, 3, 96618, 44462, 42236, 95629, 87139, 21528, 21024, 18785, 80415, 275, 38473, 46826, 66076, 70894, 99764, 30018, 70857, 44303, 76862, 82220, 77949, 55028, 36183, 64785, 92653, 4410, 71428, 72282, 58025, 44741, 70980, 83188, 23734, 66826, 61180, 85457, 75982, 64824, 60297, 11168, 63493, 51317, 2377, 68955, 27117, 68020, 73052, 69328, 98115, 68477, 92550, 4538, 68819, 66222, 6415, 77466, 72340, 11327, 38374, 55834, 12375, 55361, 18388, 12035, 71428, 14053, 91375, 9630, 25852, 47258, 81058, 66459, 51820, 12621, 18388, 7252, 758, 12741, 99935, 42047, 20948, 39879, 15923, 80013, 71980, 2174, 52140, 61582, 65705, 8228, 90145, 58561, 73205, 25513, 25347, 2552, 15887, 37922, 60271, 73144, 17145, 95814, 14533, 39879, 67638, 77751, 61917, 59781, 79117, 82310, 82175, 46721, 3060, 41702, 58655, 80288, 91390, 67552, 15389, 31303, 67415, 68664, 57825, 31391, 62788, 11766, 31129, 8130, 8062, 78683, 42248, 6799, 86303, 60975, 45392, 66600, 54407, 23955, 91485, 26229, 64161, 82418, 98497, 56502, 77185, 70777, 62497, 95822, 92203, 92673, 26696, 54429, 31728, 61666, 26733, 49547, 21498, 31730, 47912, 82700, 41530, 64200, 77878, 93211, 7615, 8297, 56792, 41590, 51915, 86809, 34680, 8347, 42691, 67231, 88909, 96006, 85429, 63369, 55858, 94822, 20718, 8132, 12281, 64160, 42140, 16269, 57725, 26021, 31749, 46602, 25658, 24806, 56103, 95673, 15835, 92172, 1281, 68080, 36218, 15170, 32272, 35401, 51297, 83749, 49664, 70285, 74122, 83635, 19719, 46828, 17197, 87529, 20409, 65435, 48734, 68679, 28892, 62827, 7857, 83016, 30384, 54797, 59391, 14355, 51205, 85224, 95966, 16147, 93867, 54679, 80789, 70257, 60496, 559, 80247, 88802, 32253, 39040, 16932, 9851, 31183, 26174, 77624, 65034, 88276, 3791, 27242, 60911, 31156, 40488, 52702, 22629, 14185, 51937, 48040, 49824, 97919, 99991, 26094, 34533, 22570, 48589, 18450, 50329, 33757, 56995, 34207, 90683, 17484, 86334, 9483, 53636, 14772, 58797, 95529, 5335, 83925, 30713, 4592, 13841, 38211, 83323, 48474, 57901, 43398, 42807, 88057, 10188, 98017, 77507, 81108, 12947, 43398, 28292, 32001, 68706, 11053, 95018, 94319, 70354, 67224, 55359, 36223, 6731, 84506, 74281, 76339, 70862, 63486, 27431, 85625, 91459, 42169, 7865, 17391, 37263, 10886, 9108, 36491, 44353, 76578, 14776, 98021, 96604, 70255, 99612, 86229, 13295, 33183, 95259, 38794, 88909, 96540, 94545, 75055, 30693, 98207, 69383, 62661, 5540, 29943, 53147, 67934, 71225, 84563, 17518, 30874, 27775, 76539, 18312, 2458, 61749, 13227, 54344, 56119, 1732, 19145, 11076, 31962, 41906, 451, 59346, 98901, 72967, 29817, 85497, 67965, 67312, 54194, 30430, 14639, 58327, 6425, 36461, 70468, 7709, 82726, 37403, 76468, 26416, 44462, 57544, 75285, 36982, 15675, 20372, 6239, 37630, 45573, 58090, 44420, 79853, 91914, 99485, 3199, 92526, 62572, 19456, 58588, 85543, 22879, 6906, 53889, 4083, 5164, 58027, 82624, 13430, 87367, 5767, 34895, 55952, 40899, 95350, 65587, 31707, 22484, 14314, 66518, 4073, 10408, 88764, 99783, 36121, 69618, 89858, 78870, 14764, 50521, 60280, 59315, 95882, 23998, 95466, 22923, 57056, 61757, 70511, 80269, 28883, 9642, 1376, 37519, 24038, 44777, 17162, 28853, 6137, 4365, 44254, 87790, 96503, 8071, 31452, 35316, 85289, 73677, 90595, 20118, 5945, 38323, 5352, 87948, 80861, 16846, 96524, 23083, 44993, 65709, 38064, 346, 13103, 11141, 8442, 8614, 52280, 44590, 81222, 83352, 37968, 54115, 99746, 23058, 87995, 29623, 4857, 43827, 91091, 90922, 42324, 86124, 42361, 26064, 41047, 42590, 436, 31298, 85562, 35340, 32682, 54619, 52800, 50091, 30147, 5706, 75673, 94162, 95835, 31102, 50645, 48036, 54486, 65374, 59943, 60603, 28132, 78474, 37340, 31595, 39973, 96234, 45266, 5157, 93486, 56910, 83235, 94838, 59428, 68967, 39922, 81474, 37481, 99273, 58776, 38395, 96691, 1086, 57103, 3012, 14906, 3344, 80822, 30171, 2144, 10466, 19066, 68053, 61503, 75119, 20960, 93412, 13656, 50322, 87760, 10503, 32457, 17108, 59453, 23941, 64073, 58639, 38413, 74779, 69255, 17705, 26866, 41823, 43430, 25891, 4697, 69841, 48118, 81560, 62659, 3815, 30697, 43281, 10090, 27261, 93509, 21440, 92997, 56125, 53065, 35494, 83518, 92730, 90875, 54604, 73823, 21765, 40121, 44051, 3696, 34607, 21328, 33565, 51921, 81284, 48893, 48993, 6462, 86117, 4625, 33623, 20626, 44864, 29736, 90849, 41159, 3607, 616, 45721, 13357, 82034, 77083, 31532, 53021, 61520, 68452, 11850, 59380, 16109, 6765, 17447, 94885, 41789, 48622, 65754, 85059, 8400, 71589, 48294, 63416, 22593, 6739, 68186, 197, 50741, 41427, 2126, 9108, 41333, 42067, 73767, 68535, 90668, 10752, 2551, 61138, 48985, 98912, 99135, 25761, 58839, 35167, 38903, 73996, 51805, 59045, 84921, 36407, 28731, 51695, 90699, 37021, 91907, 8482, 89197, 56728, 34075, 29097, 61031, 17579, 28736, 23449, 22907, 2239, 99417, 2664, 52640, 60911, 66647, 26097, 47475, 75898, 32969, 25332, 60088, 60324, 66090, 52724, 61787, 36102, 10382, 13285, 27033, 46746, 84766, 26708, 88572, 77797, 23086, 43776, 72807, 52384, 4935, 96121, 89207, 81837, 56441, 93466, 29185, 95501, 58807, 93830, 57003, 12743, 60209, 30331, 76952, 48135, 44523, 63308, 23350, 31232, 93404, 31976, 73979, 55963, 86442, 88335, 41637, 19061, 69605, 54397, 46460, 24537, 2726, 52598, 93665, 2346, 58473, 16820, 56886, 97519, 6858]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 2) (<digit> 9)))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 6) (<digit> 8)))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 2) (<digit> 2)))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 5) (<digit> 8)))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 7) (<digit> 2)))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 3)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 7) (<digit> 2)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 3) (<digit> 5)))  )))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 0)))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 1) (<digit> 7)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 6)))  ))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 9) (<digit> 5)))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y)))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 7) (<digit> 7)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))  )))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 8)))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 6))))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 9) (<digit> 1))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 9) (<digit> 3)))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 8) (<digit> 7)))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 5) (<digit> 5)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 3) (<digit> 6)))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 1)))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 8) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 0) (<digit> 0)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 9) (<digit> 9)))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 9) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))))  else  (<expr> (<action> 'LINKS'))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 5) (<digit> 9)))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 9) (<digit> 1)))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 2) (<digit> 9)))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> obstacle_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> >)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 1) (<digit> 7))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 7) (<digit> 2)))   (<comp_op> >=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))))  else  (<expr> (<action> 'RECHTS'))))))))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 5) (<digit> 2)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 4) (<digit> 8)))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 7) (<digit> 2)))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 1) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 5) (<digit> 8)))   (<math_op> *)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 4) (<digit> 5)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 8) (<digit> 7)))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 4) (<digit> 7)))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))  ))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 9) (<digit> 3)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 9)))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 0) (<digit> 5)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 8) (<digit> 0)))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 3) (<digit> 8)))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 5) (<digit> 7)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 3) (<digit> 7)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 0) (<digit> 5)))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 9) (<digit> 8)))  ))  ))  ))  ))  ))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 1)))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 2) (<digit> 1)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))))  else  (<expr> (<action> 'LINKS'))))

Fitness:
8.670564261241932