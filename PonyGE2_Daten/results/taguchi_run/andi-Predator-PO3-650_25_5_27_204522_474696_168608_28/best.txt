Generation:
50

Phenotype:
'LINKS' if ( not hypot( p_div( hypot( hypot( -2.20 , ( intersect_centers_x * obstacle_y ) ) , ( p_div( intersect_radius , velocity_x ) + p_div( intersect_centers_y , obstacle_x ) ) ) , velocity_y ) , hypot( p_div( 7.31 , hypot( 2.60 , intersect_centers_y ) ) , intersect_centers_y ) ) <= -5.59 and not p_div( p_div( ( -0.40 + ( velocity_y + 7.18 ) ) , hypot( ( hypot( obstacle_y , p_div( intersect_centers_y , velocity_x ) ) * ( p_div( obstacle_x , obstacle_x ) - obstacle_y ) ) , 5.54 ) ) , ( obstacle_x - ( p_div( -9.41 , 2.23 ) + ( intersect_centers_x + obstacle_y ) ) ) ) <= p_div( 4.86 , hypot( p_div( hypot( hypot( intersect_centers_x , -1.64 ) , 8.22 ) , 2.01 ) , hypot( intersect_centers_y , ( hypot( intersect_centers_x , obstacle_x ) + ( hypot( obstacle_x , obstacle_x ) * hypot( obstacle_x , velocity_y ) ) ) ) ) ) or ( not not not velocity_x < intersect_centers_x or hypot( ( hypot( intersect_centers_y , velocity_y ) * intersect_radius ) , p_div( hypot( intersect_radius , obstacle_y ) , -4.32 ) ) >= p_div( 6.73 , intersect_radius ) and not not not p_div( velocity_y , obstacle_y ) < hypot( velocity_x , obstacle_y ) ) ) or ( ( hypot( hypot( p_div( obstacle_x , p_div( p_div( velocity_x , hypot( hypot( -9.98 , p_div( obstacle_y , velocity_x ) ) , obstacle_y ) ) , ( hypot( p_div( velocity_y , hypot( velocity_x , obstacle_x ) ) , velocity_x ) + p_div( -6.99 , hypot( hypot( intersect_radius , obstacle_y ) , intersect_centers_y ) ) ) ) ) , intersect_centers_y ) , p_div( hypot( p_div( -2.98 , velocity_y ) , p_div( hypot( -3.46 , 0.53 ) , hypot( hypot( p_div( p_div( intersect_centers_y , velocity_x ) , p_div( velocity_x , intersect_centers_x ) ) , p_div( hypot( intersect_radius , intersect_centers_y ) , ( velocity_x + velocity_y ) ) ) , hypot( 8.25 , p_div( -9.41 , 6.69 ) ) ) ) ) , 0.76 ) ) - hypot( p_div( hypot( p_div( 3.31 , -8.32 ) , intersect_centers_x ) , hypot( 9.54 , -6.44 ) ) , ( intersect_centers_x * hypot( hypot( intersect_radius , ( hypot( intersect_radius , p_div( intersect_centers_y , obstacle_x ) ) - velocity_x ) ) , hypot( obstacle_x , ( 1.24 + hypot( -4.33 , p_div( intersect_centers_x , obstacle_x ) ) ) ) ) ) ) ) <= obstacle_x ) or ( ( ( velocity_y + obstacle_x ) != hypot( intersect_centers_x , intersect_centers_y ) or obstacle_y < obstacle_x and not intersect_centers_x >= velocity_x and p_div( ( intersect_radius + intersect_radius ) , p_div( obstacle_x , intersect_centers_x ) ) >= ( -6.13 - ( obstacle_y * velocity_x ) ) or ( velocity_x > velocity_y ) ) and hypot( hypot( -5.10 , -9.68 ) , -4.47 ) == intersect_centers_x ) and not ( ( not not velocity_y <= obstacle_x ) and velocity_x > hypot( p_div( p_div( ( -5.30 * p_div( velocity_y , velocity_x ) ) , obstacle_y ) , intersect_centers_x ) , ( hypot( -9.79 , p_div( ( ( obstacle_y - obstacle_y ) - p_div( velocity_x , intersect_centers_x ) ) , ( p_div( intersect_centers_x , intersect_centers_x ) - p_div( obstacle_x , intersect_radius ) ) ) ) - ( p_div( p_div( ( intersect_centers_x * velocity_y ) , 7.11 ) , -0.99 ) + intersect_centers_y ) ) ) or p_div( hypot( hypot( ( hypot( p_div( 3.41 , ( intersect_centers_x + velocity_y ) ) , hypot( p_div( intersect_centers_y , intersect_centers_y ) , velocity_x ) ) - ( p_div( ( intersect_radius - intersect_centers_x ) , p_div( intersect_centers_y , intersect_centers_y ) ) * intersect_centers_y ) ) , p_div( hypot( -2.22 , intersect_radius ) , p_div( ( hypot( intersect_radius , velocity_x ) * p_div( obstacle_y , velocity_x ) ) , intersect_radius ) ) ) , 0.53 ) , ( ( hypot( hypot( -1.92 , hypot( hypot( velocity_y , velocity_y ) , hypot( obstacle_y , velocity_x ) ) ) , -9.10 ) + ( ( ( p_div( intersect_centers_x , obstacle_y ) + ( intersect_radius - intersect_centers_y ) ) - p_div( hypot( intersect_radius , obstacle_x ) , hypot( intersect_centers_x , intersect_centers_x ) ) ) * p_div( p_div( p_div( obstacle_x , intersect_centers_x ) , p_div( intersect_centers_y , velocity_x ) ) , p_div( velocity_y , p_div( obstacle_x , intersect_radius ) ) ) ) ) * p_div( p_div( 9.40 , hypot( ( hypot( intersect_centers_x , intersect_radius ) - p_div( obstacle_x , velocity_x ) ) , p_div( ( intersect_centers_x - obstacle_x ) , 9.72 ) ) ) , velocity_y ) ) ) <= intersect_centers_x ) and -9.70 >= intersect_centers_y and hypot( hypot( intersect_centers_y , ( hypot( ( hypot( ( intersect_centers_y - ( velocity_y - hypot( 5.39 , velocity_y ) ) ) , ( p_div( -9.27 , -7.91 ) - ( hypot( hypot( velocity_x , hypot( ( intersect_centers_y - obstacle_x ) , p_div( velocity_x , velocity_x ) ) ) , p_div( hypot( p_div( intersect_centers_x , intersect_radius ) , intersect_radius ) , obstacle_x ) ) + 4.03 ) ) ) + -3.36 ) , ( 6.33 * p_div( p_div( hypot( 2.40 , ( ( velocity_x * intersect_radius ) + ( intersect_radius + -8.93 ) ) ) , p_div( p_div( hypot( hypot( -9.26 , ( intersect_centers_x + obstacle_x ) ) , hypot( hypot( velocity_x , intersect_centers_x ) , ( intersect_centers_x - obstacle_x ) ) ) , intersect_centers_x ) , hypot( velocity_y , 2.59 ) ) ) , 1.71 ) ) ) - -8.81 ) ) , intersect_centers_x ) > p_div( velocity_y , -3.38 ) or direction else 'LINKS' if direction and ( hypot( p_div( intersect_centers_y , hypot( hypot( -8.41 , ( intersect_centers_y * velocity_x ) ) , 3.04 ) ) , 9.97 ) != -3.88 and not not p_div( -1.08 , -9.37 ) <= 3.02 and ( ( ( p_div( hypot( obstacle_y , p_div( -4.56 , ( obstacle_y - obstacle_x ) ) ) , -1.00 ) * hypot( hypot( ( 1.55 - hypot( intersect_radius , intersect_centers_y ) ) , velocity_x ) , ( 7.74 - p_div( p_div( velocity_x , obstacle_x ) , p_div( intersect_centers_y , velocity_y ) ) ) ) ) - p_div( obstacle_x , p_div( ( ( p_div( obstacle_x , velocity_y ) + intersect_centers_y ) + hypot( hypot( velocity_x , intersect_centers_y ) , -7.02 ) ) , 0.85 ) ) ) - obstacle_y ) >= ( hypot( obstacle_x , -7.85 ) - 1.80 ) and not hypot( p_div( 0.70 , p_div( ( ( -8.06 + ( -8.07 - hypot( velocity_y , obstacle_x ) ) ) + -8.24 ) , hypot( 2.09 , ( -3.39 - 4.85 ) ) ) ) , obstacle_y ) < ( hypot( p_div( hypot( velocity_y , hypot( obstacle_x , hypot( hypot( intersect_centers_x , intersect_centers_x ) , 1.77 ) ) ) , ( intersect_radius + p_div( hypot( hypot( velocity_y , obstacle_y ) , ( velocity_y * obstacle_y ) ) , hypot( ( intersect_centers_x + intersect_centers_y ) , velocity_x ) ) ) ) , p_div( hypot( -6.27 , -0.94 ) , p_div( ( hypot( hypot( intersect_centers_y , obstacle_x ) , intersect_centers_x ) * p_div( velocity_y , intersect_centers_x ) ) , 7.22 ) ) ) + p_div( hypot( -8.92 , p_div( p_div( velocity_y , 4.62 ) , 1.02 ) ) , -4.16 ) ) or not ( ( ( -1.34 + intersect_radius ) + -7.27 ) - ( ( p_div( p_div( obstacle_x , intersect_centers_x ) , 4.07 ) + ( ( velocity_y + velocity_y ) + ( intersect_centers_x * intersect_centers_y ) ) ) + p_div( intersect_centers_x , ( velocity_y - ( intersect_centers_x * intersect_centers_y ) ) ) ) ) <= hypot( p_div( 5.64 , -8.26 ) , 6.94 ) and not obstacle_x <= 1.95 and not not velocity_y != obstacle_y and ( velocity_x <= velocity_x and not intersect_radius != intersect_radius and obstacle_y == p_div( obstacle_x , hypot( velocity_y , velocity_x ) ) or 6.33 != hypot( ( velocity_x - obstacle_y ) , ( obstacle_y + intersect_centers_y ) ) and ( obstacle_y < obstacle_x ) or ( obstacle_x <= obstacle_x ) and ( intersect_radius <= intersect_centers_y and obstacle_x < hypot( velocity_x , obstacle_x ) ) or ( p_div( velocity_x , velocity_x ) <= hypot( intersect_centers_x , obstacle_y ) and not not obstacle_y >= obstacle_x ) or hypot( ( -8.51 + -9.48 ) , hypot( ( ( ( obstacle_x - velocity_y ) - p_div( obstacle_y , intersect_centers_y ) ) * ( hypot( intersect_centers_y , intersect_radius ) + hypot( velocity_x , intersect_radius ) ) ) , 2.32 ) ) > intersect_centers_y and obstacle_y != p_div( ( p_div( obstacle_x , hypot( hypot( intersect_centers_y , p_div( velocity_x , obstacle_x ) ) , hypot( obstacle_x , p_div( velocity_y , obstacle_x ) ) ) ) - ( hypot( hypot( 9.78 , p_div( intersect_centers_x , intersect_centers_y ) ) , hypot( ( obstacle_y * velocity_y ) , p_div( obstacle_y , intersect_centers_y ) ) ) * hypot( p_div( ( velocity_y - intersect_centers_x ) , hypot( intersect_centers_x , intersect_centers_x ) ) , hypot( intersect_centers_x , ( obstacle_x * velocity_y ) ) ) ) ) , intersect_centers_y ) ) or not not ( not hypot( hypot( intersect_radius , 5.17 ) , hypot( ( -2.49 + hypot( obstacle_y , velocity_y ) ) , ( obstacle_x * p_div( intersect_centers_x , intersect_centers_x ) ) ) ) <= p_div( 0.06 , hypot( hypot( intersect_centers_y , velocity_y ) , p_div( ( velocity_y * obstacle_x ) , obstacle_x ) ) ) ) ) and p_div( p_div( hypot( -4.22 , -5.94 ) , velocity_x ) , ( obstacle_y - -1.64 ) ) != 6.70 or hypot( intersect_centers_y , hypot( ( ( p_div( obstacle_x , -9.59 ) - 4.30 ) + velocity_x ) , ( ( velocity_x * hypot( ( hypot( 7.28 , p_div( ( ( -4.95 - intersect_centers_x ) - obstacle_y ) , p_div( hypot( hypot( -3.18 , intersect_centers_x ) , p_div( obstacle_y , p_div( ( p_div( obstacle_y , intersect_centers_y ) - p_div( intersect_centers_y , obstacle_y ) ) , intersect_centers_x ) ) ) , hypot( hypot( ( obstacle_y - -9.09 ) , -3.53 ) , intersect_centers_y ) ) ) ) * ( intersect_centers_y + hypot( hypot( p_div( -5.77 , ( ( p_div( p_div( -0.57 , obstacle_x ) , hypot( intersect_centers_y , ( intersect_centers_x + intersect_centers_y ) ) ) + hypot( hypot( -0.88 , obstacle_y ) , hypot( 5.00 , -5.94 ) ) ) + hypot( hypot( -5.39 , 4.14 ) , p_div( p_div( hypot( velocity_x , obstacle_y ) , obstacle_x ) , ( p_div( obstacle_y , velocity_x ) * ( velocity_x - obstacle_x ) ) ) ) ) ) , ( hypot( p_div( velocity_x , obstacle_y ) , p_div( p_div( -3.47 , p_div( 3.97 , hypot( obstacle_y , velocity_x ) ) ) , p_div( p_div( intersect_centers_y , p_div( obstacle_y , velocity_y ) ) , hypot( hypot( obstacle_x , velocity_y ) , intersect_centers_y ) ) ) ) - obstacle_x ) ) , 7.06 ) ) ) , hypot( hypot( ( p_div( 7.14 , hypot( p_div( 8.96 , ( p_div( -3.76 , hypot( intersect_centers_x , p_div( obstacle_y , obstacle_y ) ) ) - velocity_y ) ) , 8.29 ) ) - hypot( hypot( ( -3.30 + p_div( velocity_y , obstacle_y ) ) , hypot( intersect_radius , hypot( ( ( intersect_centers_x + obstacle_y ) * ( velocity_y - velocity_y ) ) , p_div( ( intersect_centers_y * obstacle_y ) , hypot( obstacle_y , velocity_y ) ) ) ) ) , ( p_div( p_div( intersect_centers_x , ( hypot( obstacle_y , velocity_x ) - p_div( velocity_y , intersect_radius ) ) ) , hypot( obstacle_x , ( hypot( intersect_centers_x , velocity_x ) + p_div( obstacle_x , intersect_centers_x ) ) ) ) + ( ( -3.06 + hypot( hypot( intersect_centers_y , velocity_y ) , velocity_y ) ) * -0.15 ) ) ) ) , ( p_div( ( ( obstacle_x * hypot( ( intersect_centers_y - hypot( hypot( obstacle_x , obstacle_x ) , ( obstacle_y - velocity_x ) ) ) , 7.89 ) ) + obstacle_y ) , p_div( intersect_radius , p_div( velocity_y , -5.38 ) ) ) + hypot( hypot( intersect_centers_x , 5.63 ) , hypot( 6.48 , hypot( ( hypot( obstacle_y , obstacle_y ) + obstacle_x ) , intersect_centers_y ) ) ) ) ) , ( obstacle_y - p_div( ( 2.29 * velocity_y ) , -2.38 ) ) ) ) ) + intersect_radius ) ) ) <= 5.36 else 'RECHTS' if direction and not ( not ( velocity_x <= velocity_x ) ) or not 7.76 == ( ( 7.36 + p_div( p_div( -6.45 , -9.89 ) , ( hypot( p_div( intersect_radius , obstacle_x ) , p_div( ( obstacle_y - velocity_y ) , obstacle_y ) ) + velocity_x ) ) ) * hypot( hypot( intersect_radius , p_div( hypot( -7.21 , ( ( velocity_y + obstacle_y ) * ( intersect_radius + intersect_radius ) ) ) , 4.20 ) ) , -0.35 ) ) and p_div( 4.49 , obstacle_y ) < velocity_x else 'RECHTS' if direction and not ( velocity_y >= 3.03 or not ( obstacle_y >= velocity_x or not velocity_y < velocity_x ) or not not velocity_y < intersect_centers_x and not p_div( ( velocity_y * intersect_centers_y ) , hypot( velocity_x , intersect_centers_y ) ) < hypot( ( velocity_y - obstacle_y ) , -6.15 ) and ( not obstacle_y < velocity_x ) and ( obstacle_x == velocity_y or ( obstacle_x * obstacle_x ) != ( obstacle_x * velocity_x ) or not intersect_centers_x != velocity_x and intersect_radius != hypot( p_div( intersect_centers_x , velocity_x ) , 0.32 ) ) and p_div( p_div( hypot( -4.22 , -3.51 ) , velocity_x ) , ( obstacle_y - -1.64 ) ) != 6.70 ) or ( hypot( 0.73 , -4.54 ) - hypot( hypot( ( p_div( ( obstacle_y + p_div( -2.08 , -1.45 ) ) , -9.64 ) * -1.61 ) , -8.53 ) , -8.38 ) ) >= p_div( p_div( 8.20 , intersect_centers_x ) , -6.48 ) else 'LINKS' if ( -6.34 + p_div( ( intersect_radius * hypot( ( hypot( intersect_centers_y , hypot( 9.47 , ( ( ( ( ( ( velocity_x + obstacle_y ) + -0.12 ) * obstacle_x ) * 3.10 ) * obstacle_y ) - hypot( p_div( -4.29 , ( -7.38 - 1.39 ) ) , ( hypot( velocity_y , -4.36 ) + ( 1.84 * velocity_x ) ) ) ) ) ) + ( p_div( 1.98 , velocity_x ) - -3.10 ) ) , intersect_centers_y ) ) , 0.61 ) ) > intersect_radius or direction else 'RECHTS' if ( ( intersect_centers_x >= p_div( hypot( velocity_y , intersect_radius ) , p_div( velocity_x , obstacle_x ) ) ) or not 8.79 != intersect_radius ) and not hypot( -0.51 , ( hypot( ( intersect_centers_y + ( obstacle_y - -3.97 ) ) , ( 9.14 - intersect_radius ) ) * ( p_div( ( p_div( hypot( 0.99 , p_div( intersect_centers_x , intersect_centers_y ) ) , hypot( hypot( intersect_centers_x , intersect_centers_y ) , -9.73 ) ) - 2.62 ) , -9.25 ) * ( obstacle_y * hypot( -1.98 , hypot( p_div( hypot( obstacle_y , intersect_radius ) , hypot( obstacle_x , intersect_centers_y ) ) , p_div( -2.43 , velocity_y ) ) ) ) ) ) ) < hypot( hypot( -1.00 , hypot( velocity_x , intersect_centers_x ) ) , ( 6.64 * 4.07 ) ) and ( not ( -9.70 >= intersect_centers_y and not not intersect_centers_x < intersect_radius and ( velocity_x != velocity_x ) and not -9.89 >= -3.76 ) ) or direction else 'RECHTS' if not not not not ( hypot( p_div( obstacle_y , velocity_x ) , intersect_radius ) + intersect_centers_x ) < intersect_radius and not p_div( -1.96 , -5.07 ) < ( ( ( obstacle_x + 5.24 ) - p_div( intersect_centers_y , ( -9.23 + 9.36 ) ) ) + intersect_centers_y ) or direction else 'LINKS'

Genotype:
[75571, 99660, 6010, 65699, 32911, 50057, 49578, 60869, 85039, 56322, 57242, 48458, 3419, 60312, 19581, 42958, 60370, 63828, 73084, 44423, 29717, 27973, 76988, 80571, 81962, 34869, 49852, 34542, 91490, 98039, 67240, 19677, 12374, 25300, 19233, 31119, 89387, 19635, 42240, 73150, 89969, 72783, 83412, 33775, 18789, 38575, 54127, 5180, 45240, 95043, 45762, 49661, 87360, 42888, 25677, 87563, 48001, 69138, 44246, 57800, 7850, 19982, 70806, 97060, 86595, 96454, 28455, 1821, 87951, 35276, 22007, 98293, 73445, 66385, 3549, 33115, 19770, 29922, 2937, 53112, 48519, 17916, 55688, 64163, 92270, 51934, 44880, 47565, 36834, 46705, 90180, 83688, 11411, 64493, 53206, 85337, 98671, 81428, 70238, 30289, 14438, 46225, 86678, 52712, 84890, 72038, 99950, 94547, 49025, 33959, 4062, 65310, 67455, 64715, 14850, 60742, 3825, 98613, 94006, 93037, 46236, 15415, 5915, 18884, 41059, 17795, 26456, 32530, 97549, 12152, 73566, 68572, 55241, 17609, 86394, 32171, 12171, 7993, 50090, 27682, 30482, 8153, 34164, 40219, 9495, 56959, 57372, 52985, 84165, 37773, 47077, 78931, 85207, 28100, 38724, 5948, 20106, 14773, 3277, 98893, 95698, 46810, 42462, 35661, 18664, 95259, 98331, 32246, 94074, 32551, 14179, 18620, 17408, 13602, 39122, 67531, 53689, 57764, 36232, 42390, 68451, 39738, 33690, 64793, 83919, 45788, 98390, 48545, 58960, 60868, 95832, 40244, 8698, 6880, 49710, 92480, 65880, 82913, 48028, 80750, 12911, 89640, 85329, 64964, 17852, 34423, 51128, 53712, 39097, 86293, 59098, 31383, 45119, 34570, 66379, 16669, 18610, 96222, 67521, 5196, 96384, 34048, 72013, 97389, 30598, 10070, 6721, 99985, 11591, 85706, 61755, 1437, 14307, 93098, 74390, 69869, 62375, 44979, 47146, 72603, 2825, 11774, 36093, 44922, 56204, 80377, 80706, 2073, 45420, 42546, 75577, 38733, 82775, 70296, 42370, 57403, 90049, 95466, 53192, 11162, 16595, 38625, 77145, 31252, 76201, 67543, 84520, 6858, 22675, 18813, 50012, 88253, 47844, 87848, 83022, 85223, 29494, 94223, 99883, 53227, 32490, 51201, 73387, 45727, 17430, 29832, 82858, 80893, 71181, 51500, 11167, 87609, 72509, 3728, 18557, 54255, 90444, 96015, 85139, 13460, 93524, 83339, 99968, 2087, 92215, 94982, 8623, 11615, 27179, 67850, 11756, 31920, 18163, 16812, 11247, 29596, 41964, 96565, 43996, 77239, 77509, 44758, 50508, 16950, 98653, 72805, 36292, 12670, 92821, 53850, 56246, 54647, 77468, 75152, 6436, 87187, 71169, 15422, 17009, 52238, 87505, 68725, 26227, 72728, 53146, 41631, 25105, 77443, 68974, 52476, 48166, 21804, 4836, 31010, 32045, 29193, 34088, 60133, 41437, 55367, 46275, 23318, 48645, 70033, 44217, 10650, 22615, 97260, 92386, 11142, 24153, 86395, 43269, 58430, 12587, 98884, 13115, 52771, 79719, 38860, 99742, 11978, 39521, 87707, 82002, 43458, 8212, 81585, 66882, 30891, 87261, 43367, 57909, 23374, 43201, 53391, 78490, 79396, 28536, 39976, 63069, 16221, 41024, 86386, 54200, 26067, 22446, 64588, 62813, 40847, 41863, 9902, 85756, 24215, 25482, 50673, 59543, 92481, 80696, 74170, 67621, 65088, 92413, 62452, 49195, 52738, 37768, 24956, 46914, 8382, 54459, 98995, 46084, 11536, 9986, 16503, 85156, 17134, 51584, 28279, 99150, 69104, 76751, 80153, 20578, 15535, 4524, 13114, 80038, 24475, 1479, 10947, 84935, 62910, 89360, 18903, 39142, 15835, 42887, 8978, 83370, 64417, 42044, 61826, 15177, 72374, 24291, 85922, 10264, 43704, 55223, 7846, 15867, 54665, 19934, 34203, 24353, 52402, 14870, 88620, 12905, 97051, 62775, 93500, 41646, 95635, 25643, 24639, 22414, 82100, 81326, 65983, 7766, 86855, 76471, 5601, 70972, 39764, 5550, 83539, 56159, 43955, 31177, 29628, 92775, 42367, 13709, 78568, 41300, 80360, 35455, 45298, 46739, 71065, 32666, 95649, 42389, 76750, 39995, 33151, 43330, 23628, 42586, 14028, 54522, 12655, 16254, 34766, 72370, 48312, 98640, 44272, 4522, 38669, 30585, 32559, 94281, 71295, 93599, 88157, 31075, 39763, 68010, 94591, 55664, 77959, 76536, 39615, 89655, 84566, 31081, 92213, 31675, 33669, 40065, 64642, 80585, 37625, 37000, 5294, 37817, 61542, 89690, 34470, 40375, 21800, 14488, 62178, 61100, 9218, 23682, 59451, 40498, 71773, 10221, 25952, 87035, 65405, 88101, 86290, 61396, 54253, 22847, 44949, 24796, 93778, 29306, 2869, 22965, 65744, 59414, 9767, 6892, 78130, 23037, 92176, 34115, 41613, 3580, 65131, 13912, 38318, 39166, 95458, 43981, 72874, 73959, 98099, 90630, 57035, 47691, 63080, 59188, 46914, 449, 59805, 1447, 67614, 34508, 26067, 25377, 89134, 31641, 41407, 19085, 42765, 80883, 2320, 73553, 37642, 42775, 52555, 83730, 51770, 5950, 81001, 98675, 44898, 29759, 85328, 2981, 536, 56849, 52899, 58067, 84439, 4172, 63429, 82804, 38730, 56200, 57820, 48005, 81869, 12535, 97007, 25740, 44119, 12750, 5922, 23969, 55452, 2895, 47075, 43920, 76755, 4594, 30507, 55865, 84997, 3575, 91072, 23692, 19854, 6187, 72222, 93149, 77555, 62335, 95261, 61825, 11542, 51371, 57982, 33050, 96787, 18601, 61581, 9111, 52893, 33807, 36050, 73409, 90029, 40356, 28365, 53523, 14744, 73092, 26365, 45022, 76563, 50673, 41744, 19453, 74482, 85411, 68358, 89940, 40383, 28214, 46781, 37649, 15310, 66661, 42462, 91270, 19774, 65403, 26552, 71235, 69945, 90705, 54601, 17070, 26836, 2341, 31349, 92822, 66099, 90415, 63863, 8446, 22655, 60942, 11862, 55395, 83805, 72420, 22513, 86030, 27710, 88509, 28652, 5538, 73591, 7292, 55631, 60272, 65932, 24672, 43095, 86669, 74412, 10969, 74893, 32085, 44522, 21400, 70341, 97028, 69027, 56315, 87581, 76370, 10442, 99310, 76841, 28276, 21804, 4836, 31010, 32045, 29193, 94499, 84789, 90503, 23763, 75926, 21054, 2791, 95481, 53499, 46412, 86553, 70088, 42015, 24793, 85415, 91783, 98878, 7305, 91634, 45620, 36244, 81356, 17047, 96475, 33439, 75411, 91410, 76269, 60559, 16794, 68054, 34657, 44435, 23604, 41400, 78936, 13719, 98079, 36790, 16872, 54376, 15805, 63897, 90112, 67677, 51808, 15605, 72991, 37870, 25210, 35683, 7375, 22680, 53170, 26250, 57266, 37597, 45522, 60512, 56930, 14416, 51830, 2898, 38807, 36050, 50289, 66165, 33255, 51682, 11345, 8350, 92767, 86645, 23439, 685, 16368, 37802, 78242, 72662, 58211, 41752, 81732, 53219, 26684, 69330, 58733, 67719, 67418, 48200, 16765, 83160, 25363, 29332, 84212, 60575, 20576, 24150, 21040, 85362, 90804, 54820, 31626, 83035, 65010, 30789, 87711, 99166, 2392, 87299, 29897, 82042, 58675, 5361, 30759, 49405, 75313, 51498, 81517, 24011, 71133, 24833, 58569, 11407, 34570, 39158, 26175, 65143, 45996, 43733, 1358, 39663, 9315, 86388, 81654, 67083, 3459, 43253, 42924, 24835, 39642, 35335, 1099, 48065, 79050, 8371, 3773, 27576, 61055, 34942, 52265, 10153, 43939, 48840, 92448, 99344, 65502, 34011, 65277, 73563, 79789, 18932, 60547, 75771, 40928, 20699, 75977, 27479, 60541, 33250, 99654, 6718, 86143, 11555, 10190, 63738, 95759, 63550, 37885, 58882, 93145, 24286, 46877, 90060, 53212, 45235, 66771, 56937, 39843, 34177, 28030, 95536, 72390, 59985, 7015, 3992, 6375, 39973, 22827, 22071, 28482, 57962, 97974, 3710, 38463, 31611, 13496, 64100, 5733, 37483, 77203, 19516, 19239, 33136, 69246, 76166, 57316, 56643, 87833, 92450, 41802, 47772, 42548, 35231, 99673, 74404, 30372, 88204, 37470, 78784, 28299, 52825, 99279, 39407, 42285, 54028, 83532, 35224, 94480, 8969, 57138, 59396, 26964, 42643, 27038, 4419, 55303, 26302, 27107, 62638, 50478, 1256, 73007, 61547, 7339, 98822, 74886, 84129, 39940, 84588, 87777, 89325, 45398, 76068, 23473, 3325, 44854, 20090, 97314, 25354, 65290, 85274, 50470, 76050, 66153, 31490, 35259, 71178, 33060, 94226, 40741, 11020, 50580, 13952, 30095, 55379, 35126, 68880, 29294, 50461, 37187, 41631, 19540, 91716, 18723, 971, 79558, 90888, 50331, 47075, 82635, 23454, 6997, 64230, 38471, 20856, 53768, 10207, 68183, 57143, 46758, 80432, 83119, 11427, 82465, 60202, 16777, 43692, 78243, 57950, 61721, 20711, 78867, 66568, 90513, 1493, 25059, 87314, 43029, 84327, 48713, 4622, 92725, 70715, 70888, 56883, 84431, 98574, 91925, 72638, 17654, 13041, 83109, 90350, 41847, 42995, 59450, 17442, 98631, 81086, 25460, 75023, 72620, 84194, 59301, 89917, 32708, 31959, 78289, 73087, 26909, 75541, 90636, 95125, 23453, 34138, 15418, 78715, 15268, 2418, 62609, 81732, 3336, 71072, 80433, 321, 57140, 49328, 52111, 68009, 45959, 48119, 68133, 93877, 57825, 20436, 63676, 53890, 21583, 27420, 94772, 97647, 85751, 76299, 42419, 83169, 49122, 67588, 37275, 23531, 69042, 47096, 56922, 66341, 78904, 57435, 25256, 72529, 64190, 10882, 36694, 66885, 41009, 71786, 99558, 16147, 14231, 38060, 62230, 6515, 64013, 88093, 63439, 23181, 57433, 67306, 30681, 57915, 80055, 20221, 25748, 98040, 89959, 20820, 70099, 63515, 37077, 4889, 52941, 68923, 49006, 2967, 91007, 57144, 68089, 78957, 53312, 84110, 30049, 87250, 55898, 16347, 48785, 74978, 67490, 72743, 36475, 69962, 16135, 10713, 48527, 86239, 19944, 32042, 7280, 56409, 95460, 66912, 11463, 23705, 16171, 5304, 65808, 8118, 66115, 83641, 92670, 57653, 66951, 12859, 42993, 90347, 13710, 9932, 61091, 59024, 15518, 81360, 29818, 90705, 16297, 37185, 67757, 84914, 58869, 26223, 63455, 1130, 79696, 11817, 54737, 50287, 98638, 90095, 82933, 24676, 9130, 89180, 35461, 48118, 85270, 26413, 44529, 96924, 83458, 52032, 87326, 21645, 44118, 23270, 6677, 19170, 36192, 99974, 69134, 8991, 66620, 87091, 40698, 59000, 35896, 72780, 49939, 6726, 80212, 20145, 72998, 11010, 93327, 30433, 98558, 48530, 38667, 15565, 26939, 61236, 19641, 38876, 80511, 59698, 9762, 90534, 59458, 75321, 92422, 59560, 30942, 67610, 32739, 69609, 61291, 81627, 21065, 94873, 11153, 50279, 80257, 72646, 26046, 82052, 34884, 80248, 76055, 3940, 66574, 94915, 10449, 1948, 24412, 80128, 11635, 13012, 71768, 71595, 57648, 77213, 33888, 21370, 79884, 46435, 93597, 54976, 86098, 37610, 36861, 47627, 60617, 18569, 16335, 37095, 78633, 23827, 73248, 95018, 14680, 54613, 30420, 23615, 63329, 59990, 23610, 782, 59485, 20556, 55308, 60944, 31680, 99603, 48774, 84390, 37654, 40510, 34466, 95657, 68718, 69251, 59165, 47167, 88616, 77902, 14127, 43511, 90073, 70961, 70100, 18039, 67884, 81887, 59474, 78858, 12988, 15015, 99002, 79200, 38468, 61135, 525, 69680, 11327, 82120, 78427, 85060, 37009, 43871, 54764, 71608, 7627, 18882, 9252, 60723, 6192, 21888, 11536, 7216, 8019, 1138, 64459, 35002, 37807, 6087, 57040, 3009, 37566, 57803, 7678, 67554, 146, 2732, 13611, 71520, 86602, 6791, 50920, 67282, 75241, 987, 18475, 58064, 24571, 66316, 8769, 17591, 26445, 78484, 74209, 58734, 99453, 37559, 31344, 25229, 17701, 36728, 64257, 11001, 86683, 11714, 61938, 93630, 9697, 61764, 39161, 4588, 87923, 18187, 33452, 64697, 91510, 18509, 82154, 12327, 92027, 81960, 62674, 55820, 54593, 5846, 9713, 87530, 11714, 7910, 26917, 49329, 2989, 66674, 14445, 57238, 44391, 38910, 22588, 58713, 85714, 40370, 26481, 25637, 56855, 8121, 39036, 70242, 43615, 63189, 53519, 81335, 36140, 32275, 78064, 68520, 67613, 77639, 74880, 1240, 72225, 30493, 80617, 73386, 38246, 51834, 27035, 93256, 53294, 3156, 52104, 35161, 84688, 36992, 96646, 23976, 98137, 60220, 53776, 49309, 49194, 3379, 32346, 11978, 37910, 87482, 30759, 68006, 60639, 51126, 62091, 62759, 19635, 54793, 40222, 86550, 64399, 29855, 64952, 86141, 26625, 88967, 9878, 48855, 17139, 61733, 97445, 76158, 80057, 77519, 89918, 81261, 79706, 89645, 25478, 40743, 80555, 17925, 26983, 77067, 81472, 53615, 32279, 77819, 21810, 6400, 19503, 2826, 40010, 86286, 73582, 35582, 92510, 41457, 79668, 76870, 69096, 92935, 50713, 34907, 6668, 96807, 6377, 62726, 5020, 73300, 30496, 97383, 61823, 5135, 60883, 47959, 20985, 85594, 34387, 19995, 66322, 4029, 97630, 92971, 76872, 43375, 96909, 34142, 48540, 32666, 95649, 42389, 76750, 39995, 33151, 43330, 23628, 41139, 42724, 86345, 86032, 58290, 33981, 52462, 71460, 43739, 45675, 60080, 82036, 79847, 48512, 78205, 42338, 49926, 61261, 81515, 65606, 36249, 27955, 75923, 18855, 72421, 63750, 53952, 29047, 20053, 70890, 38463, 97700, 60924, 8500, 39878, 7210, 65805, 52742, 34851, 27367, 81812, 59685, 12486, 50815, 52722, 72225, 5083, 97715, 55566, 92790, 66469, 50665, 29143, 96951, 92904, 16280, 81897, 72086, 33485, 35829, 47245, 91808, 4890, 14408, 64338, 28799, 2776, 46272, 67099, 5268, 46425, 7511, 4890, 54366, 25262, 15449, 53409, 17654, 25528, 66563, 88889, 58564, 6759, 88795, 71914, 86260, 54525, 87940, 62080, 99322, 94025, 35844, 64485, 49260, 44036, 29439, 47368, 77180, 33958, 30740, 92192, 39678, 72778, 40315, 39471, 89950, 19980, 58541, 50120, 14850, 21032, 21853, 64642, 34068, 60710, 61713, 63846, 16631, 35580, 26443, 84983, 82482, 64284, 54997, 27260, 79803, 86698, 43153, 5415, 50541, 99652, 48535, 7334, 53895, 46812, 10333, 30075, 15704, 91152, 75510, 99189, 74840, 42367, 27289, 55034, 44318, 58313, 27521, 78761, 53826, 62369, 87407, 87198, 5972, 12070, 80304, 74135, 61580, 7888, 99244, 32535, 30986, 56489, 20625, 65792, 26657, 82825, 19177, 92765, 86577, 26669, 79633, 56772, 29334, 27990, 42531, 58690, 42590, 15785, 1948, 25645, 32564, 88990, 43337, 93438, 29200, 38843, 54679, 92545, 77752, 88490, 58845, 53234, 23315, 26384, 76962, 80905, 23956, 51041, 57022, 95344, 27520, 69363, 41805, 49803, 72233, 7240, 39888, 92716, 70703, 27364, 38685, 51621, 65957, 51788, 28924, 43381, 6265, 83869, 68072, 40744, 73149, 81870, 10993, 1125, 23055, 69060, 67668, 97319, 82805, 92935, 33044, 28667, 84275, 91784, 50765, 42938, 41769, 33387, 45536, 67371, 35236, 57510, 110, 25736, 59713, 54163, 7205, 9010, 75080, 82186, 90507, 42989, 68405, 21727, 32495, 79055, 59804, 73520, 77990, 65058, 67037, 567, 96022, 77583, 95166, 72398, 86789, 99544, 15732, 15542, 64021, 15666, 40361, 68875, 79929, 51614, 43390, 79714, 62939, 78005, 58083, 90112, 56756, 2452, 36157, 49451, 17526, 8084, 96833, 44236, 98546, 56952, 46306, 40567, 15210, 55602, 59727, 15503, 27843, 10590, 70155, 89438, 65444, 73119, 73877, 97640, 63934, 48561, 69254, 28967, 29859, 28125, 30339, 56917, 71371, 98178, 97028, 54094, 84263, 60040, 4596, 28445, 51189, 32764, 57154, 24785, 36244, 14771, 41868, 41359, 10673, 47271, 99936, 49198, 59127, 42422, 34858, 95272, 13909, 68089, 36016, 90670, 69747, 82554, 76419, 68095, 94033, 43020, 67487, 66295, 60135, 58209, 79397, 22373, 86353, 67211, 46940, 29777, 86023, 46171, 95958, 45970, 57211, 87722, 90710, 62017, 59237, 25939, 38972, 74505, 55360, 36550, 1891, 99886, 55257, 62955, 23633, 10480, 87091, 90230, 51926, 62853, 27248, 28759, 20015, 70172, 34006, 58056, 4420, 91727, 16889, 45420, 79129, 89196, 53835, 92731, 87263, 61715, 3423, 5550, 36856, 26111, 93849, 20980, 92709, 2394, 99408, 41948, 54572, 48746, 45778, 35539, 48335, 1887, 41767, 85314, 65439, 66007, 20222, 48891, 82700, 7649, 67320, 97935, 61447, 15960, 61946, 9868, 91555, 19517, 78489, 96180, 62741, 30525, 42485, 35792, 93177, 91728, 37503, 57906, 87956, 51993, 29270, 38238, 34618, 38025, 73231, 57508, 96961, 85327, 97722, 85445, 18280, 36750, 86231, 15666, 40361, 68875, 79929, 51614, 16422, 23683, 50393, 71171, 91103, 21477, 57915, 31853, 75579, 4231, 57095, 55336, 53054, 42521, 13014, 58342, 66397, 67968, 66780, 75878, 87610, 88526, 92845, 57018, 36514, 81432, 48555, 92747, 37260, 46254, 94082, 62539, 57380, 45386, 77032, 51515, 42157, 6029, 6103, 83837, 52470, 40332, 49590, 4981, 80662, 41942, 63771, 57974, 33045, 47993, 70664, 68417, 16992, 40746, 60874, 17698, 82523, 27329, 57857, 97003, 79605, 51643, 60490, 93868, 60912, 33397, 41955, 23507, 58507, 3690, 39918, 81245, 59436, 22908, 66028, 57145, 12848, 545, 93323, 48275, 1240, 91030, 6335, 6835, 1781, 72099, 11252, 90777, 74470, 39306, 63998, 90648, 10264, 4722, 5816, 48247, 34540, 74457, 1791, 73694, 72948, 6167, 15561, 19822, 142, 148, 92569, 95056, 46564, 41077, 17116, 89586, 86597, 9833, 27347, 16316, 91113, 14355, 20034, 58107, 96260, 63809, 96810, 68436, 30091, 32110, 67829, 26511, 46779, 26140, 84978, 98162, 14949, 77794, 87453, 6208, 11644, 8076, 18895, 44949, 38633, 33303, 31800, 55917, 27717, 99040, 94226, 36500, 46267, 11343, 48535, 62365, 79643, 37874, 5324, 70345, 5187, 61113, 85085, 71334, 81653, 76204, 61525, 23624, 40594, 92550, 29105, 77752, 20939, 87190, 70015, 56642, 57505, 62549, 76793, 56350, 21270, 49180, 59191, 24299, 31902, 95432, 11130, 20076, 99694, 19978, 22165, 86531, 21570, 89766, 93484, 20797, 64990, 35181, 42565, 25552, 93843, 14030, 76450, 54854, 66138, 20510, 37716, 1755, 39247, 75024, 69197, 43605, 26071, 7695, 42105, 83223, 47654, 95114, 20241, 6068, 9587, 73773, 86870, 26976, 14655, 76713, 85728, 10675, 69567, 43490, 85630, 93225, 94100, 61172, 40321, 99048, 11763, 59150, 57931, 42455, 90349, 73597, 8779, 54074, 49295, 98122, 98771, 63068, 32214, 44360, 7372, 42889, 9743, 37973, 61910, 96617, 17745, 15550, 37599, 61580, 36488, 37240, 24540, 75682, 96651, 32662, 89466, 81187, 53898, 5809, 74328, 59870, 55360, 58687, 78550, 99962, 75212, 97975, 56321, 17851, 62208, 35073, 41865, 61413, 48718, 78105, 73698, 58428, 30175, 90139, 34631, 34645, 60188, 42885, 15886, 3013, 86638, 98051, 54032, 76208, 81676, 87744, 64138, 77653, 91324, 16463, 82845, 81960, 80110, 4722, 79827, 71790, 53322, 85985, 68132, 77274, 26850, 75590, 26443, 90042, 92324, 85956, 20686, 94510, 57152, 48822, 21819, 63131, 38215, 426, 6726, 88103, 77903, 29492, 49553, 54368, 28143, 70630, 34946, 31773, 9056, 56021, 11414, 81345, 35843, 14006, 25786, 89563, 43706, 51266, 71674, 24011, 21633, 37716, 56073, 91316, 70295, 52282, 44310, 14401, 42011, 79664, 32040, 94171, 12632, 43686, 59916, 53163, 1839, 21860, 71321, 82149, 56965, 88408, 49099, 42926, 68053, 23604, 29916, 71171, 75769, 18750, 68167, 68247, 19366, 25438, 89454, 41429, 63091, 21516, 22038, 57857, 82883, 77016, 40632, 10597, 58077, 12626, 46813, 95083, 27716, 57444, 30175, 59866, 59371, 49473, 95269, 68308, 59539, 14064, 12973, 48192, 22855, 5882, 475, 99683, 29092, 11539, 93985, 42396, 7366, 38635, 16477, 45485, 20409, 64953, 78885, 10274, 33836, 11848, 83938, 68885, 59019, 58877, 63818, 30156, 91256, 30633, 98257, 5962, 18311, 29084, 59679, 62430, 95535, 11748, 62020, 56375, 65054, 25389, 93425, 53692, 21045, 74780, 64808, 74881, 46487, 2416, 41214, 63902, 21650, 30676, 73451, 31779, 63760, 89563, 81835, 23292, 68592, 76107, 69766, 82361, 4474, 73064, 67154, 56919, 27160, 48248, 93757, 60370, 78461, 94245, 9128, 24221, 60202, 5281, 9946, 94174, 49501, 45755, 47249, 6029, 25836, 60642, 31131, 81050, 89975, 52786, 50030, 66056, 51034, 34540, 27403, 42880, 42013, 21560, 21619, 89018, 41523, 60866, 76918, 73707, 95615, 8095, 53757, 5858, 97555, 99496, 65578, 64456, 513, 12928, 70090, 69670, 36871, 5235, 15195, 30925, 15531, 23479, 35983, 4440, 85099, 94414, 72045, 35873, 12135, 78161, 84781, 17710, 74193, 84985, 62463, 45280, 4642, 6449, 20825, 8931, 61265, 40275, 39159, 40078, 82870, 35782, 72745, 53642, 64009, 74778, 76709, 72230, 60892, 787, 77760, 46939, 51741, 94912, 70443, 2906, 44281, 85445, 97427, 89542, 83134, 37984, 51102, 69277, 57380, 64362, 38671, 20795, 46170, 99038, 79399, 85615, 70232, 47294, 6393, 87931, 56355, 57893, 79534, 85415, 55677, 38038, 85662, 56594, 88869, 70755, 12001, 39620, 41240, 23684, 37007, 82349, 73280, 31979, 68747, 46280, 32282, 63925, 36886, 55570, 31836, 70303, 5125, 88340, 72053, 17985, 78244, 72576, 15911, 22680, 99430, 56753, 72168, 98507, 45070, 56770, 40870, 71041, 47536, 39783, 21592, 74890, 3603, 83302, 34851, 67037, 567, 96022, 77583, 95166, 72398, 86789, 99544, 15732, 15542, 64021, 31569, 94887, 66353, 46905, 41011, 43390, 79714, 62939, 78005, 58083, 90112, 56756, 2452, 36157, 49451, 17526, 8084, 96833, 44236, 98546, 56952, 46306, 40567, 15210, 33822, 70413, 830, 31894, 77698, 60586, 55551, 65474, 71770, 74627, 36223, 9851, 11876, 18709, 16394, 96835, 68474, 5842, 91953, 65458, 40644, 37292, 91689, 57695, 6752, 90879, 36322, 15436, 32701, 16905, 36292, 23280, 39878, 63931, 52472, 30729, 75081, 60694, 8895, 10486, 80988, 73927, 68019, 77696, 1054, 1475, 16796, 30722, 49733, 78141, 97106, 51751, 1301, 20843, 4539, 51828, 73545, 45473, 71796, 99926, 17503, 58858, 5763, 59778, 80510, 27187, 21632, 95206, 37239, 3470, 21098, 99172, 53390, 44595, 1526, 35136, 93437, 34845, 71656, 46124, 67588, 6605, 58561, 77018, 89644, 99050, 68271, 43781, 92404, 1841, 10009, 32121, 91036, 82423, 13124, 21177, 14537, 55609, 12340, 9872, 39566, 58233, 21314, 3353, 495, 34931, 10488, 76666, 93923, 62448, 66149, 9654, 87427, 85554, 70134, 52884, 55039, 67774, 23784, 90915, 27109, 95643, 44840, 68723, 70701, 42441, 29332, 40595, 47170, 31471, 4212, 52166, 46650, 28955, 62003, 69521, 61740, 27214, 55123, 34691, 3510, 98387, 9885, 41836, 17548, 49733, 16132, 91236, 52536, 25853, 53624, 30152, 17809, 25349, 10436, 50570, 42227, 38237, 84203, 52258, 99388, 66436, 92162, 16472, 28601, 21583, 38369, 90099, 58323, 42125, 90299, 38731, 84067, 53195, 6674, 32593, 39966, 39531, 15614, 26171, 52564, 22698, 93591, 40478, 30264, 66860, 72885, 84180, 43011, 34609, 84442, 62931, 79124, 31084, 65961, 4839, 8828, 43100, 61003, 45355, 46731, 7940, 24739, 2623, 92831, 56690, 15500, 68657, 57821, 64692, 88916, 7010, 34106, 98951, 93150, 20875, 12133, 60202, 87612, 731, 40763, 50982, 96354, 7748, 46607, 91949, 21598, 23258, 67153, 18262, 31428, 77510, 1996, 17486, 8880, 27414, 58070, 1218, 39158, 17022, 8193, 25880, 67087, 61685, 83204, 16122, 83675, 72049, 30255, 63689, 55038, 90631, 975, 37545, 73091, 37657, 11984, 70448, 44067, 90299, 9491, 40620, 36318, 60274, 63519, 20475, 60638, 23521, 28577, 25281, 13770, 41075, 95501, 52409, 66673, 32654, 26215, 49834, 49872, 30254, 61005, 45854, 16993, 78366, 2844, 3399, 83933, 94709, 87807, 27054, 9256, 60124, 93138, 11729, 10961, 53714, 82624, 50890, 72011, 8537, 67689, 82042, 86419, 19887, 73763, 92656, 43773, 48516, 78400, 32449, 79819, 53792, 71845, 70714, 9720, 57765, 31038, 45243, 79825, 67333, 14375, 80774, 86596, 2315, 34445, 51489, 48187, 49973, 13324, 50706, 54290, 27352, 6812, 12586, 11282, 15071, 30642, 69169, 63819, 38022, 73685, 2594, 77479, 33495, 17343, 26342, 47913, 17011, 33869, 59293, 41081, 18749, 35528, 63173, 71402, 81538, 16390, 56130, 18275, 39811, 35968, 35105, 86607, 5115, 41973, 51907, 19046, 55179, 81961, 54002, 22424, 47903, 84950, 23946, 62899, 52403, 13648, 10021, 53, 28919, 4231, 21050, 85610, 65983, 50010, 52638, 97585, 85967, 16414, 236, 83853, 67698, 43156, 27476, 28514, 548, 83176, 9713, 87530, 11714, 7910, 26917, 83117, 78062, 99040, 13900, 12113, 86590, 36059, 97697, 59855, 71000, 79461, 81517, 24011, 71133, 24833, 58569, 11407, 34570, 39158, 26175, 65143, 79996, 70249, 74088, 63818, 82745, 24773, 25981, 4395, 68420, 79223, 42444, 1630, 47415, 34774, 22900, 60849, 65609, 28080, 93749, 46348, 59121, 9086, 90726, 62262, 10173, 75459, 49798, 31549, 22772, 8021, 31916, 11809, 78353, 12767, 46656, 44182, 73234, 18061, 33005, 50982, 24522, 72420, 80457, 87904, 89149, 43240, 53938, 45820, 618, 55356, 93979, 71338, 22512, 56370, 48262, 33500, 91908, 98575, 32216, 65763, 74490, 95186, 26239, 74500, 68756, 85486, 82989, 58247, 12412, 15056, 12311, 74095, 21471, 71279, 96306, 65451, 97162, 52113, 61165, 60870, 28887, 4075, 15789, 29514, 1314, 93625, 92235, 74124, 95471, 19921, 73536, 61505, 77512, 32364, 36094, 39717, 80260, 8576, 77254, 98366, 64297, 40049, 88499, 59552, 86603, 34929, 97316, 35012, 90944, 20359, 78343, 41166, 82632, 71890, 75706, 60202, 55355, 12169, 90193, 19387, 71079, 20145, 69342, 26014, 74351, 29045, 83200, 66276, 48928, 69302, 87035, 87312, 657, 24135, 38829, 19965, 60747, 83757, 21798, 41684, 98120, 99133, 70772, 67159, 5855, 3037, 60532, 33194, 38915, 67886, 58616, 40859, 44998, 65892, 42328, 71994, 46754, 40800, 99927, 45779, 5353, 24019, 22664, 9813, 71323, 93940, 36938, 33018, 85326, 23419, 99218, 11633, 98574, 79338, 95619, 99069, 84922, 55523, 23961, 44929, 56664, 27835, 8694, 74728, 85591, 62449, 60842, 74185, 75949, 30494, 59866, 8113, 22700, 97992, 33425, 61089, 18934, 96395, 46080, 98324, 66009, 16914, 7750, 10705, 25090, 6135, 65924, 2008, 63995, 14823, 52692, 16241, 77815, 24166, 66734, 58894, 53440, 71590, 14680, 34083, 84092, 32671, 33407, 72139, 50923, 21046, 71381, 22673, 22852, 40822, 49596, 30562, 96220, 7293, 11715, 42606, 24174, 44998, 24906, 2005, 86570, 3528, 58372, 17816, 11873, 85866, 6486, 17328, 28476, 10073, 31365, 41931, 34346, 86441, 79043, 74827, 23191, 83699, 12310, 16286, 93162, 81179, 18613, 21993, 85532, 40796, 95887, 97627, 65566, 66946, 39631, 74146, 88837, 96686, 66126, 19059, 86587, 28427, 87742, 76887, 71280, 44387, 74540, 35368, 92901, 3265, 80968, 5664, 26629, 47037, 72817, 90949, 61848, 7259, 23692, 76469, 65342, 7760, 97339, 43366, 13889, 52932, 11673, 40149, 87728, 76255, 93411, 74373, 72337, 66898, 7964, 77366, 54215, 53793, 37466, 26106, 5356, 62414, 2974, 46365, 57266, 51450, 97831, 62546, 7893, 38260, 40240, 59980, 60863, 43817, 75458, 72522, 42291, 31731, 34511, 53912, 32586, 24624, 59744, 82078, 7890, 90052, 22232, 42880, 51181, 80442, 69531, 41606, 97107, 11177, 99870, 39752, 56244, 11728, 7950, 50770, 49038, 51618, 74036, 3581, 70068, 22344, 67260, 33399, 94790, 63675, 60280, 38735, 11716, 99176, 40641, 6203, 67983, 3357, 37949, 11957, 45639, 60035, 16885, 98111, 17851, 9823, 32158, 55416, 78700, 59829, 12441, 17573, 92091, 70178, 56937, 42189, 57466, 91735, 13655, 77157, 51831, 10163, 86906, 96981, 19469, 58658, 92731, 32365, 45497, 12614, 73, 83068, 9370, 78417, 13533, 76677, 28329, 14878, 46551, 79059, 23502, 29793, 34313, 64039, 31132, 84966, 55221, 67949, 3705, 48079, 98230, 57727, 60564, 56011, 35537, 61129, 49646, 18541, 92255, 89915, 77846, 25687, 59299, 89632, 19859, 96804, 82916, 76215, 30253, 82279, 63053, 89466, 61775, 33613, 92624, 22298, 69328, 85387, 48817, 19223, 15765, 12170, 91021, 71946, 13446, 69681, 45186, 1241, 36855, 52381, 2543, 74650, 71518, 25917, 8869, 48942, 37774, 97596, 77575, 69840, 67239, 95682, 28660, 23533, 43940, 98617, 54564, 43049, 38099, 48005, 5362, 61955, 28251, 83772, 3280, 47498, 26786, 32314, 82081, 4124, 97859, 40710, 15413, 41046, 53094, 42901, 14242, 73716, 99813, 6122, 2426, 68889, 91016, 52167, 16231, 30480, 51621, 78597, 53701, 86323, 98186, 22649, 59465, 46343, 84299, 3590, 68779, 79416, 99655, 57427, 76890, 50561, 438, 35747, 3362, 20831, 79346, 60092, 71988, 9114, 33286, 76819, 94419, 18977, 54845, 53670, 59124, 70274, 60169, 64813, 43510, 63878, 13963, 74709, 7906, 1095, 53327, 62495, 48226, 47237, 4292, 47079, 55807, 54565, 80595, 75704, 25126, 33239, 12950, 81291, 58888, 21456, 50508, 19355, 85582, 80266, 78303, 76285, 24800, 97118, 12723, 18999, 62007, 14556, 82739, 31062, 53768, 84581, 65494, 4490, 21057, 6530, 55871, 63866, 48565, 80314, 77400, 85030, 46146, 46898, 26459, 16273, 69111, 29439, 51554, 56564, 19010, 64442, 84474, 5964, 25699, 70952, 2853, 7370, 57646, 87127, 6660, 14463, 31091, 83058, 91591, 94599, 94117, 87026, 40678, 84517, 52450, 25410, 3596, 96575, 58488, 57795, 27582, 25256, 86043, 11917, 8354, 62590, 58421, 6150, 60149, 58005, 96031, 94667, 26986, 22668, 19737, 28885, 15948, 27760, 55572, 92495, 87482, 42374, 27140, 2233, 37490, 39067, 80333, 21515, 82936, 18296, 59585, 70986, 99560, 66556, 59888, 91265, 91140, 25918, 1608, 38872, 81979, 17590, 98556, 30796, 18252, 18763, 41738, 90969, 28602, 92649, 64970, 53888, 8953, 73074, 62103, 74421, 75827, 23335, 7709, 61501, 72464, 19344, 28542, 1906, 87052, 79334, 52078, 24374, 67160, 26204, 18112, 64823, 18561, 91692, 50898, 56129, 96427, 4229, 63538, 70788, 21396, 3923, 50323, 52554, 41833, 38146, 7435, 86875, 77568, 91934, 58972, 25895, 37309, 43951, 51470, 28996, 77338, 72957, 51297, 46910, 25173, 64766, 55636, 5887, 6525, 10825, 51372, 8093, 48275, 81693, 47955, 18585, 15776, 10443, 82010, 62626, 74929, 89786, 83572, 53097, 11440, 62738, 28717, 10281, 14638, 79775, 35268, 24131, 85100, 33470, 85946, 76096, 95742, 75585, 51883, 77310, 29934, 9436, 70782, 3718, 55767, 53144, 84857, 20782, 43789, 18328, 71594, 22266, 87193, 15830, 75015, 40296, 48825, 79385, 59840, 1876, 427, 35130, 10974, 92902, 85806, 24605, 42887, 81585, 99778, 73204, 64960, 47918, 88858, 57139, 30298, 53483, 92811, 80723, 10123, 40249, 11684, 96496, 80282, 37481, 62339, 96442, 10639, 4038, 4419, 20424, 18801, 997, 29267, 61105, 40514, 16990, 43257, 2379, 13045, 48190, 27932, 70852, 29584, 89338, 54394, 77331, 76253, 38566, 1004, 25334, 7296, 34747, 72379, 37833, 96138, 35477, 90445, 23465, 67498, 3936, 77062, 47876, 76321, 79014, 61675, 83922, 19084, 97153, 62483, 93914, 71481, 26073, 79596, 45955, 46175, 60593, 68800, 49895, 83802, 1369, 3799, 40087, 42891, 12136, 66156, 66095, 60213, 61063, 71601, 89764, 24067, 56171, 86614, 28475, 41296, 52443, 68609, 34804, 79300, 20272, 8337, 73058, 46396, 17996, 92145, 79392, 98132, 21722, 481, 76874, 64971, 79591, 19398, 69827, 14399, 77235, 6374, 53308, 24177, 97892, 20694, 57530, 56894, 49747, 697, 63747, 38529, 63998, 18139, 66564, 5851, 46115, 64064, 27153, 39857, 31946, 44615, 52902, 86807, 95909, 21732, 38345, 47792, 28721, 26011, 91316, 91505, 12239, 60428, 81412, 99585, 19176, 41664, 11896, 81971, 91086, 20453, 40828, 5634, 34816, 32384, 91990, 63233, 86585, 49814, 52253, 72251, 35555, 12452, 91113, 11383, 43926, 32081, 80240, 52564, 85745, 31725, 91982, 38467, 42875, 3015, 63277, 69801, 66849, 75729, 57169, 10150, 4838, 41280, 59413, 45546, 28716, 74864, 69605, 12047, 45448, 45124, 60230, 97683, 96712, 71063, 3666, 28832, 46841, 18292, 87423, 60989, 473, 64744, 5811, 29602, 7164, 79730, 7914, 14873, 1616, 77836, 75918, 52045, 6879, 61904, 96004, 2856, 63645, 15118, 29743, 30891, 74661, 75831, 50827, 84519, 32006, 2487, 64458, 46146, 45345, 91037, 68596, 67836, 59300, 61942, 88785, 40476, 62827, 51067, 77488, 55561, 64545, 80680, 97953, 80622, 3805, 45988, 71981, 18210, 14839, 53428, 32112, 73536, 49977, 37145, 16394, 59927, 68647, 86773, 31647, 256, 94347, 64804, 78065, 26138, 13668, 12268, 33656, 4962, 36977, 31146, 31929, 31474, 53853, 9166, 61977, 26171, 45800, 16810, 18169, 94523, 86280, 11421, 48301, 47136, 26098, 10283, 20996, 98919, 59800, 50669, 69596, 24913, 80422, 85617, 57049, 61275, 35797, 32992, 5693, 88361, 8533, 36001, 99290, 9394, 80511, 32990, 97698, 88419, 89259, 3437, 13744, 80660, 30829, 16837, 78571, 47831, 13046, 49779, 88877, 27375, 1893, 37025, 74550, 74234, 10049, 77233, 4182, 23252, 10913, 39740, 95770, 11197, 11329, 36528, 95976, 28598, 34981, 77381, 63910, 92865, 48457, 7554, 73280, 35336, 77711, 30325, 52498, 9998, 23982, 26676, 17175, 52034, 844, 89433, 33563, 57868, 72222, 62386, 69285, 87844, 63097, 28438, 6508, 24724, 18012, 54884, 65945, 55261, 75991, 9012, 88195, 34295, 63187, 91751, 57063, 66957, 59569, 39943, 73170, 45052, 13832, 17216, 6400, 4840, 66606, 49376, 59800, 53951, 3549, 66214, 30770, 54599, 58891, 97657, 93223, 60874, 58442, 1299, 49186, 46687, 14740, 84457, 36447, 13646, 47067, 19131, 43014, 20775, 18619, 62199, 38475, 65220, 51527, 97556, 8794, 77393, 1508, 56259, 90240, 18194, 54099, 35754, 32039, 42360, 46373, 39674, 38630, 89318, 39473, 79052, 15361, 22269, 61834, 28902, 8292, 78181, 38151, 36150, 92007, 93324, 52373, 70601, 44698, 99832, 1254, 89462, 61845, 81956, 97000, 80506, 27479, 80673, 42383, 49500, 46105, 48167, 67379, 91147, 56939, 40861, 18129, 89583, 14578, 37908, 39144, 99390, 3668, 15986, 8391, 244, 31036, 74888, 59029, 11995, 74736, 3307, 60945, 54127, 87722, 28438, 87660, 65443, 89176, 17085, 17622, 56582, 85637, 80134, 11708, 39806, 32536, 16001, 79226, 72915, 82716, 68090, 45029, 60925, 11879, 17625, 73400, 64631, 39412, 65240, 20647, 73094, 88420, 60434, 9244, 65072, 6893, 70916, 95449, 25188, 93460, 3003, 73937, 89549, 39432, 72713, 11830, 30779, 75085, 28819, 22180, 15106, 27913, 26964, 32588, 90232, 72049, 36620, 60856, 58817, 5526, 26087, 18017, 16189, 14444, 3616, 85973, 10120, 65055, 9707, 14206, 68594, 16363, 8162, 71209, 31418, 21487, 2636, 72880, 67178, 27891, 23978, 93454, 17656, 86675, 48479, 92540, 49220, 7310, 21495, 90416, 10365, 79406, 12781, 95329, 23204, 17066, 52915, 47384, 24595, 94838, 62782, 83599, 75788, 68288, 79882, 63244, 4128, 27982, 68721, 26134, 7801, 96843, 106, 42986, 30089, 82264, 97132, 52823, 94725, 40279, 65020, 75526, 71913, 29749, 88459, 28029, 75651, 74219, 26375, 26805, 62280, 81549, 78683, 23447, 55703, 84742, 94637, 67996, 21073, 1607, 10407, 68235, 17584, 99926, 13387, 43893, 80040, 44805, 99440, 78390, 30990, 21267, 34445, 45979, 67529, 33810, 92925, 8733, 24970, 46573, 96045, 4849, 52110, 59314, 13461, 40250, 43948, 85734, 96617, 67208, 64844, 18417, 11907, 17902, 79590, 27740, 35195, 84736, 45302, 85958, 88766, 18891, 35738, 23764, 60562, 85913, 34683, 11971, 74516, 76123, 59494, 52621, 12550, 59190, 12004, 51987, 26724, 7718, 73374, 52872, 13905, 27893, 8447, 18586, 82508, 88298, 57070, 59316, 95585, 30816, 3493, 35411, 3021, 13485, 52554, 8495, 55201, 2415, 66448, 80059, 77961, 11893, 91274, 68452, 46725, 79805, 86226, 86967, 38150, 59482, 56692, 78000, 67548, 26693, 3490, 37710, 41331, 20516, 80665, 50219, 35570, 2133, 88570, 42987, 83139, 55436, 60816, 36031, 31323, 80837, 24711, 16420, 93214, 78957, 32638, 15201, 96164, 65588, 96798, 97839, 44750, 94196, 14328, 47762, 63817, 83352, 1269, 4849, 45995, 24908, 85925, 16924, 74102, 1908, 6362, 38698, 98958, 11840, 5241, 32201, 92441, 60239, 32570, 42804, 47661, 28458, 68217, 74407, 5804, 33613, 94152, 47704, 5306, 62164, 72838, 13546, 75077, 82958, 80980, 6072, 20491, 86747, 68944, 79189, 7807, 95499, 79352, 26397, 92539, 58144, 6162, 27329, 51429, 48688, 33920, 75050, 40606, 61963, 18741, 83334, 96829, 64933, 64222, 24594, 96616, 90454, 33216, 13736, 42498, 11827, 29682, 41921, 60039, 27508, 93878, 20966, 77823, 75437, 51708, 84210, 70177, 34352, 54194, 97118, 58900, 43544, 8017, 88870, 83048, 99700, 86076, 39109, 48479, 11168, 38154, 62174, 5431, 3786, 47351, 53632, 71574, 88206, 27442, 55838, 15541, 63473, 77738, 21927, 80182, 58709, 46786, 12876, 6655, 99248, 32507, 78187, 41485, 32894, 67646, 40866, 99306, 56717, 67905, 79628, 12865, 63614, 91013, 60150, 37386, 65106, 46381, 85177, 51340, 32065, 84844, 64015, 87087, 79682, 85008, 37876, 35475, 25632, 52850, 61997, 76257, 43954, 50761, 67536, 80723, 77927, 2661, 15155, 77657, 3593, 81355, 4102, 84638, 71882, 83031, 95460, 42784, 63678, 9544, 85828, 54010, 58874, 64919, 12564, 47384, 81973, 40240, 71779, 48383, 65874, 40556, 51234, 37696, 69073, 43850, 5778, 91580, 26466, 52669, 20001, 92050, 53541, 16162, 23529, 1049, 89024, 6925, 6069, 69418, 451, 50028, 90506, 48775, 58300, 82502, 38764, 14646, 44213, 76290, 55807, 70001, 75518, 71754, 4642, 97551, 45581, 77299, 21622, 60579, 72692, 72049, 74527, 69585, 65495, 95447, 11568, 12889, 3389, 96338, 80305, 92030, 61354, 13332, 66273, 40506, 83925, 66927, 45431, 45445, 1729, 41411, 96866, 14124, 59253, 89318, 63576, 89049, 47045, 49906, 93341, 2984, 37907, 25389, 39578, 3624, 61653, 51088, 50903, 32790, 1431, 44828, 63922, 53775, 37316, 64257, 51923, 84668, 27953, 90068, 82561, 68082, 72168, 9409, 52298, 77677, 40755, 35513, 80148, 97560, 58556, 70591, 95739, 92720, 85183, 75038, 71874, 52329, 69385, 42862, 40959, 99787, 52137, 69915, 74246, 92066, 87625, 72619, 92847, 2248, 33901, 208, 33719, 58564, 8222, 71634, 26420, 52396, 54012, 5300, 16589, 2637, 35734, 3920, 50109, 44235, 1559, 23003, 2271, 9358, 31378, 47538, 21280, 45413, 51245, 10666, 56229, 44412, 31179, 45290, 84679, 12954, 79401, 64806, 22896, 65896, 25672, 1800, 89945, 12686, 32127, 27772, 57154, 70847, 88469, 37668, 29695, 15492, 65579, 18336, 68571, 42712, 28753, 20281, 8419, 71603, 32042, 90866, 84721, 86973, 7050, 66273, 3943, 85971, 19074, 55091, 8267, 83961, 26107, 95733, 54709, 73230, 21540, 52033, 70427, 64500, 9164, 88587, 75285, 20792, 23180, 98820, 10989, 46796, 82518, 21555, 52066, 34023, 23403, 56977, 966, 52156, 54676, 99185, 12249, 99413, 87070, 76560, 47002, 27680, 72000, 6739, 37146, 65386, 27491, 53723, 99431, 96030, 21967, 42277, 91223, 31224, 81950, 22404, 7933, 51781, 54080, 7418, 73011, 16478, 21599, 87769, 80715, 98835, 92890, 89473, 7955, 35302, 96051, 74558, 66269, 33687, 71261, 97418, 96997, 20754, 85090, 1608, 58565, 34416, 23635, 21162, 79088, 83103, 69957, 15058, 83498, 96418, 9157, 27083, 52076, 72901, 45480, 5851, 72370, 72604, 65424, 87075, 19782, 27670, 15784, 20325, 68927, 26844, 81235, 36078, 21863, 29413, 66570, 43476, 47239, 62200, 80677, 96631, 79684, 71575]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 2) (<digit> 0)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 3) (<digit> 1)))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 0)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 5) (<digit> 9)))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 4) (<digit> 0)))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 1) (<digit> 8)))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 5) (<digit> 4)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 4) (<digit> 1)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 2) (<digit> 3)))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 8) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 6) (<digit> 4)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 2) (<digit> 2)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 0) (<digit> 1)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  )))))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 2)))  ))  ))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 7) (<digit> 3)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  )))))))))  ))))  ))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 9) (<digit> 9)))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 4) (<digit> 6)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 5) (<digit> 3)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 2) (<digit> 5)))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 4) (<digit> 1)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 6) (<digit> 9)))  ))  ))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 7) (<digit> 6)))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 3) (<digit> 1)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 3) (<digit> 2)))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 4)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 4) (<digit> 4)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 2) (<digit> 4)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 3)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_x))))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 1) (<digit> 3)))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> velocity_y))))))  ))))  )))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 1) (<digit> 0)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 6) (<digit> 8)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 4) (<digit> 7)))  ))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  )))  and  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))))  )))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 0)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 7) (<digit> 9)))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 1) (<digit> 1)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 9) (<digit> 9)))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 4) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 2) (<digit> 2)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 5) (<digit> 3)))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 9) (<digit> 2)))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 1) (<digit> 0)))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 4) (<digit> 0)))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 7) (<digit> 2)))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  ))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 7) (<digit> 0)))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 3) (<digit> 9)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 7)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 9) (<digit> 1)))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 3)))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 3) (<digit> 6)))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 3) (<digit> 3)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 4) (<digit> 0)))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 9) (<digit> 3)))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 6)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 5) (<digit> 9)))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 7) (<digit> 1)))  ))  ))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 8) (<digit> 1)))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 3) (<digit> 8)))  ))))))  or  (<boolean_feature> direction))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 4) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 4)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 9) (<digit> 7)))  ))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 8) (<digit> 8))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 0) (<digit> 8)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 3) (<digit> 7)))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 2))))))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 5) (<digit> 6)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 0) (<digit> 0)))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 5) (<digit> 5)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 4)))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 0) (<digit> 2)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 8) (<digit> 5)))  ))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 8) (<digit> 5)))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 8) (<digit> 0)))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 7) (<digit> 0)))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 0) (<digit> 6)))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 0) (<digit> 7)))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 2) (<digit> 4)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 0) (<digit> 9)))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 3) (<digit> 9)))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 8) (<digit> 5)))  ))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 7) (<digit> 7)))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 2) (<digit> 7)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 9) (<digit> 4)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 2) (<digit> 2)))  ))  ))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 9) (<digit> 2)))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 6) (<digit> 2)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 0) (<digit> 2)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 1) (<digit> 6)))  ))  )))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 3) (<digit> 4)))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 2) (<digit> 7)))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 7)))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 6) (<digit> 4)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 2) (<digit> 6)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 9) (<digit> 4)))  ))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 9) (<digit> 5)))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 3) (<digit> 3)))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))))))  ))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_x))))))))  ))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 5) (<digit> 1)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 4) (<digit> 8)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 3) (<digit> 2)))  ))  ))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 7) (<digit> 8)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))))))  ))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 1) (<digit> 7)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 4) (<digit> 9)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 0) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  )))))))  ))))))  )))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 2) (<digit> 2)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 9) (<digit> 4)))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 6) (<digit> 4)))  ))  ))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 7) (<digit> 0)))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 5) (<digit> 9)))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 3) (<digit> 0)))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 2) (<digit> 8)))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 9) (<digit> 5)))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 1) (<digit> 8)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 0) (<digit> 9)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 5) (<digit> 3)))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 7) (<digit> 7)))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 5) (<digit> 7)))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 8) (<digit> 8)))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 0) (<digit> 0)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 9) (<digit> 4)))  ))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 9)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 1) (<digit> 4)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 4) (<digit> 7)))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 9) (<digit> 7)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 0) (<digit> 6)))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 1) (<digit> 4)))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 9) (<digit> 6)))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 7) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 2) (<digit> 9)))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 3) (<digit> 0)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 0) (<digit> 6)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 1) (<digit> 5)))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 8) (<digit> 9)))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 8)))  ))  ))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 6) (<digit> 3)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 4) (<digit> 8)))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 2) (<digit> 9)))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 3) (<digit> 8)))  ))  ))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 3) (<digit> 6))))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x))))))  )))))  )))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 6)))   (<comp_op> ==)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 3) (<digit> 6)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 4) (<digit> 5)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 8) (<digit> 9)))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 2) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 2) (<digit> 0)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 3) (<digit> 5)))  ))  ))))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 4) (<digit> 9)))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 3)))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_x))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))))  )))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 1) (<digit> 5)))  ))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_y))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> !=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x))))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 3) (<digit> 2)))  ))))))  )))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 2) (<digit> 2)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 5) (<digit> 1)))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 6) (<digit> 4)))  ))  ))   (<comp_op> !=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 7) (<digit> 0)))))))  )))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 7) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 5) (<digit> 4)))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 0) (<digit> 8)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 4) (<digit> 5)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 6) (<digit> 4)))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 6) (<digit> 1)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 5) (<digit> 3)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 3) (<digit> 8)))  ))  ))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 2) (<digit> 0)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 4) (<digit> 8)))  )))))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 3) (<digit> 4)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 4) (<digit> 7)))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 1) (<digit> 2)))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 1) (<digit> 0)))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 2) (<digit> 9)))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 3) (<digit> 8)))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 3) (<digit> 9)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 6)))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 8) (<digit> 4)))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ))  ))  ))   (<math_op> +)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 1) (<digit> 0)))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 6) (<digit> 1)))  ))  ))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))))))  ))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 7) (<digit> 9)))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  )))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 5) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 9) (<digit> 7)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 1) (<digit> 4)))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 9)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 7) (<digit> 3)))  ))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 2)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 5)))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 4) (<digit> 3)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  ))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 0) (<digit> 0)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 6) (<digit> 4)))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 7)))  ))  ))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 7) (<digit> 0)))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x))))))  )))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 8) (<digit> 9)))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 7) (<digit> 6))))))))  )))))  ))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius)))))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 9) (<digit> 6)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 0) (<digit> 7)))  ))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 2) (<digit> 4)))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 3)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 3) (<digit> 6)))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  )))))))  or  (<boolean_feature> direction))  else  (<expr> (<action> 'LINKS'))))))))))

Fitness:
8.647751105484085