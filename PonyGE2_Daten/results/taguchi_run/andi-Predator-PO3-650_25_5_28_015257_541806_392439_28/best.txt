Generation:
50

Phenotype:
'LINKS' if not direction and not ( ( p_div( velocity_x , velocity_y ) + obstacle_y ) <= hypot( 4.94 , p_div( intersect_radius , obstacle_y ) ) ) or not ( ( ( ( 3.68 * 1.22 ) + p_div( p_div( obstacle_y , ( intersect_centers_x - intersect_centers_y ) ) , 8.95 ) ) + -4.72 ) + intersect_centers_x ) < p_div( ( velocity_y * p_div( ( hypot( 9.53 , velocity_y ) + p_div( intersect_centers_x , hypot( intersect_centers_x , obstacle_x ) ) ) , 3.72 ) ) , 6.75 ) or ( ( -5.75 * velocity_x ) + p_div( p_div( hypot( p_div( 1.44 , 3.76 ) , p_div( hypot( hypot( obstacle_y , intersect_centers_y ) , ( intersect_radius - obstacle_y ) ) , 4.59 ) ) , obstacle_y ) , ( hypot( ( p_div( -7.38 , ( obstacle_x + velocity_x ) ) - p_div( p_div( velocity_y , intersect_radius ) , hypot( velocity_y , velocity_y ) ) ) , velocity_y ) + hypot( ( ( -7.19 + p_div( velocity_x , obstacle_y ) ) * hypot( p_div( intersect_centers_y , obstacle_x ) , p_div( velocity_y , obstacle_y ) ) ) , ( obstacle_x * intersect_centers_x ) ) ) ) ) <= velocity_y else 'LINKS' if velocity_x <= velocity_x and direction else 'RECHTS' if not intersect_centers_x > p_div( intersect_centers_x , obstacle_x ) and direction else 'RECHTS' if direction and hypot( obstacle_x , intersect_radius ) < hypot( hypot( velocity_y , obstacle_y ) , obstacle_x ) or ( intersect_radius <= obstacle_x ) or ( intersect_radius + intersect_centers_y ) != hypot( intersect_radius , obstacle_y ) and hypot( intersect_radius , velocity_y ) > hypot( p_div( obstacle_x , intersect_centers_y ) , ( obstacle_y - velocity_y ) ) and ( velocity_x != intersect_centers_x ) and ( intersect_centers_y >= obstacle_y or obstacle_y == intersect_centers_x and hypot( obstacle_y , obstacle_x ) > p_div( velocity_x , intersect_radius ) ) else 'LINKS' if 7.78 <= -9.26 and velocity_y == -3.91 and 9.63 != p_div( ( obstacle_x + p_div( p_div( hypot( velocity_x , velocity_x ) , p_div( intersect_radius , intersect_centers_y ) ) , hypot( hypot( obstacle_x , velocity_x ) , velocity_y ) ) ) , hypot( p_div( -6.55 , ( hypot( intersect_centers_y , intersect_centers_x ) - obstacle_x ) ) , velocity_x ) ) and 3.01 >= ( hypot( velocity_y , hypot( -8.86 , p_div( -1.00 , 3.99 ) ) ) + velocity_x ) or direction else 'LINKS' if not direction or ( p_div( velocity_x , velocity_y ) * obstacle_y ) <= hypot( 4.94 , p_div( intersect_radius , obstacle_y ) ) else 'RECHTS' if direction or velocity_x != velocity_x else 'RECHTS' if intersect_centers_x <= obstacle_x and not obstacle_y != velocity_y and velocity_x <= p_div( obstacle_y , 0.16 ) and -5.91 > hypot( intersect_centers_x , 3.29 ) or ( obstacle_x > obstacle_x ) and ( intersect_radius >= obstacle_x or velocity_y != velocity_x and ( velocity_x + velocity_x ) >= -2.14 ) or not direction else 'RECHTS' if not direction or intersect_centers_y >= obstacle_y else 'LINKS' if direction or velocity_y <= intersect_radius and -0.72 == hypot( 2.64 , p_div( velocity_y , obstacle_y ) ) else 'RECHTS' if direction and not not not not ( velocity_y < velocity_x and not velocity_y <= obstacle_x ) and not 3.29 == p_div( hypot( -5.21 , ( hypot( intersect_centers_y , 4.54 ) + p_div( ( -2.86 + ( p_div( p_div( 9.48 , ( velocity_x + intersect_radius ) ) , velocity_x ) + 2.94 ) ) , ( ( hypot( 0.00 , 3.97 ) - 2.77 ) + p_div( p_div( p_div( intersect_centers_y , p_div( intersect_centers_x , intersect_radius ) ) , p_div( -4.24 , hypot( obstacle_x , obstacle_x ) ) ) , hypot( p_div( -5.63 , 5.70 ) , hypot( p_div( intersect_centers_x , obstacle_x ) , 3.11 ) ) ) ) ) ) ) , ( hypot( hypot( 1.57 , obstacle_x ) , p_div( p_div( 0.32 , -5.40 ) , p_div( hypot( hypot( hypot( hypot( intersect_radius , velocity_y ) , ( obstacle_y + obstacle_y ) ) , -2.86 ) , -4.17 ) , 2.62 ) ) ) - hypot( -0.98 , 7.25 ) ) ) else 'LINKS'

Genotype:
[94234, 98052, 78858, 1795, 45871, 50353, 26489, 69715, 10227, 76361, 24564, 67110, 68413, 58139, 15580, 95646, 66468, 82258, 79709, 12507, 21710, 37189, 59565, 58302, 82305, 20850, 2706, 70863, 37198, 32026, 75517, 57298, 78294, 999, 70574, 33977, 40950, 42289, 60205, 26667, 64894, 65749, 31962, 90214, 73774, 47189, 85669, 26864, 70141, 81625, 34240, 45783, 3066, 82458, 18956, 92326, 18570, 35262, 331, 5842, 25422, 63234, 35117, 34277, 10055, 36502, 88089, 18360, 11662, 37570, 75835, 92562, 8591, 45770, 17822, 59558, 65469, 28765, 57636, 71371, 68481, 26515, 164, 67507, 92042, 70122, 80230, 17465, 60715, 72002, 83289, 54035, 84181, 1169, 92632, 97884, 1758, 86141, 76118, 8050, 86179, 48905, 49283, 49945, 42762, 82305, 40687, 9825, 40215, 45738, 76670, 18585, 66355, 74315, 26926, 87440, 43642, 15003, 66187, 61272, 26756, 1232, 16992, 28246, 72847, 51125, 51552, 19668, 87619, 65074, 38674, 84411, 76711, 21157, 40575, 62017, 77985, 30080, 33635, 23553, 99171, 57777, 15232, 42818, 54662, 281, 70808, 61738, 62731, 78374, 87474, 84451, 69664, 61356, 17103, 25387, 16, 5582, 53348, 47608, 16030, 70823, 37805, 59487, 24309, 15190, 10775, 25693, 69030, 18638, 35656, 10274, 59302, 61174, 20695, 13409, 87155, 40072, 6104, 67038, 35094, 31712, 906, 34392, 45037, 92957, 1793, 71018, 22849, 71355, 23593, 93204, 73930, 13676, 47971, 43582, 52157, 74605, 3618, 49095, 1248, 43258, 50740, 60367, 80345, 78672, 32925, 37995, 62715, 5208, 17749, 71134, 58506, 12761, 58533, 67507, 45871, 61159, 19893, 90372, 75085, 84957, 15055, 88309, 96401, 6333, 23557, 35235, 11663, 20980, 14374, 21992, 69670, 84587, 11330, 46806, 14954, 68595, 2698, 25115, 80095, 13055, 97395, 55970, 14055, 94372, 55913, 72358, 68797, 40960, 47226, 62730, 71918, 56861, 50353, 21492, 66838, 91514, 41610, 86514, 66215, 70656, 2715, 22885, 16546, 2068, 49783, 14930, 60240, 83138, 22786, 94459, 61614, 88460, 71775, 98182, 72084, 21652, 71965, 89082, 9220, 64641, 80642, 91235, 17012, 57537, 18018, 79191, 2105, 2456, 86594, 97122, 40673, 54253, 74670, 40253, 49095, 1248, 3853, 84768, 9088, 34520, 25717, 52105, 55612, 9370, 17230, 47596, 47960, 46922, 10034, 50271, 64719, 13585, 16816, 73629, 89790, 16320, 57637, 83451, 29557, 36110, 92994, 18851, 37759, 92110, 88265, 37815, 25700, 96664, 88217, 75458, 16100, 52656, 40340, 27584, 30243, 78676, 45208, 14940, 87593, 94755, 73471, 88812, 4253, 46737, 82945, 53700, 18880, 45816, 31309, 83600, 16979, 72667, 8530, 94261, 87278, 75188, 50752, 690, 85342, 44310, 32429, 40565, 47270, 74319, 40055, 65661, 5464, 12976, 86061, 33882, 62795, 40678, 49484, 23720, 56263, 2509, 43356, 45474, 48409, 33485, 7004, 61228, 24825, 11648, 44052, 58593, 64213, 81675, 3623, 3200, 82561, 48894, 11972, 78640, 20613, 60980, 79830, 31945, 62665, 1062, 94580, 16059, 39293, 57791, 11452, 24144, 29128, 10681, 92018, 32358, 36057, 56317, 73408, 31749, 17846, 26317, 22733, 56689, 31572, 98826, 19920, 38389, 1025, 22756, 39292, 75376, 6522, 65729, 40013, 92539, 65501, 53286, 16252, 62211, 21983, 9566, 60689, 81526, 71683, 77489, 38117, 23174, 87540, 55660, 79587, 80292, 23872, 9158, 91620, 64447, 73930, 13676, 89677, 32700, 32034, 78470, 93073, 79878, 50163, 33490, 44488, 37635, 18891, 78955, 25717, 76048, 57717, 946, 74670, 14107, 45466, 20295, 78705, 86459, 26868, 49605, 79549, 60785, 16989, 46621, 94960, 36921, 97455, 83949, 85689, 14253, 77181, 24982, 66904, 64643, 61710, 63581, 52916, 53089, 78968, 7930, 61179, 95218, 81426, 32620, 29155, 35158, 238, 226, 63312, 24941, 70004, 34251, 17011, 39230, 91630, 43276, 80284, 39144, 7133, 53089, 65799, 6075, 39325, 65917, 11680, 17614, 4367, 57836, 6182, 23251, 57227, 74867, 69715, 15580, 95646, 66468, 82258, 79709, 12507, 21710, 37189, 59565, 58302, 35150, 20850, 2706, 70863, 37198, 32026, 75517, 57298, 78294, 999, 70574, 33977, 40950, 42289, 60205, 26667, 81788, 12873, 91299, 62004, 68503, 19208, 27040, 46778, 51501, 17703, 84755, 97949, 67667, 95745, 44308, 73493, 86166, 97058, 91613, 78682, 62067, 20953, 20997, 50330, 4863, 27454, 67200, 86814, 74289, 91495, 41632, 54112, 21600, 28329, 31545, 56844, 77489, 57210, 43399, 92196, 20594, 56560, 6571, 34125, 46067, 42725, 47177, 83246, 92625, 63548, 26230, 30641, 69806, 32034, 79382, 86216, 59918, 87895, 92805, 59829, 1921, 51024, 24918, 82580, 609, 66606, 5755, 62070, 33603, 34732, 8129, 67707, 98438, 77015, 66838, 91514, 46710, 27760, 4095, 52937, 48228, 69420, 1998, 76148, 59267, 25900, 33442, 95685, 44039, 30340, 51508, 33836, 6405, 1837, 40199, 180, 82128, 54495, 40310, 46283, 4781, 9780, 44819, 41124, 63977, 4764, 40960, 25513, 88977, 62665, 52001, 56612, 56816, 51068, 46909, 4242, 37251, 4774, 69715, 90586, 74747, 92888, 52582, 79473, 74524, 71039, 17027, 5464, 12976, 86061, 33882, 62795, 40678, 49484, 23720, 56263, 40037, 74923, 57447, 90968, 2044, 44953, 99152, 81585, 19109, 48015, 45660, 30927, 40175, 32314, 79050, 8209, 78221, 59281, 50517, 61570, 72567, 42092, 3376, 83008, 50206, 3653, 39144, 9092, 49266, 14144, 72567, 34275, 78112, 14905, 53204, 65119, 25450, 37469, 86396, 71516, 7479, 96590, 79663, 30541, 13360, 58309, 11603, 58302, 43677, 7456, 52794, 85856, 13490, 12788, 97177, 6075, 24316, 38212, 6057, 47024, 39060, 73471, 91701, 29790, 50207, 94822, 20718, 8132, 12281, 5755, 62070, 33603, 34732, 8129, 16060, 46602, 25658, 24806, 56103, 95673, 15835, 92172, 1281, 42479, 88473, 52470, 84953, 42136, 25464, 91612, 62674, 71235, 68124, 16854, 81732, 84054, 86941, 24805, 21089, 8622, 14438, 58096, 14889, 18249, 66007, 17957, 72301, 85469, 79104, 84839, 27294, 11248, 91579, 57710, 18730, 46965, 52975, 81286, 40095, 79343, 79614, 63641, 62067, 97536, 7332, 4869, 94174, 33519, 81794, 58283, 81566, 72950, 67658, 59530, 93120, 30800, 46996, 11619, 79280, 24033, 15999, 97097, 22852, 4981, 50360, 68264, 46922, 94787, 1717, 91935, 71647, 21272, 1167, 14820, 36618, 2797, 39615, 98154, 66840, 68161, 96452, 86606, 50062, 27523, 78684, 39532, 22584, 6998, 44650, 81399, 82070, 74238, 55133, 54627, 72401, 99174, 53937, 86915, 55666, 82653, 89271, 92567, 35832, 80475, 46167, 95990, 79963, 14402, 65000, 44016, 50860, 7206, 96636, 15857, 4984, 86073, 78781, 14491, 33259, 79508, 96473, 98061, 72348, 2012, 53521, 83405, 59147, 51220, 63185, 19177, 33247, 57991, 40807, 34204, 77900, 11543, 48542, 10951, 835, 16641, 56985, 13414, 52110, 2462, 93778, 7953, 15063, 91073, 15395, 73950, 36765, 81556, 88459, 40235, 55696, 49791, 90430, 11617, 8041, 24805, 21089, 8622, 14438, 58096, 94751, 40507, 54217, 92644, 39221, 22307, 82591, 90248, 20150, 29782, 35486, 97212, 76552, 39088, 19571, 78158, 60367, 91100, 71319, 54178, 58871, 73327, 99890, 47937, 87922, 19825, 35401, 57227, 83749, 49664, 70285, 74122, 83635, 19719, 46828, 17197, 87529, 20409, 65435, 48734, 68679, 28892, 62827, 7857, 83016, 30384, 54797, 59391, 14355, 51205, 85224, 95966, 16147, 93867, 54679, 80789, 70257, 60496, 559, 80247, 88802, 32253, 39040, 16932, 9851, 31183, 26174, 77624, 65034, 88276, 3791, 27242, 60911, 31156, 40488, 52702, 22629, 14185, 51937, 48040, 49824, 97919, 99991, 26094, 34533, 22570, 48589, 18450, 50329, 33757, 56995, 34207, 90683, 17484, 86334, 9483, 53636, 14772, 58797, 95529, 5335, 83925, 30713, 4592, 13841, 38211, 83323, 48474, 57901, 43398, 42807, 88057, 10188, 98017, 77507, 81108, 12947, 43398, 28292, 32001, 68706, 11053, 95018, 94319, 70354, 67224, 55359, 36223, 6731, 84506, 74281, 76339, 70862, 63486, 27431, 85625, 91459, 42169, 7865, 17391, 37263, 10886, 9108, 36491, 44353, 76578, 14776, 98021, 96604, 70255, 99612, 86229, 13295, 33183, 95259, 38794, 88909, 96540, 94545, 75055, 30693, 98207, 69383, 62661, 5540, 29943, 53147, 67934, 71225, 84563, 17518, 30874, 27775, 76539, 18312, 2458, 61749, 13227, 54344, 56119, 1732, 19145, 11076, 31962, 41906, 451, 59346, 98901, 72967, 29817, 85497, 67965, 67312, 54194, 30430, 14639, 58327, 6425, 36461, 70468, 7709, 82726, 37403, 76468, 26416, 44462, 57544, 75285, 36982, 15675, 20372, 6239, 37630, 45573, 58090, 44420, 79853, 91914, 99485, 3199, 92526, 62572, 19456, 58588, 85543, 22879, 6906, 53889, 4083, 5164, 58027, 82624, 13430, 87367, 5767, 34895, 55952, 40899, 95350, 65587, 31707, 22484, 14314, 66518, 4073, 10408, 88764, 99783, 36121, 69618, 89858, 78870, 14764, 50521, 60280, 59315, 95882, 23998, 95466, 22923, 57056, 61757, 70511, 80269, 28883, 9642, 1376, 37519, 24038, 44777, 17162, 28853, 6137, 4365, 44254, 87790, 96503, 8071, 31452, 35316, 85289, 73677, 90595, 20118, 5945, 38323, 5352, 87948, 80861, 16846, 96524, 23083, 44993, 65709, 38064, 346, 13103, 11141, 8442, 8614, 52280, 44590, 81222, 83352, 37968, 54115, 99746, 23058, 87995, 29623, 4857, 43827, 91091, 90922, 42324, 86124, 42361, 26064, 41047, 42590, 436, 31298, 85562, 35340, 32682, 54619, 52800, 50091, 30147, 5706, 75673, 94162, 95835, 31102, 50645, 48036, 54486, 65374, 59943, 60603, 28132, 78474, 37340, 31595, 39973, 96234, 45266, 5157, 93486, 56910, 83235, 94838, 59428, 68967, 39922, 81474, 37481, 99273, 58776, 38395, 96691, 1086, 57103, 3012, 14906, 3344, 80822, 30171, 2144, 10466, 19066, 68053, 61503, 75119, 20960, 93412, 13656, 50322, 87760, 10503, 32457, 17108, 59453, 23941, 64073, 58639, 38413, 74779, 69255, 17705, 26866, 41823, 43430, 25891, 4697, 69841, 48118, 81560, 62659, 3815, 30697, 43281, 10090, 27261, 93509, 21440, 92997, 56125, 53065, 35494, 83518, 92730, 90875, 54604, 73823, 21765, 40121, 44051, 3696, 34607, 21328, 33565, 51921, 81284, 48893, 48993, 6462, 86117, 4625, 33623, 20626, 44864, 29736, 90849, 41159, 3607, 616, 45721, 13357, 82034, 77083, 31532, 53021, 61520, 68452, 11850, 59380, 16109, 6765, 17447, 94885, 41789, 48622, 65754, 85059, 8400, 71589, 48294, 63416, 22593, 6739, 68186, 197, 50741, 41427, 2126, 9108, 41333, 42067, 73767, 68535, 90668, 10752, 2551, 61138, 48985, 98912, 99135, 25761, 58839, 35167, 38903, 73996, 51805, 59045, 84921, 36407, 28731, 51695, 90699, 37021, 91907, 8482, 89197, 56728, 34075, 29097, 61031, 17579, 28736, 23449, 22907, 2239, 99417, 2664, 52640, 60911, 66647, 26097, 47475, 75898, 32969, 25332, 60088, 60324, 66090, 52724, 61787, 36102, 10382, 13285, 27033, 46746, 84766, 26708, 88572, 77797, 23086, 43776, 72807, 52384, 4935, 96121, 89207, 81837, 56441, 93466, 29185, 95501, 58807, 93830, 57003, 12743, 60209, 30331, 76952, 48135, 44523, 63308, 23350, 31232, 93404, 31976, 73979, 55963, 86442, 88335, 41637, 19061, 69605, 54397, 46460, 24537, 2726, 52598, 93665, 2346, 58473, 16820, 56886, 97519, 6858]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 9) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))))))  )))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 6) (<digit> 8)))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 2) (<digit> 2)))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 9) (<digit> 5)))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 7) (<digit> 2)))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 5) (<digit> 3)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 7) (<digit> 2)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 7) (<digit> 5)))  )))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 7) (<digit> 5)))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 4) (<digit> 4)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 7) (<digit> 6)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 5) (<digit> 9)))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 3) (<digit> 8)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 1) (<digit> 9)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y)))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  )))))))  and  (<boolean_feature> direction))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))))))  or  (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<comp_op> !=)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  )))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_x)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))))))  )))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 7) (<digit> 8)))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 2) (<digit> 6))))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> ==)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 9) (<digit> 1))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 6) (<digit> 3)))   (<comp_op> !=)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 5) (<digit> 5)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 0) (<digit> 1)))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 8) (<digit> 6)))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 0) (<digit> 0)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 9) (<digit> 9)))  ))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))))))  or  (<boolean_feature> direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 9) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x)))))))  else  (<expr> (<action> 'RECHTS'))))))  if  (<direction_compound_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y))))))  and  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 1) (<digit> 6)))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 9) (<digit> 1)))   (<comp_op> >)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 2) (<digit> 9)))  ))))))  or  (<bool_term> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_x))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> >=)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 1) (<digit> 4)))))))  ))))  or  (<boolean_feature> not direction))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  else  (<expr> (<action> 'LINKS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  or  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_radius)))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 7) (<digit> 2)))   (<comp_op> ==)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))))  else  (<expr> (<action> 'RECHTS'))))))))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x)))))))  )))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 2) (<digit> 9)))   (<comp_op> ==)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 2) (<digit> 1)))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 5) (<digit> 4)))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 8) (<digit> 6)))   (<math_op> +)   (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 4) (<digit> 8)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 9) (<digit> 4)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 0) (<digit> 0)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 9) (<digit> 7)))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 7) (<digit> 7)))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 2) (<digit> 4)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 6) (<digit> 3)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 7) (<digit> 0)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 1) (<digit> 1)))  ))  ))  ))  ))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 5) (<digit> 7)))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 3) (<digit> 2)))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 4) (<digit> 0)))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 8) (<digit> 6)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 1) (<digit> 7)))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 2)))  ))  ))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 9) (<digit> 8)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 2) (<digit> 5)))  ))  ))  ))))))))  else  (<expr> (<action> 'LINKS'))))

Fitness:
9.659469307002736