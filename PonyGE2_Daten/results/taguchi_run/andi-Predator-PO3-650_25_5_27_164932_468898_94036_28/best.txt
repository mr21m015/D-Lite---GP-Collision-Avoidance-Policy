Generation:
50

Phenotype:
'RECHTS' if not direction and ( velocity_x == intersect_centers_x ) else 'RECHTS' if not direction and intersect_radius <= velocity_y and 6.20 <= 7.46 else 'LINKS' if not direction and not not hypot( obstacle_x , intersect_centers_x ) < -7.90 and p_div( 0.91 , 0.09 ) <= hypot( p_div( hypot( velocity_x , p_div( intersect_centers_x , velocity_y ) ) , ( hypot( intersect_centers_x , intersect_centers_x ) + 8.63 ) ) , p_div( p_div( ( intersect_centers_x + obstacle_x ) , p_div( intersect_centers_y , velocity_x ) ) , hypot( intersect_centers_y , hypot( intersect_centers_x , intersect_centers_y ) ) ) ) or p_div( intersect_centers_x , ( p_div( -2.45 , intersect_centers_x ) * 0.10 ) ) <= ( ( p_div( hypot( intersect_centers_y , obstacle_x ) , ( ( velocity_x + velocity_x ) - -4.72 ) ) * p_div( p_div( hypot( velocity_y , velocity_y ) , obstacle_y ) , ( p_div( intersect_radius , obstacle_y ) * ( velocity_x * velocity_y ) ) ) ) - ( hypot( intersect_centers_x , -1.59 ) + hypot( ( p_div( velocity_y , intersect_centers_x ) - p_div( intersect_centers_x , obstacle_y ) ) , hypot( 5.62 , hypot( velocity_y , obstacle_x ) ) ) ) ) else 'RECHTS' if not direction and ( ( intersect_centers_x < intersect_radius ) ) or not hypot( 0.96 , hypot( intersect_centers_x , intersect_centers_y ) ) != velocity_x and ( velocity_x == obstacle_y or not velocity_y > intersect_radius ) and not not ( intersect_centers_x == intersect_centers_y ) and not not ( not intersect_centers_y == intersect_radius ) and ( not obstacle_y > intersect_radius and not not intersect_centers_x >= velocity_y and not not obstacle_x != ( intersect_centers_y + obstacle_y ) and ( not velocity_y == velocity_x ) ) and p_div( obstacle_x , ( velocity_y - hypot( ( 4.77 - -4.30 ) , hypot( 3.52 , intersect_centers_y ) ) ) ) < p_div( -1.75 , ( p_div( intersect_centers_y , 0.98 ) - 5.72 ) ) else 'LINKS' if not direction or not ( intersect_radius != obstacle_x ) or not ( not velocity_y == velocity_x ) or ( 8.65 + -5.37 ) > ( -0.04 + intersect_centers_x ) and not not p_div( p_div( obstacle_y , obstacle_x ) , 5.83 ) < hypot( intersect_centers_y , hypot( intersect_centers_x , obstacle_x ) ) and ( not intersect_radius >= obstacle_y ) and ( intersect_radius != intersect_radius or intersect_centers_y >= obstacle_y and hypot( obstacle_y , obstacle_x ) == ( velocity_y - velocity_y ) or hypot( hypot( intersect_centers_x , intersect_centers_y ) , ( obstacle_y - obstacle_x ) ) != intersect_centers_x or obstacle_y != intersect_radius and not velocity_x == intersect_radius and not ( velocity_x * intersect_radius ) < velocity_x and ( p_div( p_div( velocity_y , velocity_x ) , obstacle_x ) * obstacle_x ) != ( obstacle_x - p_div( 4.26 , intersect_centers_x ) ) ) else 'LINKS' if direction and velocity_y == hypot( -7.09 , p_div( velocity_y , intersect_radius ) ) and ( obstacle_y == intersect_centers_y or velocity_x < p_div( intersect_centers_y , intersect_centers_x ) or not not intersect_centers_x == velocity_y ) and not not not not 6.07 == -7.32 and ( not obstacle_y <= intersect_centers_y and ( velocity_x + velocity_y ) != intersect_radius or ( -6.92 * p_div( obstacle_x , velocity_y ) ) <= 0.47 or velocity_x > intersect_centers_y and not intersect_radius < intersect_centers_x and -5.96 < p_div( hypot( velocity_x , intersect_centers_x ) , ( intersect_centers_x - obstacle_y ) ) and not not 3.77 > obstacle_y and ( not intersect_centers_y == velocity_y ) ) and not not hypot( obstacle_y , hypot( velocity_y , hypot( ( hypot( p_div( intersect_centers_x , velocity_y ) , 1.63 ) - ( hypot( intersect_centers_x , intersect_centers_x ) * -0.36 ) ) , hypot( p_div( ( obstacle_x + intersect_centers_y ) , hypot( intersect_centers_x , velocity_x ) ) , intersect_radius ) ) ) ) != intersect_radius and ( obstacle_x <= velocity_x and not intersect_centers_y >= obstacle_x and hypot( -2.76 , hypot( intersect_centers_x , intersect_centers_y ) ) <= ( ( intersect_centers_x + obstacle_x ) - 2.23 ) or not not ( intersect_radius + obstacle_y ) != p_div( obstacle_x , intersect_centers_y ) or not not not intersect_radius <= obstacle_x and ( velocity_x == intersect_centers_y and not intersect_centers_x != velocity_y ) or p_div( velocity_x , hypot( hypot( ( p_div( intersect_centers_y , obstacle_y ) + p_div( obstacle_y , obstacle_x ) ) , ( 5.41 - -1.95 ) ) , p_div( intersect_centers_y , 4.03 ) ) ) > -6.61 or hypot( ( ( velocity_x - intersect_centers_x ) - p_div( -9.70 , p_div( velocity_y , obstacle_x ) ) ) , velocity_x ) >= ( hypot( p_div( -5.41 , hypot( intersect_radius , velocity_y ) ) , ( p_div( 0.14 , ( velocity_y * velocity_x ) ) + 9.28 ) ) + intersect_radius ) and not p_div( -7.54 , ( p_div( p_div( p_div( obstacle_x , intersect_centers_x ) , p_div( velocity_x , velocity_y ) ) , p_div( hypot( velocity_x , intersect_centers_y ) , -8.43 ) ) * hypot( p_div( intersect_radius , ( obstacle_x - velocity_y ) ) , ( intersect_radius * obstacle_y ) ) ) ) <= p_div( 9.14 , ( -8.45 - -2.77 ) ) ) or 4.00 >= p_div( velocity_y , ( 4.09 - p_div( p_div( ( 5.09 + hypot( p_div( 8.12 , intersect_radius ) , -8.27 ) ) , ( velocity_x - 5.58 ) ) , ( hypot( ( p_div( obstacle_x , velocity_x ) - velocity_x ) , hypot( hypot( hypot( obstacle_x , p_div( intersect_centers_x , obstacle_x ) ) , ( -3.64 * p_div( velocity_x , intersect_centers_x ) ) ) , p_div( intersect_radius , 2.63 ) ) ) * intersect_centers_y ) ) ) ) and ( 3.15 - p_div( intersect_centers_x , hypot( 5.56 , hypot( hypot( p_div( -7.22 , hypot( ( hypot( intersect_centers_x , velocity_x ) - p_div( intersect_centers_y , obstacle_y ) ) , hypot( ( p_div( obstacle_x , obstacle_x ) * -3.85 ) , hypot( 1.73 , p_div( velocity_y , velocity_y ) ) ) ) ) , hypot( velocity_x , -0.31 ) ) , p_div( -3.67 , velocity_y ) ) ) ) ) != ( hypot( hypot( p_div( hypot( ( hypot( -1.50 , intersect_centers_x ) - 6.04 ) , ( ( ( p_div( intersect_centers_x , 0.28 ) * ( ( obstacle_x * velocity_x ) * p_div( obstacle_x , intersect_radius ) ) ) - p_div( 9.61 , hypot( obstacle_x , -6.09 ) ) ) - p_div( ( hypot( ( intersect_centers_x + velocity_y ) , p_div( obstacle_x , intersect_radius ) ) + p_div( ( obstacle_y + obstacle_x ) , hypot( obstacle_x , obstacle_x ) ) ) , -6.33 ) ) ) , 2.72 ) , ( intersect_centers_y - p_div( 3.44 , p_div( ( obstacle_y - ( hypot( hypot( intersect_centers_y , obstacle_y ) , 2.32 ) * hypot( obstacle_x , intersect_radius ) ) ) , hypot( -2.35 , velocity_x ) ) ) ) ) , 4.90 ) * ( -5.07 * -2.13 ) ) else 'RECHTS' if direction and not velocity_x > obstacle_y and ( intersect_radius < velocity_x ) and not not ( hypot( intersect_centers_y , intersect_radius ) * hypot( obstacle_y , obstacle_x ) ) == -7.65 and not ( velocity_y <= intersect_centers_y or hypot( velocity_x , obstacle_x ) > p_div( velocity_x , obstacle_x ) ) or p_div( intersect_centers_y , hypot( p_div( p_div( 5.36 , p_div( intersect_centers_x , velocity_y ) ) , hypot( p_div( ( intersect_radius + velocity_y ) , velocity_x ) , ( ( obstacle_y - intersect_centers_y ) * p_div( intersect_centers_x , intersect_centers_y ) ) ) ) , p_div( intersect_centers_y , 1.48 ) ) ) < hypot( p_div( hypot( ( -3.56 + -3.69 ) , hypot( hypot( intersect_centers_x , obstacle_y ) , ( ( obstacle_x * velocity_y ) * -1.75 ) ) ) , ( 8.98 + p_div( obstacle_x , p_div( -4.02 , ( intersect_centers_y - intersect_centers_x ) ) ) ) ) , 2.00 ) else 'RECHTS' if direction and not not not intersect_radius < ( hypot( hypot( velocity_y , ( ( obstacle_x * velocity_y ) - ( velocity_y - intersect_radius ) ) ) , obstacle_y ) - hypot( hypot( velocity_y , ( -1.17 + 2.61 ) ) , 4.26 ) ) else 'LINKS'

Genotype:
[39954, 54937, 42712, 56087, 57852, 53623, 60382, 64830, 12785, 31948, 69038, 69009, 46710, 2754, 19574, 59564, 98304, 85281, 28338, 28230, 7782, 40078, 55075, 95830, 29730, 75233, 32127, 60118, 86454, 85569, 28684, 95183, 34878, 38289, 54694, 67760, 54847, 35541, 10355, 74640, 31539, 85995, 43016, 10877, 77974, 88356, 77482, 92630, 69357, 91766, 45926, 29598, 59277, 36314, 7906, 23171, 29307, 69102, 89707, 90621, 58522, 86179, 11786, 82, 67045, 94242, 95334, 53753, 82485, 65306, 18795, 50736, 89095, 24921, 41311, 56229, 54597, 43969, 71460, 24825, 84832, 81842, 99606, 26456, 67392, 80090, 4179, 13331, 73546, 33329, 86092, 22220, 77030, 75329, 47181, 71298, 58042, 85593, 72620, 46359, 4447, 29400, 16037, 12085, 47851, 64434, 87803, 41705, 78568, 32780, 55720, 61017, 28316, 60785, 6906, 25898, 81686, 22443, 88952, 43932, 25869, 53000, 52836, 492, 25255, 81525, 60967, 49985, 81964, 32175, 83004, 32888, 6230, 17221, 99093, 74385, 86296, 13180, 92065, 48724, 51291, 62427, 72382, 43600, 97020, 57339, 20567, 67836, 23749, 58475, 2392, 57084, 54925, 76110, 79051, 13121, 61706, 71654, 40814, 12120, 35191, 86250, 5757, 26774, 48294, 47892, 43563, 95325, 44115, 31900, 80048, 21919, 40259, 27860, 9336, 38883, 10340, 36272, 18706, 30631, 30450, 97113, 13784, 7837, 40602, 91427, 2992, 85487, 70173, 2130, 89816, 17885, 83264, 83915, 39666, 37984, 53712, 75030, 42954, 16280, 71404, 16967, 71269, 40120, 4940, 31553, 55920, 76894, 92071, 36659, 40148, 81350, 50659, 3836, 57134, 19811, 58341, 82015, 6709, 72306, 94713, 74339, 42017, 5995, 48348, 2870, 71680, 25651, 96617, 89610, 55419, 55055, 30979, 72963, 91921, 75721, 1932, 74775, 67886, 84812, 81038, 85145, 7734, 69395, 57767, 61803, 44490, 3416, 20949, 61945, 64040, 50483, 77342, 48736, 26510, 43816, 8476, 35523, 19443, 49960, 1435, 77047, 27630, 68112, 56609, 60891, 19081, 37719, 59185, 57790, 8356, 78969, 54056, 54273, 81666, 15053, 23468, 16010, 60209, 61826, 28903, 37955, 85764, 355, 34973, 22769, 88170, 48025, 2705, 25181, 50384, 15288, 9660, 60316, 30035, 84180, 11692, 39575, 79454, 55192, 81556, 70764, 39399, 58005, 38303, 75186, 56705, 93494, 90361, 7441, 8756, 69552, 63898, 1032, 43002, 2385, 65485, 13288, 19590, 25012, 47182, 30412, 23492, 53778, 5442, 98629, 52872, 34251, 84720, 21834, 62770, 71070, 97204, 30293, 86522, 66949, 99241, 90077, 99686, 77254, 93771, 75900, 9315, 42648, 45618, 6615, 87215, 19387, 66193, 77160, 69268, 59295, 3514, 84734, 13660, 63972, 63928, 29821, 27429, 5192, 28385, 38552, 449, 98484, 4695, 91288, 45984, 28520, 78019, 18749, 80366, 88758, 46669, 78369, 89369, 46840, 38849, 85942, 50110, 49502, 52764, 37028, 96692, 95250, 6345, 73479, 2545, 34558, 44149, 57573, 10719, 87381, 82140, 56052, 78874, 20797, 95157, 36838, 28106, 5513, 82907, 48324, 72993, 30040, 41378, 46926, 55365, 54868, 90953, 84455, 37212, 85755, 58850, 77131, 44917, 13476, 78228, 93655, 39491, 91807, 20805, 80464, 14337, 94005, 24921, 60371, 63098, 97440, 88930, 17029, 20358, 59536, 54386, 73590, 37216, 86845, 89877, 89222, 99234, 87607, 21101, 44425, 81161, 96441, 55393, 85743, 80116, 73648, 24748, 8003, 83580, 91198, 69951, 28204, 97785, 61217, 76973, 37725, 58362, 23544, 91288, 27131, 80366, 88758, 46669, 78369, 89369, 46840, 38849, 85942, 50110, 49502, 29111, 60091, 71003, 48568, 76503, 59503, 97209, 43546, 85961, 64522, 40928, 92076, 27985, 75792, 84416, 50430, 65387, 87475, 87933, 65497, 53244, 89074, 66686, 53353, 82135, 25660, 77860, 98154, 24345, 80560, 32088, 53068, 79708, 37410, 37998, 70142, 36122, 21275, 17056, 21960, 65908, 80286, 46947, 68522, 24155, 70858, 78103, 31807, 69418, 10455, 50128, 58913, 49120, 75733, 32075, 76023, 81590, 87110, 6978, 15739, 6138, 83679, 43065, 98485, 95180, 53820, 21529, 97574, 86317, 64519, 9159, 88854, 1840, 42567, 7400, 21275, 43248, 7859, 9500, 97204, 38343, 66888, 69072, 95409, 22360, 32593, 41804, 14835, 49039, 17898, 11360, 4053, 12305, 48339, 27305, 69072, 24328, 51929, 2005, 35573, 95464, 99705, 10198, 27160, 12423, 93537, 33808, 77668, 66280, 14945, 62805, 66977, 30444, 17295, 61667, 22711, 64440, 18532, 91091, 92435, 78155, 15715, 51859, 38045, 87294, 91167, 19517, 75070, 5205, 60401, 42550, 52194, 217, 84654, 41370, 32980, 94939, 81868, 23120, 50073, 3808, 62385, 84578, 45979, 77685, 18905, 63698, 44540, 5357, 29659, 84200, 56243, 73881, 59657, 96049, 6287, 77307, 59505, 14132, 21035, 46723, 68675, 55485, 89948, 37140, 21416, 68657, 84669, 86590, 89442, 65545, 25507, 77011, 7432, 332, 21654, 56152, 24286, 47750, 40096, 72003, 2581, 37000, 9892, 63265, 9294, 27281, 13373, 80363, 96111, 46991, 54832, 50127, 34238, 19815, 30820, 25084, 26238, 22051, 55291, 18391, 47177, 90540, 24619, 702, 85545, 38646, 49200, 26322, 932, 27119, 42071, 16908, 63184, 27039, 393, 51525, 59826, 38434, 39715, 67047, 38150, 46050, 35206, 5, 71118, 15391, 46672, 49775, 22562, 60310, 27048, 44092, 35038, 45556, 28020, 31262, 91470, 11865, 35848, 52900, 68025, 48553, 32968, 23503, 95182, 10770, 88284, 82671, 25710, 50632, 9496, 3580, 59677, 53800, 99496, 29244, 29541, 50277, 14593, 68682, 5333, 22653, 54287, 68714, 82985, 21504, 66058, 67545, 15666, 13115, 36222, 10239, 93895, 75048, 97914, 73891, 70019, 42380, 48214, 88320, 54595, 5746, 47369, 2655, 38033, 90032, 51840, 53971, 17584, 36306, 88825, 75353, 97836, 36989, 61532, 95699, 34437, 44935, 99585, 41750, 89606, 1971, 81406, 68164, 48262, 71380, 66704, 427, 11151, 50497, 59603, 4261, 6900, 86847, 14524, 41225, 40948, 71286, 84925, 62434, 1894, 29538, 80202, 85045, 10180, 3277, 36600, 35399, 17907, 44330, 73911, 33020, 15551, 75985, 91789, 6816, 91465, 9987, 30828, 97360, 41137, 39190, 16317, 31784, 74355, 86751, 17149, 25650, 54184, 49543, 15709, 51660, 2746, 59901, 60116, 42800, 13603, 55097, 19487, 66192, 32515, 45609, 83375, 48866, 18682, 74317, 65184, 24844, 88270, 88866, 95644, 95755, 82130, 89194, 94399, 74760, 82920, 39198, 61325, 98333, 76368, 84305, 23316, 43078, 57919, 65548, 91487, 10600, 36050, 36090, 6166, 29571, 37923, 83110, 75611, 40346, 67323, 86326, 48164, 51608, 87195, 23100, 31615, 23653, 30419, 24271, 54347, 90071, 2110, 75013, 1396, 86903, 88597, 25654, 48310, 95560, 45984, 72360, 88061, 24763, 18345, 71015, 45175, 59050, 43700, 40728, 59513, 85000, 1829, 24830, 73367, 55265, 70113, 82369, 90556, 55379, 27465, 41936, 63759, 66460, 30070, 41989, 21243, 86875, 4954, 3034, 66477, 98756, 26450, 72871, 65942, 34110, 44467, 15423, 98881, 26378, 99081, 68275, 9285, 68072, 73267, 50956, 77933, 40210, 30247, 83835, 16549, 64029, 84744, 87719, 94830, 24185, 22137, 39895, 86341, 11431, 42556, 4058, 99564, 33642, 86202, 60513, 82668, 31936, 73621, 89310, 56143, 54139, 44290, 6211, 36378, 33615, 99901, 25403, 862, 67805, 74959, 36695, 19615, 64411, 65612, 93565, 52876, 9685, 78702, 15103, 25845, 64556, 19791, 78830, 3993, 36917, 23226, 54965, 61702, 50982, 76579, 67605, 30917, 70996, 44525, 10942, 20338, 89940, 37928, 63540, 33145, 47357, 76170, 11276, 31360, 78669, 13663, 88277, 94585, 73512, 79528, 97858, 96429, 13142, 57030, 62931, 77160, 72111, 8460, 79042, 58665, 66959, 64560, 28815, 66509, 99266, 67475, 74470, 64115, 83624, 50101, 39586, 84016, 71258, 48703, 80401, 53219, 43855, 672, 43935, 69686, 44201, 32956, 62704, 34774, 14660, 24873, 45876, 2691, 38092, 12113, 49086, 67476, 34661, 67409, 51142, 16275, 3490, 60258, 87819, 65469, 17305, 38624, 10405, 20800, 92456, 46468, 52817, 71141, 267, 5283, 62539, 58977, 43680, 54997, 76550, 20663, 60295, 70430, 91270, 21082, 32006, 36829, 44823, 62042, 55131, 74305, 16267, 81655, 41254, 77011, 15613, 77910, 63870, 96415, 52191, 18514, 29957, 48911, 51182, 50216, 62650, 10461, 13714, 92579, 32885, 54417, 97115, 88245, 4051, 84231, 71766, 12801, 93882, 14549, 15722, 34758, 52653, 67220, 8472, 1648, 76194, 22499, 98482, 86001, 62231, 71531, 67977, 13685, 17114, 39544, 89032, 59052, 73737, 17495, 64739, 72905, 81438, 45292, 97340, 80169, 88080, 21405, 86347, 44598, 81690, 5577, 23615, 11852, 10061, 5840, 32777, 18278, 73614, 33333, 70937, 19063, 37172, 58765, 54021, 34749, 2655, 87384, 61291, 81545, 84111, 40064, 79090, 12210, 64838, 80450, 12996, 16209, 14132, 34256, 68157, 57892, 36089, 45751, 81444, 99974, 75866, 51317, 34193, 17818, 85274, 66015, 19837, 21421, 75063, 44425, 62342, 72817, 77927, 60103, 58776, 75555, 40194, 64886, 40597, 48790, 68734, 5310, 72750, 21836, 83182, 95960, 55117, 62779, 76351, 26414, 40814, 6284, 13490, 10049, 36358, 612, 60307, 63749, 78341, 16980, 27144, 46905, 79770, 3749, 80046, 62143, 15862, 93311, 84920, 21978, 98038, 66901, 36852, 68800, 2473, 18801, 46871, 24587, 94028, 82192, 55807, 64929, 93880, 27277, 80731, 841, 17080, 67032, 94065, 71025, 65178, 91459, 97838, 86174, 65992, 10115, 72278, 56195, 40045, 76345, 81105, 68171, 18938, 79503, 51108, 63180, 68057, 43817, 40095, 12656, 8615, 77416, 44309, 24676, 20180, 46471, 68303, 47456, 54894, 32030, 10202, 4045, 52526, 29655, 55825, 44342, 15885, 97204, 93586, 47908, 22964, 82652, 54396, 33583, 92690, 20510, 79381, 95277, 63923, 46054, 70826, 79712, 47818, 52083, 81531, 54415, 4780, 49087, 25315, 24367, 53918, 25836, 83075, 58422, 35015, 1105, 77236, 7618, 61203, 48967, 69511, 79410, 88541, 94977, 84492, 46612, 7323, 89949, 69873, 96160, 57764, 16715, 21264, 96895, 66047, 40835, 64912, 25630, 89254, 12878, 94824, 10182, 19635, 38328, 75555, 90219, 63203, 89291, 96365, 1549, 55113, 51578, 53545, 88878, 54591, 57816, 37680, 16961, 62757, 34183, 83002, 81790, 95871, 80875, 9848, 6513, 64995, 75696, 18281, 65911, 11175, 29960, 56113, 10411, 97437, 5006, 156, 32625, 90253, 69666, 52107, 54220, 57434, 16727, 93949, 47213, 20658, 8777, 2038, 37944, 24968, 85601, 81652, 90421, 30151, 99265, 18590, 49145, 24857, 32710, 59096, 85285, 71728, 40516, 80310, 43554, 75129, 8679, 84924, 44867, 59920, 71267, 37641, 32855, 72654, 54750, 83842, 65868, 31415, 26054, 52224, 69995, 22655, 47345, 36260, 49992, 75536, 29027, 76360, 46462, 5620, 4237, 33805, 98212, 47891, 80291, 3688, 25039, 61826, 11631, 2488, 68805, 68253, 3726, 49922, 84065, 95696, 59590, 86489, 18016, 65582, 87284, 10783, 4424, 94150, 34916, 41781, 98905, 52387, 70627, 34685, 56997, 41670, 73201, 95598, 41227, 79009, 27395, 74869, 38883, 51920, 69919, 75278, 47455, 6695, 75280, 88637, 48601, 44391, 5381, 22096, 38963, 2753, 58946, 63282, 56548, 81252, 91667, 21382, 33724, 1510, 84134, 44149, 70137, 66011, 47350, 33148, 18663, 3274, 27834, 28702, 12154, 71645, 6388, 31216, 26379, 74573, 13638, 31220, 38753, 38185, 9300, 17526, 83141, 96870, 92512, 67113, 31302, 8603, 45433, 58415, 94111, 38445, 47371, 19373, 59641, 51345, 9871, 98732, 4393, 87105, 91595, 55396, 89706, 12708, 23610, 10314, 82339, 98770, 35696, 59519, 54306, 9878, 43857, 175, 77430, 19047, 30341, 48601, 81401, 96725, 3182, 18891, 27163, 58364, 59515, 67402, 25627, 92543, 71100, 36412, 28606, 63793, 220, 22659, 74419, 14061, 23330, 53536, 8715, 83070, 85425, 46478, 39438, 86335, 97668, 93437, 26430, 53594, 42597, 18894, 81140, 60139, 48895, 68620, 30154, 8674, 14239, 84738, 91919, 61289, 2928, 27945, 82622, 39795, 33483, 45188, 61233, 1055, 9636, 81825, 23299, 60406, 90606, 51447, 24907, 27547, 86236, 24905, 39733, 87887, 2799, 17678, 22452, 26067, 20324, 76490, 20166, 82077, 66860, 61468, 60952, 87210, 77349, 69333, 41990, 72238, 64395, 79558, 54804, 11102, 43125, 44518, 94650, 99865, 5704, 67059, 62696, 63467, 50600, 10599, 59583, 2767, 12962, 79496, 7501, 94856, 46895, 37253, 65896, 42957, 64780, 79576, 75000, 67010, 36433, 29067, 13504, 39930, 60580, 40809, 30565, 86008, 9610, 21621, 42829, 85729, 18255, 67036, 80731, 49940, 50576, 35369, 51817, 28640, 95130, 99965, 59942, 36667, 49780, 84841, 13416, 88798, 63532, 60291, 68504, 23268, 64609, 69488, 81247, 98843, 92009, 35811, 25814, 36905, 72483, 27055, 34716, 64758, 73331, 87481, 83387, 73193, 26456, 70689, 26718, 15368, 68610, 37415, 69685, 26660, 58994, 88239, 42915, 30579, 88625, 94185, 33564, 76103, 99531, 16506, 21805, 99591, 66707, 53275, 60094, 60106, 47917, 17064, 588, 23399, 59448, 15159, 65872, 14075, 91437, 34982, 3491, 61861, 22583, 46724, 28640, 96162, 45799, 45700, 56204, 790, 26580, 44849, 84536, 92075, 898, 63302, 43030, 87840, 61803, 44490, 17220, 17428, 91330, 29382, 29839, 82510, 63631, 58266, 43826, 28555, 62540, 82687, 93399, 22643, 28913, 81935, 83292, 97679, 9809, 42665, 22886, 13490, 49690, 46276, 23359, 73694, 25675, 98944, 13087, 68470, 97974, 40560, 34598, 96472, 22533, 88933, 32205, 39262, 89504, 44571, 90331, 31405, 7741, 72851, 69017, 61701, 87546, 79591, 40430, 96642, 5836, 30191, 68056, 7472, 64222, 40934, 62582, 39936, 51757, 33739, 69501, 94717, 58980, 49295, 96847, 73803, 32436, 62578, 37250, 82190, 28630, 77450, 63634, 36256, 27066, 17095, 16858, 69357, 79281, 49118, 12453, 59989, 79518, 33521, 39832, 82066, 97842, 61064, 74695, 96308, 26107, 29246, 79073, 41877, 7988, 92758, 53220, 88823, 70637, 58922, 60552, 31478, 11576, 91022, 71430, 25117, 24592, 70126, 36711, 63821, 92920, 51309, 50076, 80624, 51378, 80068, 65745, 53927, 15531, 15844, 48322, 96270, 75961, 5843, 46138, 49687, 57143, 80049, 43570, 94748, 56725, 65542, 71158, 12566, 16405, 47248, 69060, 33551, 74129, 18884, 47224, 80884, 80230, 35666, 69300, 99704, 90241, 20703, 50049, 3504, 40682, 49852, 73271, 50372, 66243, 74661, 31913, 71887, 66396, 24890, 48017, 44597, 34744, 59100, 51173, 19588, 20244, 81442, 81897, 84738, 30210, 31256, 98471, 88910, 87800, 83486, 33802, 86828, 74993, 59345, 58094, 87129, 64073, 21371, 4290, 30248, 336, 53998, 38565, 39446, 2202, 38795, 90313, 5826, 62175, 12841, 8458, 1001, 70709, 34449, 51238, 46674, 19464, 74338, 34410, 21251, 65030, 30772, 7828, 53880, 20265, 33134, 56258, 19387, 63403, 68158, 23682, 22124, 976, 62988, 91999, 20787, 45007, 33220, 42596, 22787, 35997, 25048, 17014, 22302, 49859, 90590, 19848, 69658, 83130, 3520, 44091, 72256, 17791, 41258, 98650, 8733, 29689, 14682, 42580, 96615, 94137, 18357, 79930, 76558, 80485, 80260, 58979, 23576, 84584, 65465, 72743, 41909, 28283, 46844, 25236, 35339, 35266, 16721, 37658, 70544, 51463, 54955, 64562, 13789, 55610, 46769, 12302, 18591, 35815, 38418, 37406, 46067, 19154, 34955, 74290, 54392, 42175, 83789, 91353, 93015, 65246, 35869, 41252, 67778, 54754, 58771, 75056, 35455, 52004, 37284, 87219, 66447, 40815, 93618, 34993, 76049, 60600, 27549, 92801, 16121, 54505, 40061, 47642, 81979, 42385, 35617, 87358, 59661, 49056, 59499, 25813, 83479, 94138, 34550, 46768, 681, 14772, 13290, 91545, 12023, 46495, 1894, 32964, 18731, 61408, 8244, 91604, 96392, 40923, 93758, 55422, 98044, 12700, 66588, 72752, 81328, 86714, 16928, 2327, 73128, 19155, 41400, 73852, 24114, 53459, 13135, 14561, 560, 57825, 2857, 58632, 84773, 96793, 66866, 60960, 88260, 41221, 53436, 62566, 35867, 4450, 23932, 36181, 38638, 24647, 40777, 86252, 70897, 77932, 36206, 67227, 54145, 11501, 93919, 47290, 97935, 12636, 19139, 80586, 79258, 81781, 5754, 61045, 95068, 70122, 54892, 99830, 21544, 76678, 53019, 23575, 76741, 87439, 5914, 59657, 19407, 7695, 85122, 95534, 60839, 72838, 73286, 42159, 34719, 48138, 46625, 88441, 29959, 63429, 61616, 81082, 28338, 54584, 28423, 57109, 82893, 38236, 57999, 9275, 62820, 88236, 66299, 43471, 73510, 20208, 15475, 23515, 54211, 35752, 84815, 94132, 65781, 50029, 24956, 2829, 66957, 70935, 45095, 41132, 121, 41952, 14727, 24271, 94144, 55441, 76391, 56994, 82141, 17949, 4222, 24208, 94094, 46958, 95375, 84545, 41234, 46004, 34224, 29240, 3857, 32961, 77177, 28731, 62000, 7777, 94031, 85863, 55482, 18552, 24538, 71488, 54161, 67573, 51308, 64185, 87905, 14494, 5891, 38632, 96914, 89513, 970, 38149, 81881, 23115, 31488, 86409, 52332, 39862, 30207, 3216, 75907, 52087, 3414, 94261, 13104, 88691, 56577, 58543, 74196, 2006, 64508, 8712, 30835, 53662, 91454, 85543, 82807, 5122, 73986, 27723, 96761, 41407, 94599, 10459, 57826, 12357, 3108, 13809, 59859, 22051, 9779, 8164, 3972, 45354, 81657, 92542, 15999, 84855, 31783, 45512, 76879, 73867, 84760, 93967, 71026, 67857, 88295, 58970, 88258, 83970, 40787, 52817, 98358, 14902, 168, 2401, 4966, 36865, 77856, 27101, 51606, 55742, 13664, 17642, 31972, 12867, 85373, 79531, 89252, 47135, 77317, 65095, 64190, 6021, 3642, 55821, 28939, 37558, 14299, 85815, 74005, 38191, 10077, 48240, 32404, 8028, 73743, 15945, 2706, 31947, 24821, 36820, 14038, 22196, 61092, 85797, 32729, 4627, 49356, 50595, 28068, 69599, 19589, 41327, 76979, 89348, 51681, 61925, 48319, 83018, 58923, 66745, 23331, 50653, 38439, 38592, 61252, 51556, 98469, 7931, 34076, 66868, 86663, 63629, 12596, 81169, 79128, 35371, 24190, 80952, 91592, 96113, 87515, 13865, 46127, 78714, 21238, 14787, 65878, 60413, 75357, 9394, 64809, 44786, 14696, 75315, 14705, 84178, 17489, 38473, 80618, 24973, 50670, 47287, 7019, 90098, 84826, 99089, 82000, 91709, 10621, 36295, 56678, 15973, 94436, 14033, 36620, 60661, 1335, 16282, 99687, 13067, 22284, 37971, 41486, 47761, 10304, 23630, 94544, 30118, 44233, 5538, 75592, 48396, 39641, 18364, 30221, 98385, 88051, 16396, 48295, 26353, 63893, 47367, 28272, 40625, 66164, 62786, 71546, 89643, 27973, 19824, 81422, 9003, 20001, 81458, 88595, 21055, 38143, 11812, 46238, 66968, 35252, 66808, 48347, 85055, 93204, 7291, 74295, 90942, 43842, 57642, 60227, 31142, 23598, 55700, 84021, 71731, 38822, 61083, 51841, 23415, 42162, 59397, 57187, 10137, 36196, 28790, 98102, 79428, 36238, 77129, 79547, 17959, 72726, 34535, 51573, 13892, 49716, 78985, 38868, 93953, 23575, 32616, 50786, 60148, 70071, 20898, 96354, 29457, 25696, 96385, 52214, 63596, 90011, 16520, 9022, 89010, 21595, 10781, 2446, 20074, 39390, 66587, 13770, 77003, 91353, 10125, 85706, 5078, 23610, 53290, 70781, 40591, 43554, 24906, 98854, 30584, 14876, 17748, 4852, 87705, 4835, 82567, 17444, 342, 38129, 96791, 17324, 13554, 27549, 51521, 58087, 41180, 18280, 18705, 65436, 44829, 35784, 77462, 86368, 28292, 12564, 69004, 85042, 51639, 85837, 35975, 10965, 59773, 49670, 15228, 64822, 99713, 26599, 22024, 21234, 8586, 64340, 88297, 68845, 56119, 60589, 67198, 22394, 19363, 25613, 61995, 84741, 99895, 58891, 54536, 43241, 39189, 55686, 79492, 70753, 25128, 93719, 68392, 74747, 97392, 40643, 43090, 84888, 11357, 87745, 36606, 49434, 90027, 16459, 39663, 5549, 91141, 11380, 28883, 91579, 27632, 92667, 6549, 45231, 94632, 18901, 19507, 26581, 15412, 63302, 66766, 30685, 12484, 70507, 99496, 94158, 25001, 64520, 99235, 83281, 20736, 37096]
Tree:
(<start> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  )))))  else  (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_y)))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 2) (<digit> 0)))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 7) . (<digit> 4) (<digit> 6))))))))  else  (<expr> (<action> 'LINKS'))))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<comp_op> <)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 9) (<digit> 0))))))))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 1)))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 0) (<digit> 9)))  ))   (<comp_op> <=)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 6) (<digit> 3)))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 4) (<digit> 5)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 1) (<digit> 0)))  ))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 7) (<digit> 2)))  ))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 5) (<digit> 9)))  ))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 6) (<digit> 2)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ))  )))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> not direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_radius))))))  ))))  ))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_x))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> obstacle_y))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  )))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> velocity_y)))))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> !=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  )))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_x)))))))  ))))  )))  and  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 7) (<digit> 7)))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 3) (<digit> 0)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 5) (<digit> 2)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 7) (<digit> 5)))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 9) (<digit> 8)))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 7) (<digit> 2)))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<action> 'LINKS'))  if  (<direction_compound_expr> (<boolean_feature> not direction)  or  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  )))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_x)))))))  )))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 6) (<digit> 5)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 3) (<digit> 7)))  ))   (<comp_op> >)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 0) (<digit> 4)))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_x))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 8) (<digit> 3)))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  )))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  )))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_y)))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> ==)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_radius))))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x))))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> !=)   (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 2) (<digit> 6)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))))))  )))))  else  (<expr> (<action> 'LINKS'))))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> ==)   (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 0) (<digit> 9)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  )))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_y))))))))  )))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 0) (<digit> 7)))   (<comp_op> ==)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 3) (<digit> 2))))))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 9) (<digit> 2)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))   (<comp_op> <=)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 4) (<digit> 7)))))))  or  (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <)   (<arith_expr> (<numeric_feature> intersect_centers_x))))))  and  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 9) (<digit> 6)))   (<comp_op> <)   (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  )))))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 7) (<digit> 7)))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_y)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> velocity_y)))))))  ))))  )))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 6) (<digit> 3)))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 3) (<digit> 6)))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> intersect_radius)))))))  and  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> obstacle_x))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> velocity_x)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_y))   (<comp_op> >=)   (<arith_expr> (<numeric_feature> obstacle_x))))))  and  (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 7) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))   (<comp_op> <=)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 2) (<digit> 3)))  ))))))  or  (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<comp_op> !=)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))))))))  or  (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> obstacle_x))))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> ==)   (<arith_expr> (<numeric_feature> intersect_centers_y)))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_centers_x))   (<comp_op> !=)   (<arith_expr> (<numeric_feature> velocity_y)))))))  ))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 4) (<digit> 1)))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 9) (<digit> 5)))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 3)))  ))  ))  ))   (<comp_op> >)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 6) (<digit> 1)))))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 9) . (<digit> 7) (<digit> 0)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<comp_op> >=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 4) (<digit> 1)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 1) (<digit> 4)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 2) (<digit> 8)))  ))  ))   (<math_op> +)   (<arith_expr> (<numeric_feature> intersect_radius))  )))))  and  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 5) (<digit> 4)))  ,  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 4) (<digit> 3)))  ))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> *)   (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ))  ))   (<comp_op> <=)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 1) (<digit> 4)))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 4) (<digit> 5)))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 7) (<digit> 7)))  ))  )))))))  ))))  or  (<bool_term> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 0)))   (<comp_op> >=)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 0) (<digit> 9)))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 0) (<digit> 9)))   (<math_op> +)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 1) (<digit> 2)))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 8) . (<digit> 2) (<digit> 7)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_x))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 5) (<digit> 8)))  ))  ))  ,  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> -)   (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 6) (<digit> 4)))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_radius))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 3)))  ))  ))  ))   (<math_op> *)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  )))))  and  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 1) (<digit> 5)))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 5) (<digit> 6)))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 2) (<digit> 2)))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 8) (<digit> 5)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 7) (<digit> 3)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 0) . (<digit> 3) (<digit> 1)))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 6) (<digit> 7)))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ))  ))  ))   (<comp_op> !=)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 5) (<digit> 0)))  ,  (<arith_expr> (<numeric_feature> intersect_centers_x))  ))   (<math_op> -)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 6) . (<digit> 0) (<digit> 4)))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 0) . (<digit> 2) (<digit> 8)))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_x))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 9) . (<digit> 6) (<digit> 1)))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 0) (<digit> 9)))  ))  ))  ))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_x))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> +)   (<arith_expr> (<numeric_feature> obstacle_x))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 6) . (<digit> 3) (<digit> 3)))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 7) (<digit> 2)))  ))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 3) . (<digit> 4) (<digit> 4)))  ,  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 3) (<digit> 2)))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 3) (<digit> 5)))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 9) (<digit> 0)))  ))   (<math_op> *)   (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 5) . (<digit> 0) (<digit> 7)))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 2) . (<digit> 1) (<digit> 3)))  ))  )))))))  else  (<expr> (<if_expr> (<expr> (<if_expr> (<expr> (<action> 'RECHTS'))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_expr> (<bool_term> (<bool_term> (<bool_term> (<bool_term> (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_x))   (<comp_op> >)   (<arith_expr> (<numeric_feature> obstacle_y))))))  and  (<bool_factor> (  (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <)   (<arith_expr> (<numeric_feature> velocity_x))))))  )))  and  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<numeric_feature> intersect_radius))  ))   (<math_op> *)   (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> obstacle_y))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))  ))   (<comp_op> ==)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 7) . (<digit> 6) (<digit> 5))))))))  and  (<bool_factor> not  (<bool_factor> (  (<bool_expr> (<bool_expr> (<bool_term> (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> velocity_y))   (<comp_op> <=)   (<arith_expr> (<numeric_feature> intersect_centers_y))))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))   (<comp_op> >)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> velocity_x))  ,  (<arith_expr> (<numeric_feature> obstacle_x))  ))))))  )))))  or  (<bool_term> (<bool_factor> (<compare> (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 5) . (<digit> 3) (<digit> 6)))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> velocity_y))  ))  ))  ,  (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_radius))   (<math_op> +)   (<arith_expr> (<numeric_feature> velocity_y))  ))  ,  (<arith_expr> (<numeric_feature> velocity_x))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_y))  ))   (<math_op> *)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> intersect_centers_y))  ))  ))  ))  ))  ,  (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> intersect_centers_y))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 1) . (<digit> 4) (<digit> 8)))  ))  ))  ))   (<comp_op> <)   (<arith_expr> hypot(  (<arith_expr> p_div(  (<arith_expr> hypot(  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 5) (<digit> 6)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 3) . (<digit> 6) (<digit> 9)))  ))  ,  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> intersect_centers_x))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> *)   (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 7) (<digit> 5)))  ))  ))  ))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 8) . (<digit> 9) (<digit> 8)))   (<math_op> +)   (<arith_expr> p_div(  (<arith_expr> (<numeric_feature> obstacle_x))  ,  (<arith_expr> p_div(  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 4) . (<digit> 0) (<digit> 2)))  ,  (<arith_expr> (  (<arith_expr> (<numeric_feature> intersect_centers_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_centers_x))  ))  ))  ))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 0) (<digit> 0)))  )))))))  else  (<expr> (<action> 'RECHTS'))))  if  (<direction_compound_expr> (<boolean_feature> direction)  and  (<bool_expr> (<bool_term> (<bool_factor> not  (<bool_factor> not  (<bool_factor> not  (<bool_factor> (<compare> (<arith_expr> (<numeric_feature> intersect_radius))   (<comp_op> <)   (<arith_expr> (  (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (  (<arith_expr> (  (<arith_expr> (<numeric_feature> obstacle_x))   (<math_op> *)   (<arith_expr> (<numeric_feature> velocity_y))  ))   (<math_op> -)   (<arith_expr> (  (<arith_expr> (<numeric_feature> velocity_y))   (<math_op> -)   (<arith_expr> (<numeric_feature> intersect_radius))  ))  ))  ))  ,  (<arith_expr> (<numeric_feature> obstacle_y))  ))   (<math_op> -)   (<arith_expr> hypot(  (<arith_expr> hypot(  (<arith_expr> (<numeric_feature> velocity_y))  ,  (<arith_expr> (  (<arith_expr> (<number> (<maybe_sign> -) (<digit> 1) . (<digit> 1) (<digit> 7)))   (<math_op> +)   (<arith_expr> (<number> (<maybe_sign> ) (<digit> 2) . (<digit> 6) (<digit> 1)))  ))  ))  ,  (<arith_expr> (<number> (<maybe_sign> ) (<digit> 4) . (<digit> 2) (<digit> 6)))  ))  ))))))))))  else  (<expr> (<action> 'LINKS'))))))

Fitness:
9.337710594300606